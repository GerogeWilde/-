
freq.elf:     file format elf32-littlenios2
freq.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00004968 memsz 0x00004968 flags r-x
    LOAD off    0x00005988 vaddr 0x04004988 paddr 0x0400608c align 2**12
         filesz 0x00001704 memsz 0x00001704 flags rw-
    LOAD off    0x00007790 vaddr 0x04007790 paddr 0x04007790 align 2**12
         filesz 0x00000000 memsz 0x00000338 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004680  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000150  04004838  04004838  00005838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001704  04004988  0400608c  00005988  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000338  04007790  04007790  00007790  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000820  00000000  00000000  000070b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b566  00000000  00000000  000078d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000440b  00000000  00000000  00012e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003bbc  00000000  00000000  00017241  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c68  00000000  00000000  0001ae00  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001c78  00000000  00000000  0001ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002b2e  00000000  00000000  0001d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00020210  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b8  00000000  00000000  00020240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00022826  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00022829  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0002282c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002282d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0002282e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00022832  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00022836  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0002283a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0002283e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00022842  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00022846  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001f  00000000  00000000  00022849  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00064df2  00000000  00000000  00022868  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04004838 l    d  .rodata	00000000 .rodata
04004988 l    d  .rwdata	00000000 .rwdata
04007790 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../freq_bsp//obj/HAL/src/crt0.o
04000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
04000be4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
04001c1c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04001d80 l     F .text	00000038 alt_dev_reg
04004988 l     O .rwdata	00001060 jtag_uart_0
040059e8 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04002090 l     F .text	00000204 altera_avalon_jtag_uart_irq
04002294 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040028d0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
04002b84 l     F .text	00000098 altera_avalon_uart_irq
04002c1c l     F .text	000000d8 altera_avalon_uart_rxirq
04002cf4 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04002e84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
040030d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04003410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0400356c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04003598 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04003a38 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04003b70 l     F .text	00000050 alt_get_errno
04003bc0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04005c54 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
04001d08 g     F .text	00000078 alt_main
04001bd8 g     F .text	00000044 __ashldi3
04007838 g     O .bss	00000100 alt_irq
0400608c g       *ABS*	00000000 __flash_rwdata_start
04007790 g     O .bss	00000004 Freq_a
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04007794 g     O .bss	00000008 Time_interval_1000
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400779c g     O .bss	00000004 Freq_b
04007834 g     O .bss	00000004 errno
04007820 g     O .bss	00000004 alt_argv
0400e054 g       *ABS*	00000000 _gp
04005ad4 g     O .rwdata	00000180 alt_fd_list
04003ffc g     F .text	00000090 alt_find_dev
040043a8 g     F .text	000000f8 memcpy
040014e8 g     F .text	000000d4 __floatsidf
04003af8 g     F .text	00000078 alt_io_redirect
04004838 g       *ABS*	00000000 __DTOR_END__
04002494 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04000b60 g     F .text	00000084 __fixunsdfsi
04004254 g     F .text	0000008c alt_icache_flush
04006070 g     O .rwdata	00000004 alt_max_fd
040019c0 g     F .text	00000104 __unpack_d
04000f38 g     F .text	00000054 __adddf3
04006084 g     O .rwdata	00000004 _global_impure_ptr
04007ac8 g       *ABS*	00000000 __bss_end
04003948 g     F .text	000000f0 alt_iic_isr_register
04003ed8 g     F .text	00000104 alt_tick
04002adc g     F .text	000000a8 altera_avalon_uart_init
040038fc g     F .text	0000004c alt_ic_irq_enabled
04003e40 g     F .text	00000098 alt_alarm_stop
04007828 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
04005aac g     O .rwdata	00000028 alt_dev_null
04003528 g     F .text	00000044 alt_dcache_flush_all
040077a0 g     O .bss	00000008 freq1
040015bc g     F .text	000000d4 __fixdfsi
0400608c g       *ABS*	00000000 __ram_rwdata_end
04006068 g     O .rwdata	00000008 alt_dev_list
040077a8 g     O .bss	00000008 r_Freq_a
04004988 g       *ABS*	00000000 __ram_rodata_end
040077b0 g     O .bss	00000008 Duty_Cycle_a_1000
04001b94 g     F .text	00000044 __lshrdi3
04007ac8 g       *ABS*	00000000 end
04003128 g     F .text	000001a8 altera_avalon_uart_write
04001fd0 g     F .text	000000c0 altera_avalon_jtag_uart_init
04004838 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04002944 g     F .text	00000088 alt_avalon_timer_sc_init
04002a2c g     F .text	00000060 altera_avalon_uart_write_fd
040016f0 g     F .text	000000ac __clzsi2
04002a8c g     F .text	00000050 altera_avalon_uart_close_fd
040026ac g     F .text	00000224 altera_avalon_jtag_uart_write
0400465c g     F .text	000001a0 __call_exitprocs
040001b8 g     F .text	0000004c _start
0400782c g     O .bss	00000004 _alt_tick_rate
040077b8 g     O .bss	00000004 Time_interval
040077bc g     O .bss	00000008 Whole_Time_a_1000
04007830 g     O .bss	00000004 _alt_nticks
04001dec g     F .text	00000080 alt_sys_init
0400452c g     F .text	00000130 __register_exitproc
04002338 g     F .text	00000068 altera_avalon_jtag_uart_close
04004988 g       *ABS*	00000000 __ram_rwdata_start
04004838 g       *ABS*	00000000 __ram_rodata_start
04001e6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040041a0 g     F .text	000000b4 alt_get_fd
04001ac4 g     F .text	000000d0 __fpcmp_parts_d
0400432c g     F .text	0000007c memcmp
04001f2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04007ac8 g       *ABS*	00000000 __alt_stack_base
04001f7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040077c4 g     O .bss	00000008 r_Duty_Cycle_b
040012d0 g     F .text	000001b4 __divdf3
04000fec g     F .text	000002e4 __muldf3
040077cc g     O .bss	00000008 Freq_a_num
0400408c g     F .text	00000114 alt_find_file
040035e8 g     F .text	000000a0 alt_dev_llist_insert
04007790 g       *ABS*	00000000 __bss_start
04000264 g     F .text	000008fc main
04007824 g     O .bss	00000004 alt_envp
04001ecc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040077d4 g     O .bss	00000004 Duty_Cycle_b
04007938 g     O .bss	00000190 _atexit0
04006074 g     O .rwdata	00000004 alt_errno
040077d8 g     O .bss	00000001 Freq_b1
040077d9 g     O .bss	00000001 Freq_a2
04006054 g     O .rwdata	00000006 fore_txdata
04004838 g     O .rodata	00000014 __thenan_df
04004838 g       *ABS*	00000000 __CTOR_END__
04004838 g       *ABS*	00000000 __flash_rodata_start
040077da g     O .bss	00000001 Freq_a1
04004838 g       *ABS*	00000000 __DTOR_LIST__
04000204 g     F .text	00000060 delay
04001db8 g     F .text	00000034 alt_irq_init
04003de0 g     F .text	00000060 alt_release_fd
0400484c g     O .rodata	00000100 __clz_tab
040042e0 g     F .text	00000014 atexit
040077dc g     O .bss	00000008 Freq_b_num
04006088 g     O .rwdata	00000004 _impure_ptr
0400781c g     O .bss	00000004 alt_argc
040036e4 g     F .text	0000005c _do_dtors
040077e4 g     O .bss	00000008 Whole_Time_b_1000
04000020 g       .exceptions	00000000 alt_irq_entry
04006060 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04003770 g     F .text	00000050 alt_ic_isr_register
0400608c g       *ABS*	00000000 _edata
040029cc g     F .text	00000060 altera_avalon_uart_read_fd
04007ac8 g       *ABS*	00000000 _end
040077ec g     O .bss	00000008 Duty_Cycle_b_1000
040001b8 g       *ABS*	00000000 __ram_exceptions_end
040023a0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400605a g     O .rwdata	00000006 latter_txdata
040077f4 g     O .bss	00000004 Duty_Cycle_a
0400385c g     F .text	000000a0 alt_ic_irq_disable
04003fdc g     F .text	00000020 altera_nios2_qsys_irq_init
040042f4 g     F .text	00000038 exit
040077f8 g     O .bss	00000008 Freq_standard_num
04007800 g     O .bss	00000008 r_Time_interval
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04007808 g     O .bss	00000001 Time_interval1
04002e30 g     F .text	00000054 altera_avalon_uart_close
040047fc g     F .text	0000003c _exit
040032d0 g     F .text	00000140 alt_alarm_start
04001690 g     F .text	00000060 __muldi3
040044a0 g     F .text	0000008c strlen
04003c8c g     F .text	00000154 open
04001484 g     F .text	00000064 __gedf2
04003740 g     F .text	00000030 alt_icache_flush_all
04007809 g     O .bss	00000001 Freq_b2
04006078 g     O .rwdata	00000004 alt_priority_mask
040037c0 g     F .text	0000009c alt_ic_irq_enable
04002ed4 g     F .text	00000204 altera_avalon_uart_read
0400780c g     O .bss	00000008 r_Freq_b
04000f8c g     F .text	00000060 __subdf3
04007814 g     O .bss	00000008 r_Duty_Cycle_a
0400607c g     O .rwdata	00000008 alt_alarm_list
04003688 g     F .text	0000005c _do_ctors
04003460 g     F .text	000000c8 close
04001c88 g     F .text	00000080 alt_load
0400179c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406e14 	ori	at,at,440
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10034 	movhi	r3,1024
 4000130:	18de0e04 	addi	r3,r3,30776
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010034 	movhi	r4,1024
 4000148:	211e0e04 	addi	r4,r4,30776
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001d4:	d6b81514 	ori	gp,gp,57428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001dc:	109de414 	ori	r2,r2,30608

    movhi r3, %hi(__bss_end)
 40001e0:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001e4:	18deb214 	ori	r3,r3,31432

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f8:	4001c880 	call	4001c88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001fc:	4001d080 	call	4001d08 <alt_main>

04000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000200:	003fff06 	br	4000200 <alt_after_alt_main>

04000204 <delay>:
char fore_txdata[6] = {'a','c','e','m','o'};
char latter_txdata[6] = {'b','d','f','n','p'};
//float data = 130;

void delay(int z)
{
 4000204:	defffc04 	addi	sp,sp,-16
 4000208:	df000315 	stw	fp,12(sp)
 400020c:	df000304 	addi	fp,sp,12
 4000210:	e13fff15 	stw	r4,-4(fp)
	int x,y;
	for(x = z;x>0;x--)
 4000214:	e0bfff17 	ldw	r2,-4(fp)
 4000218:	e0bffd15 	stw	r2,-12(fp)
 400021c:	00000b06 	br	400024c <delay+0x48>
	for(y = 110;y>0;y--);
 4000220:	00801b84 	movi	r2,110
 4000224:	e0bffe15 	stw	r2,-8(fp)
 4000228:	00000306 	br	4000238 <delay+0x34>
 400022c:	e0bffe17 	ldw	r2,-8(fp)
 4000230:	10bfffc4 	addi	r2,r2,-1
 4000234:	e0bffe15 	stw	r2,-8(fp)
 4000238:	e0bffe17 	ldw	r2,-8(fp)
 400023c:	00bffb16 	blt	zero,r2,400022c <delay+0x28>
//float data = 130;

void delay(int z)
{
	int x,y;
	for(x = z;x>0;x--)
 4000240:	e0bffd17 	ldw	r2,-12(fp)
 4000244:	10bfffc4 	addi	r2,r2,-1
 4000248:	e0bffd15 	stw	r2,-12(fp)
 400024c:	e0bffd17 	ldw	r2,-12(fp)
 4000250:	00bff316 	blt	zero,r2,4000220 <delay+0x1c>
	for(y = 110;y>0;y--);
}
 4000254:	e037883a 	mov	sp,fp
 4000258:	df000017 	ldw	fp,0(sp)
 400025c:	dec00104 	addi	sp,sp,4
 4000260:	f800283a 	ret

04000264 <main>:


double freq1;

int main()
{
 4000264:	defffe04 	addi	sp,sp,-8
 4000268:	dfc00115 	stw	ra,4(sp)
 400026c:	df000015 	stw	fp,0(sp)
 4000270:	d839883a 	mov	fp,sp
  while(1)  // zongtishujuchuli
  {
	  // get data
	  Freq_a_num 			= IORD_ALTERA_AVALON_PIO_DATA(FREQ_A_BASE); //pinlv
 4000274:	00820034 	movhi	r2,2048
 4000278:	10843404 	addi	r2,r2,4304
 400027c:	10800037 	ldwio	r2,0(r2)
 4000280:	1009883a 	mov	r4,r2
 4000284:	40014e80 	call	40014e8 <__floatsidf>
 4000288:	1009883a 	mov	r4,r2
 400028c:	180b883a 	mov	r5,r3
 4000290:	d125de15 	stw	r4,-26760(gp)
 4000294:	00810034 	movhi	r2,1024
 4000298:	109df404 	addi	r2,r2,30672
 400029c:	11400015 	stw	r5,0(r2)
	  Freq_b_num 			= IORD_ALTERA_AVALON_PIO_DATA(FREQ_B_BASE);
 40002a0:	00820034 	movhi	r2,2048
 40002a4:	10843004 	addi	r2,r2,4288
 40002a8:	10800037 	ldwio	r2,0(r2)
 40002ac:	1009883a 	mov	r4,r2
 40002b0:	40014e80 	call	40014e8 <__floatsidf>
 40002b4:	1009883a 	mov	r4,r2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	d125e215 	stw	r4,-26744(gp)
 40002c0:	00810034 	movhi	r2,1024
 40002c4:	109df804 	addi	r2,r2,30688
 40002c8:	11400015 	stw	r5,0(r2)
	  Freq_standard_num 	= IORD_ALTERA_AVALON_PIO_DATA(FREQ_STANDARD_BASE);
 40002cc:	00820034 	movhi	r2,2048
 40002d0:	10842c04 	addi	r2,r2,4272
 40002d4:	10800037 	ldwio	r2,0(r2)
 40002d8:	1009883a 	mov	r4,r2
 40002dc:	40014e80 	call	40014e8 <__floatsidf>
 40002e0:	1009883a 	mov	r4,r2
 40002e4:	180b883a 	mov	r5,r3
 40002e8:	d125e915 	stw	r4,-26716(gp)
 40002ec:	00810034 	movhi	r2,1024
 40002f0:	109dff04 	addi	r2,r2,30716
 40002f4:	11400015 	stw	r5,0(r2)
	  Time_interval_1000 	= IORD_ALTERA_AVALON_PIO_DATA(TIME_INTERVAL_BASE);
 40002f8:	00820034 	movhi	r2,2048
 40002fc:	10842804 	addi	r2,r2,4256
 4000300:	10800037 	ldwio	r2,0(r2)
 4000304:	1009883a 	mov	r4,r2
 4000308:	40014e80 	call	40014e8 <__floatsidf>
 400030c:	1009883a 	mov	r4,r2
 4000310:	180b883a 	mov	r5,r3
 4000314:	d125d015 	stw	r4,-26816(gp)
 4000318:	00810034 	movhi	r2,1024
 400031c:	109de604 	addi	r2,r2,30616
 4000320:	11400015 	stw	r5,0(r2)
	  Duty_Cycle_a_1000 	= IORD_ALTERA_AVALON_PIO_DATA(DUTY_CYCLE_A_BASE);
 4000324:	00820034 	movhi	r2,2048
 4000328:	10842404 	addi	r2,r2,4240
 400032c:	10800037 	ldwio	r2,0(r2)
 4000330:	1009883a 	mov	r4,r2
 4000334:	40014e80 	call	40014e8 <__floatsidf>
 4000338:	1009883a 	mov	r4,r2
 400033c:	180b883a 	mov	r5,r3
 4000340:	d125d715 	stw	r4,-26788(gp)
 4000344:	00810034 	movhi	r2,1024
 4000348:	109ded04 	addi	r2,r2,30644
 400034c:	11400015 	stw	r5,0(r2)
	  Duty_Cycle_b_1000 	= IORD_ALTERA_AVALON_PIO_DATA(DUTY_CYCLE_B_BASE);
 4000350:	00820034 	movhi	r2,2048
 4000354:	10842004 	addi	r2,r2,4224
 4000358:	10800037 	ldwio	r2,0(r2)
 400035c:	1009883a 	mov	r4,r2
 4000360:	40014e80 	call	40014e8 <__floatsidf>
 4000364:	1009883a 	mov	r4,r2
 4000368:	180b883a 	mov	r5,r3
 400036c:	d125e615 	stw	r4,-26728(gp)
 4000370:	00810034 	movhi	r2,1024
 4000374:	109dfc04 	addi	r2,r2,30704
 4000378:	11400015 	stw	r5,0(r2)
	  Whole_Time_a_1000 	= IORD_ALTERA_AVALON_PIO_DATA(WHOLE_TIME_A_BASE);
 400037c:	00820034 	movhi	r2,2048
 4000380:	10841c04 	addi	r2,r2,4208
 4000384:	10800037 	ldwio	r2,0(r2)
 4000388:	1009883a 	mov	r4,r2
 400038c:	40014e80 	call	40014e8 <__floatsidf>
 4000390:	1009883a 	mov	r4,r2
 4000394:	180b883a 	mov	r5,r3
 4000398:	d125da15 	stw	r4,-26776(gp)
 400039c:	00810034 	movhi	r2,1024
 40003a0:	109df004 	addi	r2,r2,30656
 40003a4:	11400015 	stw	r5,0(r2)
	  Whole_Time_b_1000		= IORD_ALTERA_AVALON_PIO_DATA(WHOLE_TIME_B_BASE);
 40003a8:	00820034 	movhi	r2,2048
 40003ac:	10841804 	addi	r2,r2,4192
 40003b0:	10800037 	ldwio	r2,0(r2)
 40003b4:	1009883a 	mov	r4,r2
 40003b8:	40014e80 	call	40014e8 <__floatsidf>
 40003bc:	1009883a 	mov	r4,r2
 40003c0:	180b883a 	mov	r5,r3
 40003c4:	d125e415 	stw	r4,-26736(gp)
 40003c8:	00810034 	movhi	r2,1024
 40003cc:	109dfa04 	addi	r2,r2,30696
 40003d0:	11400015 	stw	r5,0(r2)

	  //freq1 = 126067/24999998;
	  r_Freq_a = (((Freq_a_num*10)/Freq_standard_num)*50)*100;
 40003d4:	d0a5de17 	ldw	r2,-26760(gp)
 40003d8:	01010034 	movhi	r4,1024
 40003dc:	211df404 	addi	r4,r4,30672
 40003e0:	20c00017 	ldw	r3,0(r4)
 40003e4:	1009883a 	mov	r4,r2
 40003e8:	180b883a 	mov	r5,r3
 40003ec:	000d883a 	mov	r6,zero
 40003f0:	01d00934 	movhi	r7,16420
 40003f4:	4000fec0 	call	4000fec <__muldf3>
 40003f8:	100f883a 	mov	r7,r2
 40003fc:	1811883a 	mov	r8,r3
 4000400:	380b883a 	mov	r5,r7
 4000404:	400d883a 	mov	r6,r8
 4000408:	d0a5e917 	ldw	r2,-26716(gp)
 400040c:	01010034 	movhi	r4,1024
 4000410:	211dff04 	addi	r4,r4,30716
 4000414:	20c00017 	ldw	r3,0(r4)
 4000418:	2809883a 	mov	r4,r5
 400041c:	300b883a 	mov	r5,r6
 4000420:	100d883a 	mov	r6,r2
 4000424:	180f883a 	mov	r7,r3
 4000428:	40012d00 	call	40012d0 <__divdf3>
 400042c:	1009883a 	mov	r4,r2
 4000430:	180b883a 	mov	r5,r3
 4000434:	2005883a 	mov	r2,r4
 4000438:	2807883a 	mov	r3,r5
 400043c:	1009883a 	mov	r4,r2
 4000440:	180b883a 	mov	r5,r3
 4000444:	000d883a 	mov	r6,zero
 4000448:	01d01274 	movhi	r7,16457
 400044c:	4000fec0 	call	4000fec <__muldf3>
 4000450:	1009883a 	mov	r4,r2
 4000454:	180b883a 	mov	r5,r3
 4000458:	2005883a 	mov	r2,r4
 400045c:	2807883a 	mov	r3,r5
 4000460:	1009883a 	mov	r4,r2
 4000464:	180b883a 	mov	r5,r3
 4000468:	000d883a 	mov	r6,zero
 400046c:	01d01674 	movhi	r7,16473
 4000470:	4000fec0 	call	4000fec <__muldf3>
 4000474:	1009883a 	mov	r4,r2
 4000478:	180b883a 	mov	r5,r3
 400047c:	2005883a 	mov	r2,r4
 4000480:	2807883a 	mov	r3,r5
 4000484:	d0a5d515 	stw	r2,-26796(gp)
 4000488:	01010034 	movhi	r4,1024
 400048c:	211deb04 	addi	r4,r4,30636
 4000490:	20c00015 	stw	r3,0(r4)
	  r_Freq_b = (((Freq_b_num*10)/Freq_standard_num)*50)*100;
 4000494:	d0a5e217 	ldw	r2,-26744(gp)
 4000498:	01010034 	movhi	r4,1024
 400049c:	211df804 	addi	r4,r4,30688
 40004a0:	20c00017 	ldw	r3,0(r4)
 40004a4:	1009883a 	mov	r4,r2
 40004a8:	180b883a 	mov	r5,r3
 40004ac:	000d883a 	mov	r6,zero
 40004b0:	01d00934 	movhi	r7,16420
 40004b4:	4000fec0 	call	4000fec <__muldf3>
 40004b8:	100f883a 	mov	r7,r2
 40004bc:	1811883a 	mov	r8,r3
 40004c0:	380b883a 	mov	r5,r7
 40004c4:	400d883a 	mov	r6,r8
 40004c8:	d0a5e917 	ldw	r2,-26716(gp)
 40004cc:	01010034 	movhi	r4,1024
 40004d0:	211dff04 	addi	r4,r4,30716
 40004d4:	20c00017 	ldw	r3,0(r4)
 40004d8:	2809883a 	mov	r4,r5
 40004dc:	300b883a 	mov	r5,r6
 40004e0:	100d883a 	mov	r6,r2
 40004e4:	180f883a 	mov	r7,r3
 40004e8:	40012d00 	call	40012d0 <__divdf3>
 40004ec:	1009883a 	mov	r4,r2
 40004f0:	180b883a 	mov	r5,r3
 40004f4:	2005883a 	mov	r2,r4
 40004f8:	2807883a 	mov	r3,r5
 40004fc:	1009883a 	mov	r4,r2
 4000500:	180b883a 	mov	r5,r3
 4000504:	000d883a 	mov	r6,zero
 4000508:	01d01274 	movhi	r7,16457
 400050c:	4000fec0 	call	4000fec <__muldf3>
 4000510:	1009883a 	mov	r4,r2
 4000514:	180b883a 	mov	r5,r3
 4000518:	2005883a 	mov	r2,r4
 400051c:	2807883a 	mov	r3,r5
 4000520:	1009883a 	mov	r4,r2
 4000524:	180b883a 	mov	r5,r3
 4000528:	000d883a 	mov	r6,zero
 400052c:	01d01674 	movhi	r7,16473
 4000530:	4000fec0 	call	4000fec <__muldf3>
 4000534:	1009883a 	mov	r4,r2
 4000538:	180b883a 	mov	r5,r3
 400053c:	2005883a 	mov	r2,r4
 4000540:	2807883a 	mov	r3,r5
 4000544:	d0a5ee15 	stw	r2,-26696(gp)
 4000548:	01010034 	movhi	r4,1024
 400054c:	211e0404 	addi	r4,r4,30736
 4000550:	20c00015 	stw	r3,0(r4)


	  r_Time_interval = (Time_interval_1000/1000)*20;
 4000554:	d0a5d017 	ldw	r2,-26816(gp)
 4000558:	01010034 	movhi	r4,1024
 400055c:	211de604 	addi	r4,r4,30616
 4000560:	20c00017 	ldw	r3,0(r4)
 4000564:	1009883a 	mov	r4,r2
 4000568:	180b883a 	mov	r5,r3
 400056c:	000d883a 	mov	r6,zero
 4000570:	01d023f4 	movhi	r7,16527
 4000574:	39d00004 	addi	r7,r7,16384
 4000578:	40012d00 	call	40012d0 <__divdf3>
 400057c:	1009883a 	mov	r4,r2
 4000580:	180b883a 	mov	r5,r3
 4000584:	2005883a 	mov	r2,r4
 4000588:	2807883a 	mov	r3,r5
 400058c:	1009883a 	mov	r4,r2
 4000590:	180b883a 	mov	r5,r3
 4000594:	000d883a 	mov	r6,zero
 4000598:	01d00d34 	movhi	r7,16436
 400059c:	4000fec0 	call	4000fec <__muldf3>
 40005a0:	1009883a 	mov	r4,r2
 40005a4:	180b883a 	mov	r5,r3
 40005a8:	2005883a 	mov	r2,r4
 40005ac:	2807883a 	mov	r3,r5
 40005b0:	d0a5eb15 	stw	r2,-26708(gp)
 40005b4:	01010034 	movhi	r4,1024
 40005b8:	211e0104 	addi	r4,r4,30724
 40005bc:	20c00015 	stw	r3,0(r4)


	  r_Duty_Cycle_a = (Duty_Cycle_a_1000 / Whole_Time_a_1000)*100;
 40005c0:	d165d717 	ldw	r5,-26788(gp)
 40005c4:	00810034 	movhi	r2,1024
 40005c8:	109ded04 	addi	r2,r2,30644
 40005cc:	11800017 	ldw	r6,0(r2)
 40005d0:	d0a5da17 	ldw	r2,-26776(gp)
 40005d4:	01010034 	movhi	r4,1024
 40005d8:	211df004 	addi	r4,r4,30656
 40005dc:	20c00017 	ldw	r3,0(r4)
 40005e0:	2809883a 	mov	r4,r5
 40005e4:	300b883a 	mov	r5,r6
 40005e8:	100d883a 	mov	r6,r2
 40005ec:	180f883a 	mov	r7,r3
 40005f0:	40012d00 	call	40012d0 <__divdf3>
 40005f4:	1009883a 	mov	r4,r2
 40005f8:	180b883a 	mov	r5,r3
 40005fc:	2005883a 	mov	r2,r4
 4000600:	2807883a 	mov	r3,r5
 4000604:	1009883a 	mov	r4,r2
 4000608:	180b883a 	mov	r5,r3
 400060c:	000d883a 	mov	r6,zero
 4000610:	01d01674 	movhi	r7,16473
 4000614:	4000fec0 	call	4000fec <__muldf3>
 4000618:	1009883a 	mov	r4,r2
 400061c:	180b883a 	mov	r5,r3
 4000620:	2005883a 	mov	r2,r4
 4000624:	2807883a 	mov	r3,r5
 4000628:	d0a5f015 	stw	r2,-26688(gp)
 400062c:	01010034 	movhi	r4,1024
 4000630:	211e0604 	addi	r4,r4,30744
 4000634:	20c00015 	stw	r3,0(r4)
	  r_Duty_Cycle_b = (Duty_Cycle_b_1000 / Whole_Time_b_1000)*100;
 4000638:	d165e617 	ldw	r5,-26728(gp)
 400063c:	00810034 	movhi	r2,1024
 4000640:	109dfc04 	addi	r2,r2,30704
 4000644:	11800017 	ldw	r6,0(r2)
 4000648:	d0a5e417 	ldw	r2,-26736(gp)
 400064c:	01010034 	movhi	r4,1024
 4000650:	211dfa04 	addi	r4,r4,30696
 4000654:	20c00017 	ldw	r3,0(r4)
 4000658:	2809883a 	mov	r4,r5
 400065c:	300b883a 	mov	r5,r6
 4000660:	100d883a 	mov	r6,r2
 4000664:	180f883a 	mov	r7,r3
 4000668:	40012d00 	call	40012d0 <__divdf3>
 400066c:	1009883a 	mov	r4,r2
 4000670:	180b883a 	mov	r5,r3
 4000674:	2005883a 	mov	r2,r4
 4000678:	2807883a 	mov	r3,r5
 400067c:	1009883a 	mov	r4,r2
 4000680:	180b883a 	mov	r5,r3
 4000684:	000d883a 	mov	r6,zero
 4000688:	01d01674 	movhi	r7,16473
 400068c:	4000fec0 	call	4000fec <__muldf3>
 4000690:	1009883a 	mov	r4,r2
 4000694:	180b883a 	mov	r5,r3
 4000698:	2005883a 	mov	r2,r4
 400069c:	2807883a 	mov	r3,r5
 40006a0:	d0a5dc15 	stw	r2,-26768(gp)
 40006a4:	01010034 	movhi	r4,1024
 40006a8:	211df204 	addi	r4,r4,30664
 40006ac:	20c00015 	stw	r3,0(r4)

	  Freq_a = r_Freq_a;
 40006b0:	d0a5d517 	ldw	r2,-26796(gp)
 40006b4:	01010034 	movhi	r4,1024
 40006b8:	211deb04 	addi	r4,r4,30636
 40006bc:	20c00017 	ldw	r3,0(r4)
 40006c0:	1009883a 	mov	r4,r2
 40006c4:	180b883a 	mov	r5,r3
 40006c8:	4000b600 	call	4000b60 <__fixunsdfsi>
 40006cc:	d0a5cf15 	stw	r2,-26820(gp)
	  Freq_b = r_Freq_b;
 40006d0:	d0a5ee17 	ldw	r2,-26696(gp)
 40006d4:	01010034 	movhi	r4,1024
 40006d8:	211e0404 	addi	r4,r4,30736
 40006dc:	20c00017 	ldw	r3,0(r4)
 40006e0:	1009883a 	mov	r4,r2
 40006e4:	180b883a 	mov	r5,r3
 40006e8:	4000b600 	call	4000b60 <__fixunsdfsi>
 40006ec:	d0a5d215 	stw	r2,-26808(gp)

	  Duty_Cycle_a = r_Duty_Cycle_a;
 40006f0:	d0a5f017 	ldw	r2,-26688(gp)
 40006f4:	01010034 	movhi	r4,1024
 40006f8:	211e0604 	addi	r4,r4,30744
 40006fc:	20c00017 	ldw	r3,0(r4)
 4000700:	1009883a 	mov	r4,r2
 4000704:	180b883a 	mov	r5,r3
 4000708:	4000b600 	call	4000b60 <__fixunsdfsi>
 400070c:	d0a5e815 	stw	r2,-26720(gp)
	  Duty_Cycle_b = r_Duty_Cycle_b;
 4000710:	d0a5dc17 	ldw	r2,-26768(gp)
 4000714:	01010034 	movhi	r4,1024
 4000718:	211df204 	addi	r4,r4,30664
 400071c:	20c00017 	ldw	r3,0(r4)
 4000720:	1009883a 	mov	r4,r2
 4000724:	180b883a 	mov	r5,r3
 4000728:	4000b600 	call	4000b60 <__fixunsdfsi>
 400072c:	d0a5e015 	stw	r2,-26752(gp)

	  Time_interval = r_Time_interval/100;
 4000730:	d0a5eb17 	ldw	r2,-26708(gp)
 4000734:	01010034 	movhi	r4,1024
 4000738:	211e0104 	addi	r4,r4,30724
 400073c:	20c00017 	ldw	r3,0(r4)
 4000740:	1009883a 	mov	r4,r2
 4000744:	180b883a 	mov	r5,r3
 4000748:	000d883a 	mov	r6,zero
 400074c:	01d01674 	movhi	r7,16473
 4000750:	40012d00 	call	40012d0 <__divdf3>
 4000754:	1009883a 	mov	r4,r2
 4000758:	180b883a 	mov	r5,r3
 400075c:	2005883a 	mov	r2,r4
 4000760:	2807883a 	mov	r3,r5
 4000764:	1009883a 	mov	r4,r2
 4000768:	180b883a 	mov	r5,r3
 400076c:	4000b600 	call	4000b60 <__fixunsdfsi>
 4000770:	d0a5d915 	stw	r2,-26780(gp)
//	  delay(100000);

//	  char Freq_a1;
//	  char Freq_a2;
//
	  Freq_a2 = Freq_a & 255;
 4000774:	d0a5cf17 	ldw	r2,-26820(gp)
 4000778:	d0a5e145 	stb	r2,-26747(gp)
	  Freq_a1 = (Freq_a>>8) & 255;
 400077c:	d0a5cf17 	ldw	r2,-26820(gp)
 4000780:	1004d23a 	srli	r2,r2,8
 4000784:	d0a5e185 	stb	r2,-26746(gp)

	  Freq_b2 = Freq_b & 255;
 4000788:	d0a5d217 	ldw	r2,-26808(gp)
 400078c:	d0a5ed45 	stb	r2,-26699(gp)
	  Freq_b1 = (Freq_b>>8) & 255;
 4000790:	d0a5d217 	ldw	r2,-26808(gp)
 4000794:	1004d23a 	srli	r2,r2,8
 4000798:	d0a5e105 	stb	r2,-26748(gp)

	  Time_interval = Time_interval & 255;
 400079c:	d0a5d917 	ldw	r2,-26780(gp)
 40007a0:	10803fcc 	andi	r2,r2,255
 40007a4:	d0a5d915 	stw	r2,-26780(gp)
	  Time_interval1 = (Time_interval>>8) & 255;
 40007a8:	d0a5d917 	ldw	r2,-26780(gp)
 40007ac:	1004d23a 	srli	r2,r2,8
 40007b0:	d0a5ed05 	stb	r2,-26700(gp)

	 // Freq_a pinlv
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40007b4:	0001883a 	nop
 40007b8:	00820034 	movhi	r2,2048
 40007bc:	10840a04 	addi	r2,r2,4136
 40007c0:	10800037 	ldwio	r2,0(r2)
 40007c4:	1080100c 	andi	r2,r2,64
 40007c8:	103ffb26 	beq	r2,zero,40007b8 <main+0x554>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[0]);
 40007cc:	d0a00003 	ldbu	r2,-32768(gp)
 40007d0:	10c03fcc 	andi	r3,r2,255
 40007d4:	18c0201c 	xori	r3,r3,128
 40007d8:	18ffe004 	addi	r3,r3,-128
 40007dc:	00820034 	movhi	r2,2048
 40007e0:	10840904 	addi	r2,r2,4132
 40007e4:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40007e8:	0001883a 	nop
 40007ec:	00820034 	movhi	r2,2048
 40007f0:	10840a04 	addi	r2,r2,4136
 40007f4:	10800037 	ldwio	r2,0(r2)
 40007f8:	1080100c 	andi	r2,r2,64
 40007fc:	103ffb26 	beq	r2,zero,40007ec <main+0x588>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Freq_a2);
 4000800:	d0a5e143 	ldbu	r2,-26747(gp)
 4000804:	10c03fcc 	andi	r3,r2,255
 4000808:	00820034 	movhi	r2,2048
 400080c:	10840904 	addi	r2,r2,4132
 4000810:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000814:	0001883a 	nop
 4000818:	00820034 	movhi	r2,2048
 400081c:	10840a04 	addi	r2,r2,4136
 4000820:	10800037 	ldwio	r2,0(r2)
 4000824:	1080100c 	andi	r2,r2,64
 4000828:	103ffb26 	beq	r2,zero,4000818 <main+0x5b4>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Freq_a1);
 400082c:	d0a5e183 	ldbu	r2,-26746(gp)
 4000830:	10c03fcc 	andi	r3,r2,255
 4000834:	00820034 	movhi	r2,2048
 4000838:	10840904 	addi	r2,r2,4132
 400083c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000840:	0001883a 	nop
 4000844:	00820034 	movhi	r2,2048
 4000848:	10840a04 	addi	r2,r2,4136
 400084c:	10800037 	ldwio	r2,0(r2)
 4000850:	1080100c 	andi	r2,r2,64
 4000854:	103ffb26 	beq	r2,zero,4000844 <main+0x5e0>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[0]);
 4000858:	d0a00183 	ldbu	r2,-32762(gp)
 400085c:	10c03fcc 	andi	r3,r2,255
 4000860:	18c0201c 	xori	r3,r3,128
 4000864:	18ffe004 	addi	r3,r3,-128
 4000868:	00820034 	movhi	r2,2048
 400086c:	10840904 	addi	r2,r2,4132
 4000870:	10c00035 	stwio	r3,0(r2)

	  //Freq_b
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000874:	0001883a 	nop
 4000878:	00820034 	movhi	r2,2048
 400087c:	10840a04 	addi	r2,r2,4136
 4000880:	10800037 	ldwio	r2,0(r2)
 4000884:	1080100c 	andi	r2,r2,64
 4000888:	103ffb26 	beq	r2,zero,4000878 <main+0x614>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[1]);
 400088c:	00810034 	movhi	r2,1024
 4000890:	10981544 	addi	r2,r2,24661
 4000894:	10800003 	ldbu	r2,0(r2)
 4000898:	10c03fcc 	andi	r3,r2,255
 400089c:	18c0201c 	xori	r3,r3,128
 40008a0:	18ffe004 	addi	r3,r3,-128
 40008a4:	00820034 	movhi	r2,2048
 40008a8:	10840904 	addi	r2,r2,4132
 40008ac:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40008b0:	0001883a 	nop
 40008b4:	00820034 	movhi	r2,2048
 40008b8:	10840a04 	addi	r2,r2,4136
 40008bc:	10800037 	ldwio	r2,0(r2)
 40008c0:	1080100c 	andi	r2,r2,64
 40008c4:	103ffb26 	beq	r2,zero,40008b4 <main+0x650>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Freq_b2);
 40008c8:	d0a5ed43 	ldbu	r2,-26699(gp)
 40008cc:	10c03fcc 	andi	r3,r2,255
 40008d0:	00820034 	movhi	r2,2048
 40008d4:	10840904 	addi	r2,r2,4132
 40008d8:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40008dc:	0001883a 	nop
 40008e0:	00820034 	movhi	r2,2048
 40008e4:	10840a04 	addi	r2,r2,4136
 40008e8:	10800037 	ldwio	r2,0(r2)
 40008ec:	1080100c 	andi	r2,r2,64
 40008f0:	103ffb26 	beq	r2,zero,40008e0 <main+0x67c>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Freq_b1);
 40008f4:	d0a5e103 	ldbu	r2,-26748(gp)
 40008f8:	10c03fcc 	andi	r3,r2,255
 40008fc:	00820034 	movhi	r2,2048
 4000900:	10840904 	addi	r2,r2,4132
 4000904:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000908:	0001883a 	nop
 400090c:	00820034 	movhi	r2,2048
 4000910:	10840a04 	addi	r2,r2,4136
 4000914:	10800037 	ldwio	r2,0(r2)
 4000918:	1080100c 	andi	r2,r2,64
 400091c:	103ffb26 	beq	r2,zero,400090c <main+0x6a8>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[1]);
 4000920:	00810034 	movhi	r2,1024
 4000924:	109816c4 	addi	r2,r2,24667
 4000928:	10800003 	ldbu	r2,0(r2)
 400092c:	10c03fcc 	andi	r3,r2,255
 4000930:	18c0201c 	xori	r3,r3,128
 4000934:	18ffe004 	addi	r3,r3,-128
 4000938:	00820034 	movhi	r2,2048
 400093c:	10840904 	addi	r2,r2,4132
 4000940:	10c00035 	stwio	r3,0(r2)

	  //Duty_Cycle_a zhankongbi
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000944:	0001883a 	nop
 4000948:	00820034 	movhi	r2,2048
 400094c:	10840a04 	addi	r2,r2,4136
 4000950:	10800037 	ldwio	r2,0(r2)
 4000954:	1080100c 	andi	r2,r2,64
 4000958:	103ffb26 	beq	r2,zero,4000948 <main+0x6e4>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[2]);
 400095c:	00810034 	movhi	r2,1024
 4000960:	10981584 	addi	r2,r2,24662
 4000964:	10800003 	ldbu	r2,0(r2)
 4000968:	10c03fcc 	andi	r3,r2,255
 400096c:	18c0201c 	xori	r3,r3,128
 4000970:	18ffe004 	addi	r3,r3,-128
 4000974:	00820034 	movhi	r2,2048
 4000978:	10840904 	addi	r2,r2,4132
 400097c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000980:	0001883a 	nop
 4000984:	00820034 	movhi	r2,2048
 4000988:	10840a04 	addi	r2,r2,4136
 400098c:	10800037 	ldwio	r2,0(r2)
 4000990:	1080100c 	andi	r2,r2,64
 4000994:	103ffb26 	beq	r2,zero,4000984 <main+0x720>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Duty_Cycle_a);
 4000998:	d0a5e817 	ldw	r2,-26720(gp)
 400099c:	1007883a 	mov	r3,r2
 40009a0:	00820034 	movhi	r2,2048
 40009a4:	10840904 	addi	r2,r2,4132
 40009a8:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40009ac:	0001883a 	nop
 40009b0:	00820034 	movhi	r2,2048
 40009b4:	10840a04 	addi	r2,r2,4136
 40009b8:	10800037 	ldwio	r2,0(r2)
 40009bc:	1080100c 	andi	r2,r2,64
 40009c0:	103ffb26 	beq	r2,zero,40009b0 <main+0x74c>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[2]);
 40009c4:	00810034 	movhi	r2,1024
 40009c8:	10981704 	addi	r2,r2,24668
 40009cc:	10800003 	ldbu	r2,0(r2)
 40009d0:	10c03fcc 	andi	r3,r2,255
 40009d4:	18c0201c 	xori	r3,r3,128
 40009d8:	18ffe004 	addi	r3,r3,-128
 40009dc:	00820034 	movhi	r2,2048
 40009e0:	10840904 	addi	r2,r2,4132
 40009e4:	10c00035 	stwio	r3,0(r2)


	  //Duty_Cycle_b
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40009e8:	0001883a 	nop
 40009ec:	00820034 	movhi	r2,2048
 40009f0:	10840a04 	addi	r2,r2,4136
 40009f4:	10800037 	ldwio	r2,0(r2)
 40009f8:	1080100c 	andi	r2,r2,64
 40009fc:	103ffb26 	beq	r2,zero,40009ec <main+0x788>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[3]);
 4000a00:	00810034 	movhi	r2,1024
 4000a04:	109815c4 	addi	r2,r2,24663
 4000a08:	10800003 	ldbu	r2,0(r2)
 4000a0c:	10c03fcc 	andi	r3,r2,255
 4000a10:	18c0201c 	xori	r3,r3,128
 4000a14:	18ffe004 	addi	r3,r3,-128
 4000a18:	00820034 	movhi	r2,2048
 4000a1c:	10840904 	addi	r2,r2,4132
 4000a20:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000a24:	0001883a 	nop
 4000a28:	00820034 	movhi	r2,2048
 4000a2c:	10840a04 	addi	r2,r2,4136
 4000a30:	10800037 	ldwio	r2,0(r2)
 4000a34:	1080100c 	andi	r2,r2,64
 4000a38:	103ffb26 	beq	r2,zero,4000a28 <main+0x7c4>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Duty_Cycle_b);
 4000a3c:	d0a5e017 	ldw	r2,-26752(gp)
 4000a40:	1007883a 	mov	r3,r2
 4000a44:	00820034 	movhi	r2,2048
 4000a48:	10840904 	addi	r2,r2,4132
 4000a4c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000a50:	0001883a 	nop
 4000a54:	00820034 	movhi	r2,2048
 4000a58:	10840a04 	addi	r2,r2,4136
 4000a5c:	10800037 	ldwio	r2,0(r2)
 4000a60:	1080100c 	andi	r2,r2,64
 4000a64:	103ffb26 	beq	r2,zero,4000a54 <main+0x7f0>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[3]);
 4000a68:	00810034 	movhi	r2,1024
 4000a6c:	10981744 	addi	r2,r2,24669
 4000a70:	10800003 	ldbu	r2,0(r2)
 4000a74:	10c03fcc 	andi	r3,r2,255
 4000a78:	18c0201c 	xori	r3,r3,128
 4000a7c:	18ffe004 	addi	r3,r3,-128
 4000a80:	00820034 	movhi	r2,2048
 4000a84:	10840904 	addi	r2,r2,4132
 4000a88:	10c00035 	stwio	r3,0(r2)

	  //Time_interval
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000a8c:	0001883a 	nop
 4000a90:	00820034 	movhi	r2,2048
 4000a94:	10840a04 	addi	r2,r2,4136
 4000a98:	10800037 	ldwio	r2,0(r2)
 4000a9c:	1080100c 	andi	r2,r2,64
 4000aa0:	103ffb26 	beq	r2,zero,4000a90 <main+0x82c>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[4]);
 4000aa4:	00810034 	movhi	r2,1024
 4000aa8:	10981604 	addi	r2,r2,24664
 4000aac:	10800003 	ldbu	r2,0(r2)
 4000ab0:	10c03fcc 	andi	r3,r2,255
 4000ab4:	18c0201c 	xori	r3,r3,128
 4000ab8:	18ffe004 	addi	r3,r3,-128
 4000abc:	00820034 	movhi	r2,2048
 4000ac0:	10840904 	addi	r2,r2,4132
 4000ac4:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000ac8:	0001883a 	nop
 4000acc:	00820034 	movhi	r2,2048
 4000ad0:	10840a04 	addi	r2,r2,4136
 4000ad4:	10800037 	ldwio	r2,0(r2)
 4000ad8:	1080100c 	andi	r2,r2,64
 4000adc:	103ffb26 	beq	r2,zero,4000acc <main+0x868>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Time_interval);
 4000ae0:	d0a5d917 	ldw	r2,-26780(gp)
 4000ae4:	1007883a 	mov	r3,r2
 4000ae8:	00820034 	movhi	r2,2048
 4000aec:	10840904 	addi	r2,r2,4132
 4000af0:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000af4:	0001883a 	nop
 4000af8:	00820034 	movhi	r2,2048
 4000afc:	10840a04 	addi	r2,r2,4136
 4000b00:	10800037 	ldwio	r2,0(r2)
 4000b04:	1080100c 	andi	r2,r2,64
 4000b08:	103ffb26 	beq	r2,zero,4000af8 <main+0x894>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, Time_interval1);
 4000b0c:	d0a5ed03 	ldbu	r2,-26700(gp)
 4000b10:	10c03fcc 	andi	r3,r2,255
 4000b14:	00820034 	movhi	r2,2048
 4000b18:	10840904 	addi	r2,r2,4132
 4000b1c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000b20:	0001883a 	nop
 4000b24:	00820034 	movhi	r2,2048
 4000b28:	10840a04 	addi	r2,r2,4136
 4000b2c:	10800037 	ldwio	r2,0(r2)
 4000b30:	1080100c 	andi	r2,r2,64
 4000b34:	103ffb26 	beq	r2,zero,4000b24 <main+0x8c0>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[4]);
 4000b38:	00810034 	movhi	r2,1024
 4000b3c:	10981784 	addi	r2,r2,24670
 4000b40:	10800003 	ldbu	r2,0(r2)
 4000b44:	10c03fcc 	andi	r3,r2,255
 4000b48:	18c0201c 	xori	r3,r3,128
 4000b4c:	18ffe004 	addi	r3,r3,-128
 4000b50:	00820034 	movhi	r2,2048
 4000b54:	10840904 	addi	r2,r2,4132
 4000b58:	10c00035 	stwio	r3,0(r2)
  }
 4000b5c:	003dc506 	br	4000274 <main+0x10>

04000b60 <__fixunsdfsi>:
 4000b60:	defffd04 	addi	sp,sp,-12
 4000b64:	000d883a 	mov	r6,zero
 4000b68:	01d07834 	movhi	r7,16864
 4000b6c:	dc400115 	stw	r17,4(sp)
 4000b70:	dc000015 	stw	r16,0(sp)
 4000b74:	dfc00215 	stw	ra,8(sp)
 4000b78:	2023883a 	mov	r17,r4
 4000b7c:	2821883a 	mov	r16,r5
 4000b80:	40014840 	call	4001484 <__gedf2>
 4000b84:	1000080e 	bge	r2,zero,4000ba8 <__fixunsdfsi+0x48>
 4000b88:	8809883a 	mov	r4,r17
 4000b8c:	800b883a 	mov	r5,r16
 4000b90:	40015bc0 	call	40015bc <__fixdfsi>
 4000b94:	dfc00217 	ldw	ra,8(sp)
 4000b98:	dc400117 	ldw	r17,4(sp)
 4000b9c:	dc000017 	ldw	r16,0(sp)
 4000ba0:	dec00304 	addi	sp,sp,12
 4000ba4:	f800283a 	ret
 4000ba8:	000d883a 	mov	r6,zero
 4000bac:	01d07834 	movhi	r7,16864
 4000bb0:	8809883a 	mov	r4,r17
 4000bb4:	800b883a 	mov	r5,r16
 4000bb8:	4000f8c0 	call	4000f8c <__subdf3>
 4000bbc:	180b883a 	mov	r5,r3
 4000bc0:	1009883a 	mov	r4,r2
 4000bc4:	40015bc0 	call	40015bc <__fixdfsi>
 4000bc8:	00e00034 	movhi	r3,32768
 4000bcc:	10c5883a 	add	r2,r2,r3
 4000bd0:	dfc00217 	ldw	ra,8(sp)
 4000bd4:	dc400117 	ldw	r17,4(sp)
 4000bd8:	dc000017 	ldw	r16,0(sp)
 4000bdc:	dec00304 	addi	sp,sp,12
 4000be0:	f800283a 	ret

04000be4 <_fpadd_parts>:
 4000be4:	2005883a 	mov	r2,r4
 4000be8:	21000017 	ldw	r4,0(r4)
 4000bec:	01c00044 	movi	r7,1
 4000bf0:	3900622e 	bgeu	r7,r4,4000d7c <_fpadd_parts+0x198>
 4000bf4:	28c00017 	ldw	r3,0(r5)
 4000bf8:	38c05f2e 	bgeu	r7,r3,4000d78 <_fpadd_parts+0x194>
 4000bfc:	01c00104 	movi	r7,4
 4000c00:	21c0c626 	beq	r4,r7,4000f1c <_fpadd_parts+0x338>
 4000c04:	19c05c26 	beq	r3,r7,4000d78 <_fpadd_parts+0x194>
 4000c08:	01c00084 	movi	r7,2
 4000c0c:	19c06b26 	beq	r3,r7,4000dbc <_fpadd_parts+0x1d8>
 4000c10:	21c05926 	beq	r4,r7,4000d78 <_fpadd_parts+0x194>
 4000c14:	11c00217 	ldw	r7,8(r2)
 4000c18:	2ac00217 	ldw	r11,8(r5)
 4000c1c:	13000317 	ldw	r12,12(r2)
 4000c20:	13400417 	ldw	r13,16(r2)
 4000c24:	3ac9c83a 	sub	r4,r7,r11
 4000c28:	2a000317 	ldw	r8,12(r5)
 4000c2c:	2a400417 	ldw	r9,16(r5)
 4000c30:	2015883a 	mov	r10,r4
 4000c34:	20007516 	blt	r4,zero,4000e0c <_fpadd_parts+0x228>
 4000c38:	00c00fc4 	movi	r3,63
 4000c3c:	1a805016 	blt	r3,r10,4000d80 <_fpadd_parts+0x19c>
 4000c40:	0100870e 	bge	zero,r4,4000e60 <_fpadd_parts+0x27c>
 4000c44:	50fff804 	addi	r3,r10,-32
 4000c48:	18009916 	blt	r3,zero,4000eb0 <_fpadd_parts+0x2cc>
 4000c4c:	48d6d83a 	srl	r11,r9,r3
 4000c50:	001d883a 	mov	r14,zero
 4000c54:	18009e16 	blt	r3,zero,4000ed0 <_fpadd_parts+0x2ec>
 4000c58:	01000044 	movi	r4,1
 4000c5c:	20c6983a 	sll	r3,r4,r3
 4000c60:	0015883a 	mov	r10,zero
 4000c64:	513fffc4 	addi	r4,r10,-1
 4000c68:	2295403a 	cmpgeu	r10,r4,r10
 4000c6c:	1a87c83a 	sub	r3,r3,r10
 4000c70:	1a52703a 	and	r9,r3,r9
 4000c74:	2210703a 	and	r8,r4,r8
 4000c78:	4250b03a 	or	r8,r8,r9
 4000c7c:	4010c03a 	cmpne	r8,r8,zero
 4000c80:	42d0b03a 	or	r8,r8,r11
 4000c84:	7013883a 	mov	r9,r14
 4000c88:	11000117 	ldw	r4,4(r2)
 4000c8c:	28800117 	ldw	r2,4(r5)
 4000c90:	20804126 	beq	r4,r2,4000d98 <_fpadd_parts+0x1b4>
 4000c94:	20006326 	beq	r4,zero,4000e24 <_fpadd_parts+0x240>
 4000c98:	4305c83a 	sub	r2,r8,r12
 4000c9c:	4091803a 	cmpltu	r8,r8,r2
 4000ca0:	4b47c83a 	sub	r3,r9,r13
 4000ca4:	1a07c83a 	sub	r3,r3,r8
 4000ca8:	18006316 	blt	r3,zero,4000e38 <_fpadd_parts+0x254>
 4000cac:	30000115 	stw	zero,4(r6)
 4000cb0:	31c00215 	stw	r7,8(r6)
 4000cb4:	30800315 	stw	r2,12(r6)
 4000cb8:	30c00415 	stw	r3,16(r6)
 4000cbc:	11ffffc4 	addi	r7,r2,-1
 4000cc0:	388b403a 	cmpgeu	r5,r7,r2
 4000cc4:	194bc83a 	sub	r5,r3,r5
 4000cc8:	01040034 	movhi	r4,4096
 4000ccc:	213fffc4 	addi	r4,r4,-1
 4000cd0:	21401736 	bltu	r4,r5,4000d30 <_fpadd_parts+0x14c>
 4000cd4:	29008226 	beq	r5,r4,4000ee0 <_fpadd_parts+0x2fc>
 4000cd8:	31400217 	ldw	r5,8(r6)
 4000cdc:	02840034 	movhi	r10,4096
 4000ce0:	52bfffc4 	addi	r10,r10,-1
 4000ce4:	033fff84 	movi	r12,-2
 4000ce8:	297fffc4 	addi	r5,r5,-1
 4000cec:	00000106 	br	4000cf4 <_fpadd_parts+0x110>
 4000cf0:	3a804a26 	beq	r7,r10,4000e1c <_fpadd_parts+0x238>
 4000cf4:	1089883a 	add	r4,r2,r2
 4000cf8:	2091803a 	cmpltu	r8,r4,r2
 4000cfc:	18c7883a 	add	r3,r3,r3
 4000d00:	227fffc4 	addi	r9,r4,-1
 4000d04:	40d1883a 	add	r8,r8,r3
 4000d08:	490f403a 	cmpgeu	r7,r9,r4
 4000d0c:	41cfc83a 	sub	r7,r8,r7
 4000d10:	2817883a 	mov	r11,r5
 4000d14:	2005883a 	mov	r2,r4
 4000d18:	4007883a 	mov	r3,r8
 4000d1c:	297fffc4 	addi	r5,r5,-1
 4000d20:	51fff32e 	bgeu	r10,r7,4000cf0 <_fpadd_parts+0x10c>
 4000d24:	31000315 	stw	r4,12(r6)
 4000d28:	32000415 	stw	r8,16(r6)
 4000d2c:	32c00215 	stw	r11,8(r6)
 4000d30:	010000c4 	movi	r4,3
 4000d34:	31000015 	stw	r4,0(r6)
 4000d38:	01080034 	movhi	r4,8192
 4000d3c:	213fffc4 	addi	r4,r4,-1
 4000d40:	20c00b2e 	bgeu	r4,r3,4000d70 <_fpadd_parts+0x18c>
 4000d44:	180e97fa 	slli	r7,r3,31
 4000d48:	1008d07a 	srli	r4,r2,1
 4000d4c:	31400217 	ldw	r5,8(r6)
 4000d50:	1806d07a 	srli	r3,r3,1
 4000d54:	1080004c 	andi	r2,r2,1
 4000d58:	3908b03a 	or	r4,r7,r4
 4000d5c:	1108b03a 	or	r4,r2,r4
 4000d60:	29400044 	addi	r5,r5,1
 4000d64:	31000315 	stw	r4,12(r6)
 4000d68:	30c00415 	stw	r3,16(r6)
 4000d6c:	31400215 	stw	r5,8(r6)
 4000d70:	3005883a 	mov	r2,r6
 4000d74:	f800283a 	ret
 4000d78:	2805883a 	mov	r2,r5
 4000d7c:	f800283a 	ret
 4000d80:	59c01e0e 	bge	r11,r7,4000dfc <_fpadd_parts+0x218>
 4000d84:	11000117 	ldw	r4,4(r2)
 4000d88:	28800117 	ldw	r2,4(r5)
 4000d8c:	0011883a 	mov	r8,zero
 4000d90:	0013883a 	mov	r9,zero
 4000d94:	20bfbf1e 	bne	r4,r2,4000c94 <_fpadd_parts+0xb0>
 4000d98:	4305883a 	add	r2,r8,r12
 4000d9c:	1207803a 	cmpltu	r3,r2,r8
 4000da0:	4b53883a 	add	r9,r9,r13
 4000da4:	1a47883a 	add	r3,r3,r9
 4000da8:	31000115 	stw	r4,4(r6)
 4000dac:	31c00215 	stw	r7,8(r6)
 4000db0:	30800315 	stw	r2,12(r6)
 4000db4:	30c00415 	stw	r3,16(r6)
 4000db8:	003fdd06 	br	4000d30 <_fpadd_parts+0x14c>
 4000dbc:	20ffef1e 	bne	r4,r3,4000d7c <_fpadd_parts+0x198>
 4000dc0:	31000015 	stw	r4,0(r6)
 4000dc4:	10c00117 	ldw	r3,4(r2)
 4000dc8:	30c00115 	stw	r3,4(r6)
 4000dcc:	10c00217 	ldw	r3,8(r2)
 4000dd0:	11000117 	ldw	r4,4(r2)
 4000dd4:	29400117 	ldw	r5,4(r5)
 4000dd8:	30c00215 	stw	r3,8(r6)
 4000ddc:	10c00317 	ldw	r3,12(r2)
 4000de0:	2908703a 	and	r4,r5,r4
 4000de4:	30c00315 	stw	r3,12(r6)
 4000de8:	10c00417 	ldw	r3,16(r2)
 4000dec:	31000115 	stw	r4,4(r6)
 4000df0:	3005883a 	mov	r2,r6
 4000df4:	30c00415 	stw	r3,16(r6)
 4000df8:	f800283a 	ret
 4000dfc:	580f883a 	mov	r7,r11
 4000e00:	0019883a 	mov	r12,zero
 4000e04:	001b883a 	mov	r13,zero
 4000e08:	003f9f06 	br	4000c88 <_fpadd_parts+0xa4>
 4000e0c:	0115c83a 	sub	r10,zero,r4
 4000e10:	00c00fc4 	movi	r3,63
 4000e14:	1abfda16 	blt	r3,r10,4000d80 <_fpadd_parts+0x19c>
 4000e18:	003f8906 	br	4000c40 <_fpadd_parts+0x5c>
 4000e1c:	627fb52e 	bgeu	r12,r9,4000cf4 <_fpadd_parts+0x110>
 4000e20:	003fc006 	br	4000d24 <_fpadd_parts+0x140>
 4000e24:	6205c83a 	sub	r2,r12,r8
 4000e28:	6099803a 	cmpltu	r12,r12,r2
 4000e2c:	6a47c83a 	sub	r3,r13,r9
 4000e30:	1b07c83a 	sub	r3,r3,r12
 4000e34:	183f9d0e 	bge	r3,zero,4000cac <_fpadd_parts+0xc8>
 4000e38:	0085c83a 	sub	r2,zero,r2
 4000e3c:	1008c03a 	cmpne	r4,r2,zero
 4000e40:	00c7c83a 	sub	r3,zero,r3
 4000e44:	1907c83a 	sub	r3,r3,r4
 4000e48:	01000044 	movi	r4,1
 4000e4c:	31000115 	stw	r4,4(r6)
 4000e50:	31c00215 	stw	r7,8(r6)
 4000e54:	30800315 	stw	r2,12(r6)
 4000e58:	30c00415 	stw	r3,16(r6)
 4000e5c:	003f9706 	br	4000cbc <_fpadd_parts+0xd8>
 4000e60:	203f8926 	beq	r4,zero,4000c88 <_fpadd_parts+0xa4>
 4000e64:	50fff804 	addi	r3,r10,-32
 4000e68:	3a8f883a 	add	r7,r7,r10
 4000e6c:	18002316 	blt	r3,zero,4000efc <_fpadd_parts+0x318>
 4000e70:	68d6d83a 	srl	r11,r13,r3
 4000e74:	001d883a 	mov	r14,zero
 4000e78:	18001c16 	blt	r3,zero,4000eec <_fpadd_parts+0x308>
 4000e7c:	01000044 	movi	r4,1
 4000e80:	20c6983a 	sll	r3,r4,r3
 4000e84:	0015883a 	mov	r10,zero
 4000e88:	513fffc4 	addi	r4,r10,-1
 4000e8c:	2295403a 	cmpgeu	r10,r4,r10
 4000e90:	1a87c83a 	sub	r3,r3,r10
 4000e94:	1b5a703a 	and	r13,r3,r13
 4000e98:	2318703a 	and	r12,r4,r12
 4000e9c:	6358b03a 	or	r12,r12,r13
 4000ea0:	6018c03a 	cmpne	r12,r12,zero
 4000ea4:	62d8b03a 	or	r12,r12,r11
 4000ea8:	701b883a 	mov	r13,r14
 4000eac:	003f7606 	br	4000c88 <_fpadd_parts+0xa4>
 4000eb0:	4808907a 	slli	r4,r9,1
 4000eb4:	02c007c4 	movi	r11,31
 4000eb8:	5a97c83a 	sub	r11,r11,r10
 4000ebc:	22c8983a 	sll	r4,r4,r11
 4000ec0:	4296d83a 	srl	r11,r8,r10
 4000ec4:	4a9cd83a 	srl	r14,r9,r10
 4000ec8:	22d6b03a 	or	r11,r4,r11
 4000ecc:	003f6106 	br	4000c54 <_fpadd_parts+0x70>
 4000ed0:	00c00044 	movi	r3,1
 4000ed4:	1a94983a 	sll	r10,r3,r10
 4000ed8:	0007883a 	mov	r3,zero
 4000edc:	003f6106 	br	4000c64 <_fpadd_parts+0x80>
 4000ee0:	013fff84 	movi	r4,-2
 4000ee4:	21ff7c2e 	bgeu	r4,r7,4000cd8 <_fpadd_parts+0xf4>
 4000ee8:	003f9106 	br	4000d30 <_fpadd_parts+0x14c>
 4000eec:	00c00044 	movi	r3,1
 4000ef0:	1a94983a 	sll	r10,r3,r10
 4000ef4:	0007883a 	mov	r3,zero
 4000ef8:	003fe306 	br	4000e88 <_fpadd_parts+0x2a4>
 4000efc:	6816907a 	slli	r11,r13,1
 4000f00:	010007c4 	movi	r4,31
 4000f04:	2289c83a 	sub	r4,r4,r10
 4000f08:	5908983a 	sll	r4,r11,r4
 4000f0c:	6296d83a 	srl	r11,r12,r10
 4000f10:	6a9cd83a 	srl	r14,r13,r10
 4000f14:	22d6b03a 	or	r11,r4,r11
 4000f18:	003fd706 	br	4000e78 <_fpadd_parts+0x294>
 4000f1c:	193f971e 	bne	r3,r4,4000d7c <_fpadd_parts+0x198>
 4000f20:	11000117 	ldw	r4,4(r2)
 4000f24:	28c00117 	ldw	r3,4(r5)
 4000f28:	20ff9426 	beq	r4,r3,4000d7c <_fpadd_parts+0x198>
 4000f2c:	00810034 	movhi	r2,1024
 4000f30:	10920e04 	addi	r2,r2,18488
 4000f34:	f800283a 	ret

04000f38 <__adddf3>:
 4000f38:	deffec04 	addi	sp,sp,-80
 4000f3c:	d9001115 	stw	r4,68(sp)
 4000f40:	d9401215 	stw	r5,72(sp)
 4000f44:	d9001104 	addi	r4,sp,68
 4000f48:	d9400a04 	addi	r5,sp,40
 4000f4c:	dfc01315 	stw	ra,76(sp)
 4000f50:	d9c01015 	stw	r7,64(sp)
 4000f54:	d9800f15 	stw	r6,60(sp)
 4000f58:	40019c00 	call	40019c0 <__unpack_d>
 4000f5c:	d9000f04 	addi	r4,sp,60
 4000f60:	d9400504 	addi	r5,sp,20
 4000f64:	40019c00 	call	40019c0 <__unpack_d>
 4000f68:	d9000a04 	addi	r4,sp,40
 4000f6c:	d9400504 	addi	r5,sp,20
 4000f70:	d80d883a 	mov	r6,sp
 4000f74:	4000be40 	call	4000be4 <_fpadd_parts>
 4000f78:	1009883a 	mov	r4,r2
 4000f7c:	400179c0 	call	400179c <__pack_d>
 4000f80:	dfc01317 	ldw	ra,76(sp)
 4000f84:	dec01404 	addi	sp,sp,80
 4000f88:	f800283a 	ret

04000f8c <__subdf3>:
 4000f8c:	deffec04 	addi	sp,sp,-80
 4000f90:	d9001115 	stw	r4,68(sp)
 4000f94:	d9401215 	stw	r5,72(sp)
 4000f98:	d9001104 	addi	r4,sp,68
 4000f9c:	d9400a04 	addi	r5,sp,40
 4000fa0:	dfc01315 	stw	ra,76(sp)
 4000fa4:	d9c01015 	stw	r7,64(sp)
 4000fa8:	d9800f15 	stw	r6,60(sp)
 4000fac:	40019c00 	call	40019c0 <__unpack_d>
 4000fb0:	d9000f04 	addi	r4,sp,60
 4000fb4:	d9400504 	addi	r5,sp,20
 4000fb8:	40019c00 	call	40019c0 <__unpack_d>
 4000fbc:	d8800617 	ldw	r2,24(sp)
 4000fc0:	d9000a04 	addi	r4,sp,40
 4000fc4:	d9400504 	addi	r5,sp,20
 4000fc8:	d80d883a 	mov	r6,sp
 4000fcc:	1080005c 	xori	r2,r2,1
 4000fd0:	d8800615 	stw	r2,24(sp)
 4000fd4:	4000be40 	call	4000be4 <_fpadd_parts>
 4000fd8:	1009883a 	mov	r4,r2
 4000fdc:	400179c0 	call	400179c <__pack_d>
 4000fe0:	dfc01317 	ldw	ra,76(sp)
 4000fe4:	dec01404 	addi	sp,sp,80
 4000fe8:	f800283a 	ret

04000fec <__muldf3>:
 4000fec:	deffe404 	addi	sp,sp,-112
 4000ff0:	d9001115 	stw	r4,68(sp)
 4000ff4:	d9401215 	stw	r5,72(sp)
 4000ff8:	d9001104 	addi	r4,sp,68
 4000ffc:	d9400a04 	addi	r5,sp,40
 4001000:	dfc01b15 	stw	ra,108(sp)
 4001004:	d9800f15 	stw	r6,60(sp)
 4001008:	d9c01015 	stw	r7,64(sp)
 400100c:	ddc01a15 	stw	r23,104(sp)
 4001010:	dd801915 	stw	r22,100(sp)
 4001014:	dd401815 	stw	r21,96(sp)
 4001018:	dd001715 	stw	r20,92(sp)
 400101c:	dcc01615 	stw	r19,88(sp)
 4001020:	dc801515 	stw	r18,84(sp)
 4001024:	dc401415 	stw	r17,80(sp)
 4001028:	dc001315 	stw	r16,76(sp)
 400102c:	40019c00 	call	40019c0 <__unpack_d>
 4001030:	d9000f04 	addi	r4,sp,60
 4001034:	d9400504 	addi	r5,sp,20
 4001038:	40019c00 	call	40019c0 <__unpack_d>
 400103c:	d8c00a17 	ldw	r3,40(sp)
 4001040:	00800044 	movi	r2,1
 4001044:	10c01136 	bltu	r2,r3,400108c <__muldf3+0xa0>
 4001048:	d8c00b17 	ldw	r3,44(sp)
 400104c:	d8800617 	ldw	r2,24(sp)
 4001050:	d9000a04 	addi	r4,sp,40
 4001054:	1884c03a 	cmpne	r2,r3,r2
 4001058:	d8800b15 	stw	r2,44(sp)
 400105c:	400179c0 	call	400179c <__pack_d>
 4001060:	dfc01b17 	ldw	ra,108(sp)
 4001064:	ddc01a17 	ldw	r23,104(sp)
 4001068:	dd801917 	ldw	r22,100(sp)
 400106c:	dd401817 	ldw	r21,96(sp)
 4001070:	dd001717 	ldw	r20,92(sp)
 4001074:	dcc01617 	ldw	r19,88(sp)
 4001078:	dc801517 	ldw	r18,84(sp)
 400107c:	dc401417 	ldw	r17,80(sp)
 4001080:	dc001317 	ldw	r16,76(sp)
 4001084:	dec01c04 	addi	sp,sp,112
 4001088:	f800283a 	ret
 400108c:	d9000517 	ldw	r4,20(sp)
 4001090:	11000636 	bltu	r2,r4,40010ac <__muldf3+0xc0>
 4001094:	d8800617 	ldw	r2,24(sp)
 4001098:	d8c00b17 	ldw	r3,44(sp)
 400109c:	d9000504 	addi	r4,sp,20
 40010a0:	1884c03a 	cmpne	r2,r3,r2
 40010a4:	d8800615 	stw	r2,24(sp)
 40010a8:	003fec06 	br	400105c <__muldf3+0x70>
 40010ac:	00800104 	movi	r2,4
 40010b0:	1880051e 	bne	r3,r2,40010c8 <__muldf3+0xdc>
 40010b4:	00800084 	movi	r2,2
 40010b8:	20bfe31e 	bne	r4,r2,4001048 <__muldf3+0x5c>
 40010bc:	01010034 	movhi	r4,1024
 40010c0:	21120e04 	addi	r4,r4,18488
 40010c4:	003fe506 	br	400105c <__muldf3+0x70>
 40010c8:	2080031e 	bne	r4,r2,40010d8 <__muldf3+0xec>
 40010cc:	00800084 	movi	r2,2
 40010d0:	18bffa26 	beq	r3,r2,40010bc <__muldf3+0xd0>
 40010d4:	003fef06 	br	4001094 <__muldf3+0xa8>
 40010d8:	00800084 	movi	r2,2
 40010dc:	18bfda26 	beq	r3,r2,4001048 <__muldf3+0x5c>
 40010e0:	20bfec26 	beq	r4,r2,4001094 <__muldf3+0xa8>
 40010e4:	dc000d17 	ldw	r16,52(sp)
 40010e8:	dd000817 	ldw	r20,32(sp)
 40010ec:	dc800917 	ldw	r18,36(sp)
 40010f0:	8009883a 	mov	r4,r16
 40010f4:	000b883a 	mov	r5,zero
 40010f8:	a00d883a 	mov	r6,r20
 40010fc:	000f883a 	mov	r7,zero
 4001100:	40016900 	call	4001690 <__muldi3>
 4001104:	dc400e17 	ldw	r17,56(sp)
 4001108:	9009883a 	mov	r4,r18
 400110c:	800d883a 	mov	r6,r16
 4001110:	000b883a 	mov	r5,zero
 4001114:	000f883a 	mov	r7,zero
 4001118:	102f883a 	mov	r23,r2
 400111c:	1827883a 	mov	r19,r3
 4001120:	40016900 	call	4001690 <__muldi3>
 4001124:	900d883a 	mov	r6,r18
 4001128:	8809883a 	mov	r4,r17
 400112c:	000b883a 	mov	r5,zero
 4001130:	000f883a 	mov	r7,zero
 4001134:	102b883a 	mov	r21,r2
 4001138:	1821883a 	mov	r16,r3
 400113c:	40016900 	call	4001690 <__muldi3>
 4001140:	8809883a 	mov	r4,r17
 4001144:	000b883a 	mov	r5,zero
 4001148:	a00d883a 	mov	r6,r20
 400114c:	000f883a 	mov	r7,zero
 4001150:	102d883a 	mov	r22,r2
 4001154:	1825883a 	mov	r18,r3
 4001158:	40016900 	call	4001690 <__muldi3>
 400115c:	154b883a 	add	r5,r2,r21
 4001160:	2889803a 	cmpltu	r4,r5,r2
 4001164:	1c07883a 	add	r3,r3,r16
 4001168:	20c9883a 	add	r4,r4,r3
 400116c:	24004b36 	bltu	r4,r16,400129c <__muldf3+0x2b0>
 4001170:	8100011e 	bne	r16,r4,4001178 <__muldf3+0x18c>
 4001174:	2d404936 	bltu	r5,r21,400129c <__muldf3+0x2b0>
 4001178:	0011883a 	mov	r8,zero
 400117c:	0007883a 	mov	r3,zero
 4001180:	2ccb883a 	add	r5,r5,r19
 4001184:	b80d883a 	mov	r6,r23
 4001188:	2cc0012e 	bgeu	r5,r19,4001190 <__muldf3+0x1a4>
 400118c:	02000044 	movi	r8,1
 4001190:	258f883a 	add	r7,r4,r22
 4001194:	3909803a 	cmpltu	r4,r7,r4
 4001198:	da400c17 	ldw	r9,48(sp)
 400119c:	2489883a 	add	r4,r4,r18
 40011a0:	d8800717 	ldw	r2,28(sp)
 40011a4:	20c9883a 	add	r4,r4,r3
 40011a8:	da800b17 	ldw	r10,44(sp)
 40011ac:	d8c00617 	ldw	r3,24(sp)
 40011b0:	3a11883a 	add	r8,r7,r8
 40011b4:	4885883a 	add	r2,r9,r2
 40011b8:	50c6c03a 	cmpne	r3,r10,r3
 40011bc:	41cf803a 	cmpltu	r7,r8,r7
 40011c0:	12400104 	addi	r9,r2,4
 40011c4:	d8c00115 	stw	r3,4(sp)
 40011c8:	3909883a 	add	r4,r7,r4
 40011cc:	da400215 	stw	r9,8(sp)
 40011d0:	03480034 	movhi	r13,8192
 40011d4:	6b7fffc4 	addi	r13,r13,-1
 40011d8:	4007883a 	mov	r3,r8
 40011dc:	6900102e 	bgeu	r13,r4,4001220 <__muldf3+0x234>
 40011e0:	10800144 	addi	r2,r2,5
 40011e4:	180ed07a 	srli	r7,r3,1
 40011e8:	18c0004c 	andi	r3,r3,1
 40011ec:	201097fa 	slli	r8,r4,31
 40011f0:	281697fa 	slli	r11,r5,31
 40011f4:	2008d07a 	srli	r4,r4,1
 40011f8:	3014d07a 	srli	r10,r6,1
 40011fc:	2812d07a 	srli	r9,r5,1
 4001200:	1019883a 	mov	r12,r2
 4001204:	18000226 	beq	r3,zero,4001210 <__muldf3+0x224>
 4001208:	5a8cb03a 	or	r6,r11,r10
 400120c:	49600034 	orhi	r5,r9,32768
 4001210:	41c6b03a 	or	r3,r8,r7
 4001214:	10800044 	addi	r2,r2,1
 4001218:	693ff236 	bltu	r13,r4,40011e4 <__muldf3+0x1f8>
 400121c:	db000215 	stw	r12,8(sp)
 4001220:	03440034 	movhi	r13,4096
 4001224:	6b7fffc4 	addi	r13,r13,-1
 4001228:	69001336 	bltu	r13,r4,4001278 <__muldf3+0x28c>
 400122c:	d8800217 	ldw	r2,8(sp)
 4001230:	10bfffc4 	addi	r2,r2,-1
 4001234:	18d3883a 	add	r9,r3,r3
 4001238:	48c7803a 	cmpltu	r3,r9,r3
 400123c:	2109883a 	add	r4,r4,r4
 4001240:	190f883a 	add	r7,r3,r4
 4001244:	3191883a 	add	r8,r6,r6
 4001248:	4197803a 	cmpltu	r11,r8,r6
 400124c:	2955883a 	add	r10,r5,r5
 4001250:	1019883a 	mov	r12,r2
 4001254:	4807883a 	mov	r3,r9
 4001258:	3809883a 	mov	r4,r7
 400125c:	2800010e 	bge	r5,zero,4001264 <__muldf3+0x278>
 4001260:	48c00054 	ori	r3,r9,1
 4001264:	400d883a 	mov	r6,r8
 4001268:	5a8b883a 	add	r5,r11,r10
 400126c:	10bfffc4 	addi	r2,r2,-1
 4001270:	69fff02e 	bgeu	r13,r7,4001234 <__muldf3+0x248>
 4001274:	db000215 	stw	r12,8(sp)
 4001278:	18803fcc 	andi	r2,r3,255
 400127c:	01c02004 	movi	r7,128
 4001280:	11c00926 	beq	r2,r7,40012a8 <__muldf3+0x2bc>
 4001284:	008000c4 	movi	r2,3
 4001288:	d9000415 	stw	r4,16(sp)
 400128c:	d8c00315 	stw	r3,12(sp)
 4001290:	d8800015 	stw	r2,0(sp)
 4001294:	d809883a 	mov	r4,sp
 4001298:	003f7006 	br	400105c <__muldf3+0x70>
 400129c:	0011883a 	mov	r8,zero
 40012a0:	00c00044 	movi	r3,1
 40012a4:	003fb606 	br	4001180 <__muldf3+0x194>
 40012a8:	19c0400c 	andi	r7,r3,256
 40012ac:	383ff51e 	bne	r7,zero,4001284 <__muldf3+0x298>
 40012b0:	314ab03a 	or	r5,r6,r5
 40012b4:	283ff326 	beq	r5,zero,4001284 <__muldf3+0x298>
 40012b8:	1885883a 	add	r2,r3,r2
 40012bc:	10cb803a 	cmpltu	r5,r2,r3
 40012c0:	00ffc004 	movi	r3,-256
 40012c4:	10c6703a 	and	r3,r2,r3
 40012c8:	2909883a 	add	r4,r5,r4
 40012cc:	003fed06 	br	4001284 <__muldf3+0x298>

040012d0 <__divdf3>:
 40012d0:	defff104 	addi	sp,sp,-60
 40012d4:	d9000c15 	stw	r4,48(sp)
 40012d8:	d9400d15 	stw	r5,52(sp)
 40012dc:	d9000c04 	addi	r4,sp,48
 40012e0:	d9400504 	addi	r5,sp,20
 40012e4:	dfc00e15 	stw	ra,56(sp)
 40012e8:	d9800a15 	stw	r6,40(sp)
 40012ec:	d9c00b15 	stw	r7,44(sp)
 40012f0:	40019c00 	call	40019c0 <__unpack_d>
 40012f4:	d9000a04 	addi	r4,sp,40
 40012f8:	d80b883a 	mov	r5,sp
 40012fc:	40019c00 	call	40019c0 <__unpack_d>
 4001300:	d8c00517 	ldw	r3,20(sp)
 4001304:	00800044 	movi	r2,1
 4001308:	10c00536 	bltu	r2,r3,4001320 <__divdf3+0x50>
 400130c:	d9000504 	addi	r4,sp,20
 4001310:	400179c0 	call	400179c <__pack_d>
 4001314:	dfc00e17 	ldw	ra,56(sp)
 4001318:	dec00f04 	addi	sp,sp,60
 400131c:	f800283a 	ret
 4001320:	d9000017 	ldw	r4,0(sp)
 4001324:	11000536 	bltu	r2,r4,400133c <__divdf3+0x6c>
 4001328:	d809883a 	mov	r4,sp
 400132c:	400179c0 	call	400179c <__pack_d>
 4001330:	dfc00e17 	ldw	ra,56(sp)
 4001334:	dec00f04 	addi	sp,sp,60
 4001338:	f800283a 	ret
 400133c:	d9800617 	ldw	r6,24(sp)
 4001340:	d9400117 	ldw	r5,4(sp)
 4001344:	00800104 	movi	r2,4
 4001348:	314af03a 	xor	r5,r6,r5
 400134c:	d9400615 	stw	r5,24(sp)
 4001350:	18800226 	beq	r3,r2,400135c <__divdf3+0x8c>
 4001354:	01400084 	movi	r5,2
 4001358:	1940041e 	bne	r3,r5,400136c <__divdf3+0x9c>
 400135c:	193feb1e 	bne	r3,r4,400130c <__divdf3+0x3c>
 4001360:	01010034 	movhi	r4,1024
 4001364:	21120e04 	addi	r4,r4,18488
 4001368:	003fe906 	br	4001310 <__divdf3+0x40>
 400136c:	20803326 	beq	r4,r2,400143c <__divdf3+0x16c>
 4001370:	21403726 	beq	r4,r5,4001450 <__divdf3+0x180>
 4001374:	d8800217 	ldw	r2,8(sp)
 4001378:	d9000717 	ldw	r4,28(sp)
 400137c:	d8c00917 	ldw	r3,36(sp)
 4001380:	da000417 	ldw	r8,16(sp)
 4001384:	2089c83a 	sub	r4,r4,r2
 4001388:	d9000715 	stw	r4,28(sp)
 400138c:	d8800817 	ldw	r2,32(sp)
 4001390:	dbc00317 	ldw	r15,12(sp)
 4001394:	1a000236 	bltu	r3,r8,40013a0 <__divdf3+0xd0>
 4001398:	40c0081e 	bne	r8,r3,40013bc <__divdf3+0xec>
 400139c:	13c0072e 	bgeu	r2,r15,40013bc <__divdf3+0xec>
 40013a0:	108b883a 	add	r5,r2,r2
 40013a4:	288d803a 	cmpltu	r6,r5,r2
 40013a8:	18c7883a 	add	r3,r3,r3
 40013ac:	213fffc4 	addi	r4,r4,-1
 40013b0:	2805883a 	mov	r2,r5
 40013b4:	30c7883a 	add	r3,r6,r3
 40013b8:	d9000715 	stw	r4,28(sp)
 40013bc:	01400f44 	movi	r5,61
 40013c0:	000f883a 	mov	r7,zero
 40013c4:	01040034 	movhi	r4,4096
 40013c8:	0019883a 	mov	r12,zero
 40013cc:	001b883a 	mov	r13,zero
 40013d0:	201697fa 	slli	r11,r4,31
 40013d4:	3814d07a 	srli	r10,r7,1
 40013d8:	297fffc4 	addi	r5,r5,-1
 40013dc:	1a000936 	bltu	r3,r8,4001404 <__divdf3+0x134>
 40013e0:	13cdc83a 	sub	r6,r2,r15
 40013e4:	1193803a 	cmpltu	r9,r2,r6
 40013e8:	1a1dc83a 	sub	r14,r3,r8
 40013ec:	40c0011e 	bne	r8,r3,40013f4 <__divdf3+0x124>
 40013f0:	13c00436 	bltu	r2,r15,4001404 <__divdf3+0x134>
 40013f4:	3005883a 	mov	r2,r6
 40013f8:	7247c83a 	sub	r3,r14,r9
 40013fc:	61d8b03a 	or	r12,r12,r7
 4001400:	691ab03a 	or	r13,r13,r4
 4001404:	108d883a 	add	r6,r2,r2
 4001408:	3093803a 	cmpltu	r9,r6,r2
 400140c:	18c7883a 	add	r3,r3,r3
 4001410:	5a8eb03a 	or	r7,r11,r10
 4001414:	2008d07a 	srli	r4,r4,1
 4001418:	3005883a 	mov	r2,r6
 400141c:	48c7883a 	add	r3,r9,r3
 4001420:	283feb1e 	bne	r5,zero,40013d0 <__divdf3+0x100>
 4001424:	61003fcc 	andi	r4,r12,255
 4001428:	01402004 	movi	r5,128
 400142c:	21400b26 	beq	r4,r5,400145c <__divdf3+0x18c>
 4001430:	db000815 	stw	r12,32(sp)
 4001434:	db400915 	stw	r13,36(sp)
 4001438:	003fb406 	br	400130c <__divdf3+0x3c>
 400143c:	d8000815 	stw	zero,32(sp)
 4001440:	d8000915 	stw	zero,36(sp)
 4001444:	d8000715 	stw	zero,28(sp)
 4001448:	d9000504 	addi	r4,sp,20
 400144c:	003fb006 	br	4001310 <__divdf3+0x40>
 4001450:	d8800515 	stw	r2,20(sp)
 4001454:	d9000504 	addi	r4,sp,20
 4001458:	003fad06 	br	4001310 <__divdf3+0x40>
 400145c:	6140400c 	andi	r5,r12,256
 4001460:	283ff31e 	bne	r5,zero,4001430 <__divdf3+0x160>
 4001464:	30c4b03a 	or	r2,r6,r3
 4001468:	103ff126 	beq	r2,zero,4001430 <__divdf3+0x160>
 400146c:	6109883a 	add	r4,r12,r4
 4001470:	2305803a 	cmpltu	r2,r4,r12
 4001474:	033fc004 	movi	r12,-256
 4001478:	2318703a 	and	r12,r4,r12
 400147c:	135b883a 	add	r13,r2,r13
 4001480:	003feb06 	br	4001430 <__divdf3+0x160>

04001484 <__gedf2>:
 4001484:	defff104 	addi	sp,sp,-60
 4001488:	d9000c15 	stw	r4,48(sp)
 400148c:	d9400d15 	stw	r5,52(sp)
 4001490:	d9000c04 	addi	r4,sp,48
 4001494:	d9400504 	addi	r5,sp,20
 4001498:	dfc00e15 	stw	ra,56(sp)
 400149c:	d9800a15 	stw	r6,40(sp)
 40014a0:	d9c00b15 	stw	r7,44(sp)
 40014a4:	40019c00 	call	40019c0 <__unpack_d>
 40014a8:	d9000a04 	addi	r4,sp,40
 40014ac:	d80b883a 	mov	r5,sp
 40014b0:	40019c00 	call	40019c0 <__unpack_d>
 40014b4:	d8c00517 	ldw	r3,20(sp)
 40014b8:	00800044 	movi	r2,1
 40014bc:	10c0082e 	bgeu	r2,r3,40014e0 <__gedf2+0x5c>
 40014c0:	d8c00017 	ldw	r3,0(sp)
 40014c4:	10c0062e 	bgeu	r2,r3,40014e0 <__gedf2+0x5c>
 40014c8:	d9000504 	addi	r4,sp,20
 40014cc:	d80b883a 	mov	r5,sp
 40014d0:	4001ac40 	call	4001ac4 <__fpcmp_parts_d>
 40014d4:	dfc00e17 	ldw	ra,56(sp)
 40014d8:	dec00f04 	addi	sp,sp,60
 40014dc:	f800283a 	ret
 40014e0:	00bfffc4 	movi	r2,-1
 40014e4:	003ffb06 	br	40014d4 <__gedf2+0x50>

040014e8 <__floatsidf>:
 40014e8:	2004d7fa 	srli	r2,r4,31
 40014ec:	defff904 	addi	sp,sp,-28
 40014f0:	00c000c4 	movi	r3,3
 40014f4:	dfc00615 	stw	ra,24(sp)
 40014f8:	dc000515 	stw	r16,20(sp)
 40014fc:	d8c00015 	stw	r3,0(sp)
 4001500:	d8800115 	stw	r2,4(sp)
 4001504:	2000081e 	bne	r4,zero,4001528 <__floatsidf+0x40>
 4001508:	00800084 	movi	r2,2
 400150c:	d8800015 	stw	r2,0(sp)
 4001510:	d809883a 	mov	r4,sp
 4001514:	400179c0 	call	400179c <__pack_d>
 4001518:	dfc00617 	ldw	ra,24(sp)
 400151c:	dc000517 	ldw	r16,20(sp)
 4001520:	dec00704 	addi	sp,sp,28
 4001524:	f800283a 	ret
 4001528:	00c00f04 	movi	r3,60
 400152c:	d8c00215 	stw	r3,8(sp)
 4001530:	10000f1e 	bne	r2,zero,4001570 <__floatsidf+0x88>
 4001534:	2021883a 	mov	r16,r4
 4001538:	8009883a 	mov	r4,r16
 400153c:	40016f00 	call	40016f0 <__clzsi2>
 4001540:	11000744 	addi	r4,r2,29
 4001544:	0100110e 	bge	zero,r4,400158c <__floatsidf+0xa4>
 4001548:	10ffff44 	addi	r3,r2,-3
 400154c:	18001216 	blt	r3,zero,4001598 <__floatsidf+0xb0>
 4001550:	80c6983a 	sll	r3,r16,r3
 4001554:	0009883a 	mov	r4,zero
 4001558:	014007c4 	movi	r5,31
 400155c:	2885c83a 	sub	r2,r5,r2
 4001560:	d9000315 	stw	r4,12(sp)
 4001564:	d8c00415 	stw	r3,16(sp)
 4001568:	d8800215 	stw	r2,8(sp)
 400156c:	003fe806 	br	4001510 <__floatsidf+0x28>
 4001570:	00a00034 	movhi	r2,32768
 4001574:	20800e26 	beq	r4,r2,40015b0 <__floatsidf+0xc8>
 4001578:	0121c83a 	sub	r16,zero,r4
 400157c:	8009883a 	mov	r4,r16
 4001580:	40016f00 	call	40016f0 <__clzsi2>
 4001584:	11000744 	addi	r4,r2,29
 4001588:	013fef16 	blt	zero,r4,4001548 <__floatsidf+0x60>
 400158c:	dc000315 	stw	r16,12(sp)
 4001590:	d8000415 	stw	zero,16(sp)
 4001594:	003fde06 	br	4001510 <__floatsidf+0x28>
 4001598:	800ad07a 	srli	r5,r16,1
 400159c:	00c007c4 	movi	r3,31
 40015a0:	1907c83a 	sub	r3,r3,r4
 40015a4:	28c6d83a 	srl	r3,r5,r3
 40015a8:	8108983a 	sll	r4,r16,r4
 40015ac:	003fea06 	br	4001558 <__floatsidf+0x70>
 40015b0:	0005883a 	mov	r2,zero
 40015b4:	00f07834 	movhi	r3,49632
 40015b8:	003fd706 	br	4001518 <__floatsidf+0x30>

040015bc <__fixdfsi>:
 40015bc:	defff804 	addi	sp,sp,-32
 40015c0:	d9000515 	stw	r4,20(sp)
 40015c4:	d9400615 	stw	r5,24(sp)
 40015c8:	d9000504 	addi	r4,sp,20
 40015cc:	d80b883a 	mov	r5,sp
 40015d0:	dfc00715 	stw	ra,28(sp)
 40015d4:	40019c00 	call	40019c0 <__unpack_d>
 40015d8:	d8800017 	ldw	r2,0(sp)
 40015dc:	00c00084 	movi	r3,2
 40015e0:	10c01c26 	beq	r2,r3,4001654 <__fixdfsi+0x98>
 40015e4:	00c00044 	movi	r3,1
 40015e8:	18801a2e 	bgeu	r3,r2,4001654 <__fixdfsi+0x98>
 40015ec:	00c00104 	movi	r3,4
 40015f0:	10c01126 	beq	r2,r3,4001638 <__fixdfsi+0x7c>
 40015f4:	d8800217 	ldw	r2,8(sp)
 40015f8:	10001616 	blt	r2,zero,4001654 <__fixdfsi+0x98>
 40015fc:	00c00784 	movi	r3,30
 4001600:	18800d16 	blt	r3,r2,4001638 <__fixdfsi+0x7c>
 4001604:	00c00f04 	movi	r3,60
 4001608:	1885c83a 	sub	r2,r3,r2
 400160c:	10fff804 	addi	r3,r2,-32
 4001610:	d9400317 	ldw	r5,12(sp)
 4001614:	d9000417 	ldw	r4,16(sp)
 4001618:	18001616 	blt	r3,zero,4001674 <__fixdfsi+0xb8>
 400161c:	20c4d83a 	srl	r2,r4,r3
 4001620:	d8c00117 	ldw	r3,4(sp)
 4001624:	18000126 	beq	r3,zero,400162c <__fixdfsi+0x70>
 4001628:	0085c83a 	sub	r2,zero,r2
 400162c:	dfc00717 	ldw	ra,28(sp)
 4001630:	dec00804 	addi	sp,sp,32
 4001634:	f800283a 	ret
 4001638:	d8800117 	ldw	r2,4(sp)
 400163c:	1000091e 	bne	r2,zero,4001664 <__fixdfsi+0xa8>
 4001640:	00a00034 	movhi	r2,32768
 4001644:	10bfffc4 	addi	r2,r2,-1
 4001648:	dfc00717 	ldw	ra,28(sp)
 400164c:	dec00804 	addi	sp,sp,32
 4001650:	f800283a 	ret
 4001654:	0005883a 	mov	r2,zero
 4001658:	dfc00717 	ldw	ra,28(sp)
 400165c:	dec00804 	addi	sp,sp,32
 4001660:	f800283a 	ret
 4001664:	00a00034 	movhi	r2,32768
 4001668:	dfc00717 	ldw	ra,28(sp)
 400166c:	dec00804 	addi	sp,sp,32
 4001670:	f800283a 	ret
 4001674:	2008907a 	slli	r4,r4,1
 4001678:	018007c4 	movi	r6,31
 400167c:	308dc83a 	sub	r6,r6,r2
 4001680:	2188983a 	sll	r4,r4,r6
 4001684:	2884d83a 	srl	r2,r5,r2
 4001688:	2084b03a 	or	r2,r4,r2
 400168c:	003fe406 	br	4001620 <__fixdfsi+0x64>

04001690 <__muldi3>:
 4001690:	20bfffcc 	andi	r2,r4,65535
 4001694:	2010d43a 	srli	r8,r4,16
 4001698:	30ffffcc 	andi	r3,r6,65535
 400169c:	3014d43a 	srli	r10,r6,16
 40016a0:	1893383a 	mul	r9,r3,r2
 40016a4:	1a07383a 	mul	r3,r3,r8
 40016a8:	5085383a 	mul	r2,r10,r2
 40016ac:	4816d43a 	srli	r11,r9,16
 40016b0:	5211383a 	mul	r8,r10,r8
 40016b4:	1885883a 	add	r2,r3,r2
 40016b8:	12c5883a 	add	r2,r2,r11
 40016bc:	10c0022e 	bgeu	r2,r3,40016c8 <__muldi3+0x38>
 40016c0:	00c00074 	movhi	r3,1
 40016c4:	40d1883a 	add	r8,r8,r3
 40016c8:	1014d43a 	srli	r10,r2,16
 40016cc:	21c9383a 	mul	r4,r4,r7
 40016d0:	314d383a 	mul	r6,r6,r5
 40016d4:	1004943a 	slli	r2,r2,16
 40016d8:	4291883a 	add	r8,r8,r10
 40016dc:	4a7fffcc 	andi	r9,r9,65535
 40016e0:	2187883a 	add	r3,r4,r6
 40016e4:	1245883a 	add	r2,r2,r9
 40016e8:	1a07883a 	add	r3,r3,r8
 40016ec:	f800283a 	ret

040016f0 <__clzsi2>:
 40016f0:	00bfffd4 	movui	r2,65535
 40016f4:	11000b36 	bltu	r2,r4,4001724 <__clzsi2+0x34>
 40016f8:	00803fc4 	movi	r2,255
 40016fc:	11001e2e 	bgeu	r2,r4,4001778 <__clzsi2+0x88>
 4001700:	00c00204 	movi	r3,8
 4001704:	20c8d83a 	srl	r4,r4,r3
 4001708:	00c10034 	movhi	r3,1024
 400170c:	18d21304 	addi	r3,r3,18508
 4001710:	00800604 	movi	r2,24
 4001714:	1909883a 	add	r4,r3,r4
 4001718:	20c00003 	ldbu	r3,0(r4)
 400171c:	10c5c83a 	sub	r2,r2,r3
 4001720:	f800283a 	ret
 4001724:	00804034 	movhi	r2,256
 4001728:	10bfffc4 	addi	r2,r2,-1
 400172c:	11000936 	bltu	r2,r4,4001754 <__clzsi2+0x64>
 4001730:	00800404 	movi	r2,16
 4001734:	1007883a 	mov	r3,r2
 4001738:	20c8d83a 	srl	r4,r4,r3
 400173c:	00c10034 	movhi	r3,1024
 4001740:	18d21304 	addi	r3,r3,18508
 4001744:	1909883a 	add	r4,r3,r4
 4001748:	20c00003 	ldbu	r3,0(r4)
 400174c:	10c5c83a 	sub	r2,r2,r3
 4001750:	f800283a 	ret
 4001754:	00c00604 	movi	r3,24
 4001758:	20c8d83a 	srl	r4,r4,r3
 400175c:	00c10034 	movhi	r3,1024
 4001760:	18d21304 	addi	r3,r3,18508
 4001764:	00800204 	movi	r2,8
 4001768:	1909883a 	add	r4,r3,r4
 400176c:	20c00003 	ldbu	r3,0(r4)
 4001770:	10c5c83a 	sub	r2,r2,r3
 4001774:	f800283a 	ret
 4001778:	0007883a 	mov	r3,zero
 400177c:	20c8d83a 	srl	r4,r4,r3
 4001780:	00c10034 	movhi	r3,1024
 4001784:	18d21304 	addi	r3,r3,18508
 4001788:	00800804 	movi	r2,32
 400178c:	1909883a 	add	r4,r3,r4
 4001790:	20c00003 	ldbu	r3,0(r4)
 4001794:	10c5c83a 	sub	r2,r2,r3
 4001798:	f800283a 	ret

0400179c <__pack_d>:
 400179c:	20800017 	ldw	r2,0(r4)
 40017a0:	defff804 	addi	sp,sp,-32
 40017a4:	dcc00315 	stw	r19,12(sp)
 40017a8:	dc800215 	stw	r18,8(sp)
 40017ac:	dfc00715 	stw	ra,28(sp)
 40017b0:	dd800615 	stw	r22,24(sp)
 40017b4:	dd400515 	stw	r21,20(sp)
 40017b8:	dd000415 	stw	r20,16(sp)
 40017bc:	dc400115 	stw	r17,4(sp)
 40017c0:	dc000015 	stw	r16,0(sp)
 40017c4:	04800044 	movi	r18,1
 40017c8:	24400317 	ldw	r17,12(r4)
 40017cc:	24000417 	ldw	r16,16(r4)
 40017d0:	24c00117 	ldw	r19,4(r4)
 40017d4:	9080422e 	bgeu	r18,r2,40018e0 <__pack_d+0x144>
 40017d8:	00c00104 	movi	r3,4
 40017dc:	10c03c26 	beq	r2,r3,40018d0 <__pack_d+0x134>
 40017e0:	00c00084 	movi	r3,2
 40017e4:	10c01926 	beq	r2,r3,400184c <__pack_d+0xb0>
 40017e8:	8c04b03a 	or	r2,r17,r16
 40017ec:	10001726 	beq	r2,zero,400184c <__pack_d+0xb0>
 40017f0:	21000217 	ldw	r4,8(r4)
 40017f4:	00bf0084 	movi	r2,-1022
 40017f8:	20804016 	blt	r4,r2,40018fc <__pack_d+0x160>
 40017fc:	0080ffc4 	movi	r2,1023
 4001800:	11003316 	blt	r2,r4,40018d0 <__pack_d+0x134>
 4001804:	88803fcc 	andi	r2,r17,255
 4001808:	00c02004 	movi	r3,128
 400180c:	10c02926 	beq	r2,r3,40018b4 <__pack_d+0x118>
 4001810:	88801fc4 	addi	r2,r17,127
 4001814:	1463803a 	cmpltu	r17,r2,r17
 4001818:	8c21883a 	add	r16,r17,r16
 400181c:	1023883a 	mov	r17,r2
 4001820:	00880034 	movhi	r2,8192
 4001824:	10bfffc4 	addi	r2,r2,-1
 4001828:	14001c36 	bltu	r2,r16,400189c <__pack_d+0x100>
 400182c:	2100ffc4 	addi	r4,r4,1023
 4001830:	8006963a 	slli	r3,r16,24
 4001834:	8804d23a 	srli	r2,r17,8
 4001838:	8020913a 	slli	r16,r16,4
 400183c:	2101ffcc 	andi	r4,r4,2047
 4001840:	1884b03a 	or	r2,r3,r2
 4001844:	8020d33a 	srli	r16,r16,12
 4001848:	00000306 	br	4001858 <__pack_d+0xbc>
 400184c:	0009883a 	mov	r4,zero
 4001850:	0005883a 	mov	r2,zero
 4001854:	0021883a 	mov	r16,zero
 4001858:	2008953a 	slli	r4,r4,20
 400185c:	982697fa 	slli	r19,r19,31
 4001860:	00c00434 	movhi	r3,16
 4001864:	18ffffc4 	addi	r3,r3,-1
 4001868:	80e0703a 	and	r16,r16,r3
 400186c:	8106b03a 	or	r3,r16,r4
 4001870:	1cc6b03a 	or	r3,r3,r19
 4001874:	dfc00717 	ldw	ra,28(sp)
 4001878:	dd800617 	ldw	r22,24(sp)
 400187c:	dd400517 	ldw	r21,20(sp)
 4001880:	dd000417 	ldw	r20,16(sp)
 4001884:	dcc00317 	ldw	r19,12(sp)
 4001888:	dc800217 	ldw	r18,8(sp)
 400188c:	dc400117 	ldw	r17,4(sp)
 4001890:	dc000017 	ldw	r16,0(sp)
 4001894:	dec00804 	addi	sp,sp,32
 4001898:	f800283a 	ret
 400189c:	800697fa 	slli	r3,r16,31
 40018a0:	8804d07a 	srli	r2,r17,1
 40018a4:	21010004 	addi	r4,r4,1024
 40018a8:	8020d07a 	srli	r16,r16,1
 40018ac:	18a2b03a 	or	r17,r3,r2
 40018b0:	003fdf06 	br	4001830 <__pack_d+0x94>
 40018b4:	88c0400c 	andi	r3,r17,256
 40018b8:	183fd926 	beq	r3,zero,4001820 <__pack_d+0x84>
 40018bc:	8885883a 	add	r2,r17,r2
 40018c0:	1463803a 	cmpltu	r17,r2,r17
 40018c4:	8c21883a 	add	r16,r17,r16
 40018c8:	1023883a 	mov	r17,r2
 40018cc:	003fd406 	br	4001820 <__pack_d+0x84>
 40018d0:	0101ffc4 	movi	r4,2047
 40018d4:	0005883a 	mov	r2,zero
 40018d8:	0021883a 	mov	r16,zero
 40018dc:	003fde06 	br	4001858 <__pack_d+0xbc>
 40018e0:	84000234 	orhi	r16,r16,8
 40018e4:	00c00434 	movhi	r3,16
 40018e8:	18ffffc4 	addi	r3,r3,-1
 40018ec:	8805883a 	mov	r2,r17
 40018f0:	80e0703a 	and	r16,r16,r3
 40018f4:	0101ffc4 	movi	r4,2047
 40018f8:	003fd706 	br	4001858 <__pack_d+0xbc>
 40018fc:	1129c83a 	sub	r20,r2,r4
 4001900:	00800e04 	movi	r2,56
 4001904:	15002716 	blt	r2,r20,40019a4 <__pack_d+0x208>
 4001908:	800b883a 	mov	r5,r16
 400190c:	a00d883a 	mov	r6,r20
 4001910:	8809883a 	mov	r4,r17
 4001914:	4001b940 	call	4001b94 <__lshrdi3>
 4001918:	9009883a 	mov	r4,r18
 400191c:	000b883a 	mov	r5,zero
 4001920:	a00d883a 	mov	r6,r20
 4001924:	102d883a 	mov	r22,r2
 4001928:	182b883a 	mov	r21,r3
 400192c:	4001bd80 	call	4001bd8 <__ashldi3>
 4001930:	1009003a 	cmpeq	r4,r2,zero
 4001934:	1907c83a 	sub	r3,r3,r4
 4001938:	10bfffc4 	addi	r2,r2,-1
 400193c:	1c20703a 	and	r16,r3,r16
 4001940:	1444703a 	and	r2,r2,r17
 4001944:	1404b03a 	or	r2,r2,r16
 4001948:	1004c03a 	cmpne	r2,r2,zero
 400194c:	1584b03a 	or	r2,r2,r22
 4001950:	11003fcc 	andi	r4,r2,255
 4001954:	01402004 	movi	r5,128
 4001958:	a807883a 	mov	r3,r21
 400195c:	2140131e 	bne	r4,r5,40019ac <__pack_d+0x210>
 4001960:	1140400c 	andi	r5,r2,256
 4001964:	28000426 	beq	r5,zero,4001978 <__pack_d+0x1dc>
 4001968:	1109883a 	add	r4,r2,r4
 400196c:	2085803a 	cmpltu	r2,r4,r2
 4001970:	1547883a 	add	r3,r2,r21
 4001974:	2005883a 	mov	r2,r4
 4001978:	1808963a 	slli	r4,r3,24
 400197c:	1004d23a 	srli	r2,r2,8
 4001980:	1820913a 	slli	r16,r3,4
 4001984:	01440034 	movhi	r5,4096
 4001988:	297fffc4 	addi	r5,r5,-1
 400198c:	2084b03a 	or	r2,r4,r2
 4001990:	8020d33a 	srli	r16,r16,12
 4001994:	01000044 	movi	r4,1
 4001998:	28ffaf36 	bltu	r5,r3,4001858 <__pack_d+0xbc>
 400199c:	0009883a 	mov	r4,zero
 40019a0:	003fad06 	br	4001858 <__pack_d+0xbc>
 40019a4:	0005883a 	mov	r2,zero
 40019a8:	0007883a 	mov	r3,zero
 40019ac:	11001fc4 	addi	r4,r2,127
 40019b0:	2085803a 	cmpltu	r2,r4,r2
 40019b4:	10c7883a 	add	r3,r2,r3
 40019b8:	2005883a 	mov	r2,r4
 40019bc:	003fee06 	br	4001978 <__pack_d+0x1dc>

040019c0 <__unpack_d>:
 40019c0:	21800117 	ldw	r6,4(r4)
 40019c4:	20c00017 	ldw	r3,0(r4)
 40019c8:	3004d7fa 	srli	r2,r6,31
 40019cc:	3008d53a 	srli	r4,r6,20
 40019d0:	28800115 	stw	r2,4(r5)
 40019d4:	2101ffcc 	andi	r4,r4,2047
 40019d8:	00800434 	movhi	r2,16
 40019dc:	10bfffc4 	addi	r2,r2,-1
 40019e0:	3084703a 	and	r2,r6,r2
 40019e4:	20001a1e 	bne	r4,zero,4001a50 <__unpack_d+0x90>
 40019e8:	1888b03a 	or	r4,r3,r2
 40019ec:	20002626 	beq	r4,zero,4001a88 <__unpack_d+0xc8>
 40019f0:	1808d63a 	srli	r4,r3,24
 40019f4:	1004923a 	slli	r2,r2,8
 40019f8:	01bf0084 	movi	r6,-1022
 40019fc:	29800215 	stw	r6,8(r5)
 4001a00:	2084b03a 	or	r2,r4,r2
 4001a04:	010000c4 	movi	r4,3
 4001a08:	29000015 	stw	r4,0(r5)
 4001a0c:	02040034 	movhi	r8,4096
 4001a10:	423fffc4 	addi	r8,r8,-1
 4001a14:	1806923a 	slli	r3,r3,8
 4001a18:	40801836 	bltu	r8,r2,4001a7c <__unpack_d+0xbc>
 4001a1c:	013f0044 	movi	r4,-1023
 4001a20:	18cd883a 	add	r6,r3,r3
 4001a24:	30c7803a 	cmpltu	r3,r6,r3
 4001a28:	1085883a 	add	r2,r2,r2
 4001a2c:	1885883a 	add	r2,r3,r2
 4001a30:	200f883a 	mov	r7,r4
 4001a34:	3007883a 	mov	r3,r6
 4001a38:	213fffc4 	addi	r4,r4,-1
 4001a3c:	40bff82e 	bgeu	r8,r2,4001a20 <__unpack_d+0x60>
 4001a40:	29c00215 	stw	r7,8(r5)
 4001a44:	28c00315 	stw	r3,12(r5)
 4001a48:	28800415 	stw	r2,16(r5)
 4001a4c:	f800283a 	ret
 4001a50:	01c1ffc4 	movi	r7,2047
 4001a54:	21c00f26 	beq	r4,r7,4001a94 <__unpack_d+0xd4>
 4001a58:	180cd63a 	srli	r6,r3,24
 4001a5c:	1004923a 	slli	r2,r2,8
 4001a60:	213f0044 	addi	r4,r4,-1023
 4001a64:	1806923a 	slli	r3,r3,8
 4001a68:	3084b03a 	or	r2,r6,r2
 4001a6c:	29000215 	stw	r4,8(r5)
 4001a70:	010000c4 	movi	r4,3
 4001a74:	10840034 	orhi	r2,r2,4096
 4001a78:	29000015 	stw	r4,0(r5)
 4001a7c:	28c00315 	stw	r3,12(r5)
 4001a80:	28800415 	stw	r2,16(r5)
 4001a84:	f800283a 	ret
 4001a88:	00800084 	movi	r2,2
 4001a8c:	28800015 	stw	r2,0(r5)
 4001a90:	f800283a 	ret
 4001a94:	1888b03a 	or	r4,r3,r2
 4001a98:	20000526 	beq	r4,zero,4001ab0 <__unpack_d+0xf0>
 4001a9c:	3180022c 	andhi	r6,r6,8
 4001aa0:	30000626 	beq	r6,zero,4001abc <__unpack_d+0xfc>
 4001aa4:	01000044 	movi	r4,1
 4001aa8:	29000015 	stw	r4,0(r5)
 4001aac:	003ff306 	br	4001a7c <__unpack_d+0xbc>
 4001ab0:	00800104 	movi	r2,4
 4001ab4:	28800015 	stw	r2,0(r5)
 4001ab8:	f800283a 	ret
 4001abc:	28000015 	stw	zero,0(r5)
 4001ac0:	003fee06 	br	4001a7c <__unpack_d+0xbc>

04001ac4 <__fpcmp_parts_d>:
 4001ac4:	20c00017 	ldw	r3,0(r4)
 4001ac8:	00800044 	movi	r2,1
 4001acc:	10c0142e 	bgeu	r2,r3,4001b20 <__fpcmp_parts_d+0x5c>
 4001ad0:	29800017 	ldw	r6,0(r5)
 4001ad4:	1180122e 	bgeu	r2,r6,4001b20 <__fpcmp_parts_d+0x5c>
 4001ad8:	01c00104 	movi	r7,4
 4001adc:	19c02826 	beq	r3,r7,4001b80 <__fpcmp_parts_d+0xbc>
 4001ae0:	31c00926 	beq	r6,r7,4001b08 <__fpcmp_parts_d+0x44>
 4001ae4:	01c00084 	movi	r7,2
 4001ae8:	19c00626 	beq	r3,r7,4001b04 <__fpcmp_parts_d+0x40>
 4001aec:	31c00a26 	beq	r6,r7,4001b18 <__fpcmp_parts_d+0x54>
 4001af0:	20c00117 	ldw	r3,4(r4)
 4001af4:	29800117 	ldw	r6,4(r5)
 4001af8:	19800b26 	beq	r3,r6,4001b28 <__fpcmp_parts_d+0x64>
 4001afc:	1800041e 	bne	r3,zero,4001b10 <__fpcmp_parts_d+0x4c>
 4001b00:	f800283a 	ret
 4001b04:	30c01a26 	beq	r6,r3,4001b70 <__fpcmp_parts_d+0xac>
 4001b08:	28800117 	ldw	r2,4(r5)
 4001b0c:	1000041e 	bne	r2,zero,4001b20 <__fpcmp_parts_d+0x5c>
 4001b10:	00bfffc4 	movi	r2,-1
 4001b14:	f800283a 	ret
 4001b18:	20800117 	ldw	r2,4(r4)
 4001b1c:	103ffc1e 	bne	r2,zero,4001b10 <__fpcmp_parts_d+0x4c>
 4001b20:	00800044 	movi	r2,1
 4001b24:	f800283a 	ret
 4001b28:	21c00217 	ldw	r7,8(r4)
 4001b2c:	29800217 	ldw	r6,8(r5)
 4001b30:	31c0020e 	bge	r6,r7,4001b3c <__fpcmp_parts_d+0x78>
 4001b34:	183ff61e 	bne	r3,zero,4001b10 <__fpcmp_parts_d+0x4c>
 4001b38:	f800283a 	ret
 4001b3c:	39800a16 	blt	r7,r6,4001b68 <__fpcmp_parts_d+0xa4>
 4001b40:	20800417 	ldw	r2,16(r4)
 4001b44:	29800417 	ldw	r6,16(r5)
 4001b48:	21c00317 	ldw	r7,12(r4)
 4001b4c:	29000317 	ldw	r4,12(r5)
 4001b50:	30800936 	bltu	r6,r2,4001b78 <__fpcmp_parts_d+0xb4>
 4001b54:	1180011e 	bne	r2,r6,4001b5c <__fpcmp_parts_d+0x98>
 4001b58:	21c00736 	bltu	r4,r7,4001b78 <__fpcmp_parts_d+0xb4>
 4001b5c:	11800236 	bltu	r2,r6,4001b68 <__fpcmp_parts_d+0xa4>
 4001b60:	3080031e 	bne	r6,r2,4001b70 <__fpcmp_parts_d+0xac>
 4001b64:	3900022e 	bgeu	r7,r4,4001b70 <__fpcmp_parts_d+0xac>
 4001b68:	183fe926 	beq	r3,zero,4001b10 <__fpcmp_parts_d+0x4c>
 4001b6c:	003fec06 	br	4001b20 <__fpcmp_parts_d+0x5c>
 4001b70:	0005883a 	mov	r2,zero
 4001b74:	f800283a 	ret
 4001b78:	183fe926 	beq	r3,zero,4001b20 <__fpcmp_parts_d+0x5c>
 4001b7c:	003fe406 	br	4001b10 <__fpcmp_parts_d+0x4c>
 4001b80:	30ffe51e 	bne	r6,r3,4001b18 <__fpcmp_parts_d+0x54>
 4001b84:	28c00117 	ldw	r3,4(r5)
 4001b88:	20800117 	ldw	r2,4(r4)
 4001b8c:	1885c83a 	sub	r2,r3,r2
 4001b90:	f800283a 	ret

04001b94 <__lshrdi3>:
 4001b94:	2005883a 	mov	r2,r4
 4001b98:	2807883a 	mov	r3,r5
 4001b9c:	30000826 	beq	r6,zero,4001bc0 <__lshrdi3+0x2c>
 4001ba0:	01000804 	movi	r4,32
 4001ba4:	2189c83a 	sub	r4,r4,r6
 4001ba8:	0100060e 	bge	zero,r4,4001bc4 <__lshrdi3+0x30>
 4001bac:	1184d83a 	srl	r2,r2,r6
 4001bb0:	2908983a 	sll	r4,r5,r4
 4001bb4:	298cd83a 	srl	r6,r5,r6
 4001bb8:	2084b03a 	or	r2,r4,r2
 4001bbc:	3007883a 	mov	r3,r6
 4001bc0:	f800283a 	ret
 4001bc4:	0105c83a 	sub	r2,zero,r4
 4001bc8:	000d883a 	mov	r6,zero
 4001bcc:	2884d83a 	srl	r2,r5,r2
 4001bd0:	3007883a 	mov	r3,r6
 4001bd4:	003ffa06 	br	4001bc0 <__lshrdi3+0x2c>

04001bd8 <__ashldi3>:
 4001bd8:	2005883a 	mov	r2,r4
 4001bdc:	2807883a 	mov	r3,r5
 4001be0:	30000826 	beq	r6,zero,4001c04 <__ashldi3+0x2c>
 4001be4:	01000804 	movi	r4,32
 4001be8:	2189c83a 	sub	r4,r4,r6
 4001bec:	0100060e 	bge	zero,r4,4001c08 <__ashldi3+0x30>
 4001bf0:	1108d83a 	srl	r4,r2,r4
 4001bf4:	2986983a 	sll	r3,r5,r6
 4001bf8:	118c983a 	sll	r6,r2,r6
 4001bfc:	20c6b03a 	or	r3,r4,r3
 4001c00:	3005883a 	mov	r2,r6
 4001c04:	f800283a 	ret
 4001c08:	0107c83a 	sub	r3,zero,r4
 4001c0c:	000d883a 	mov	r6,zero
 4001c10:	10c6983a 	sll	r3,r2,r3
 4001c14:	3005883a 	mov	r2,r6
 4001c18:	003ffa06 	br	4001c04 <__ashldi3+0x2c>

04001c1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4001c1c:	defffc04 	addi	sp,sp,-16
 4001c20:	df000315 	stw	fp,12(sp)
 4001c24:	df000304 	addi	fp,sp,12
 4001c28:	e13ffd15 	stw	r4,-12(fp)
 4001c2c:	e17ffe15 	stw	r5,-8(fp)
 4001c30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4001c34:	e0fffe17 	ldw	r3,-8(fp)
 4001c38:	e0bffd17 	ldw	r2,-12(fp)
 4001c3c:	18800e26 	beq	r3,r2,4001c78 <alt_load_section+0x5c>
  {
    while( to != end )
 4001c40:	00000a06 	br	4001c6c <alt_load_section+0x50>
    {
      *to++ = *from++;
 4001c44:	e0bffd17 	ldw	r2,-12(fp)
 4001c48:	10c00017 	ldw	r3,0(r2)
 4001c4c:	e0bffe17 	ldw	r2,-8(fp)
 4001c50:	10c00015 	stw	r3,0(r2)
 4001c54:	e0bffe17 	ldw	r2,-8(fp)
 4001c58:	10800104 	addi	r2,r2,4
 4001c5c:	e0bffe15 	stw	r2,-8(fp)
 4001c60:	e0bffd17 	ldw	r2,-12(fp)
 4001c64:	10800104 	addi	r2,r2,4
 4001c68:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4001c6c:	e0fffe17 	ldw	r3,-8(fp)
 4001c70:	e0bfff17 	ldw	r2,-4(fp)
 4001c74:	18bff31e 	bne	r3,r2,4001c44 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4001c78:	e037883a 	mov	sp,fp
 4001c7c:	df000017 	ldw	fp,0(sp)
 4001c80:	dec00104 	addi	sp,sp,4
 4001c84:	f800283a 	ret

04001c88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4001c88:	defffe04 	addi	sp,sp,-8
 4001c8c:	dfc00115 	stw	ra,4(sp)
 4001c90:	df000015 	stw	fp,0(sp)
 4001c94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4001c98:	01010034 	movhi	r4,1024
 4001c9c:	21182304 	addi	r4,r4,24716
 4001ca0:	01410034 	movhi	r5,1024
 4001ca4:	29526204 	addi	r5,r5,18824
 4001ca8:	01810034 	movhi	r6,1024
 4001cac:	31982304 	addi	r6,r6,24716
 4001cb0:	4001c1c0 	call	4001c1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4001cb4:	01010034 	movhi	r4,1024
 4001cb8:	21000804 	addi	r4,r4,32
 4001cbc:	01410034 	movhi	r5,1024
 4001cc0:	29400804 	addi	r5,r5,32
 4001cc4:	01810034 	movhi	r6,1024
 4001cc8:	31806e04 	addi	r6,r6,440
 4001ccc:	4001c1c0 	call	4001c1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4001cd0:	01010034 	movhi	r4,1024
 4001cd4:	21120e04 	addi	r4,r4,18488
 4001cd8:	01410034 	movhi	r5,1024
 4001cdc:	29520e04 	addi	r5,r5,18488
 4001ce0:	01810034 	movhi	r6,1024
 4001ce4:	31926204 	addi	r6,r6,18824
 4001ce8:	4001c1c0 	call	4001c1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4001cec:	40035280 	call	4003528 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4001cf0:	40037400 	call	4003740 <alt_icache_flush_all>
}
 4001cf4:	e037883a 	mov	sp,fp
 4001cf8:	dfc00117 	ldw	ra,4(sp)
 4001cfc:	df000017 	ldw	fp,0(sp)
 4001d00:	dec00204 	addi	sp,sp,8
 4001d04:	f800283a 	ret

04001d08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4001d08:	defffd04 	addi	sp,sp,-12
 4001d0c:	dfc00215 	stw	ra,8(sp)
 4001d10:	df000115 	stw	fp,4(sp)
 4001d14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4001d18:	0009883a 	mov	r4,zero
 4001d1c:	4001db80 	call	4001db8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4001d20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4001d24:	4001dec0 	call	4001dec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4001d28:	01010034 	movhi	r4,1024
 4001d2c:	21125304 	addi	r4,r4,18764
 4001d30:	01410034 	movhi	r5,1024
 4001d34:	29525304 	addi	r5,r5,18764
 4001d38:	01810034 	movhi	r6,1024
 4001d3c:	31925304 	addi	r6,r6,18764
 4001d40:	4003af80 	call	4003af8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4001d44:	40036880 	call	4003688 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4001d48:	01010034 	movhi	r4,1024
 4001d4c:	210db904 	addi	r4,r4,14052
 4001d50:	40042e00 	call	40042e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4001d54:	d125f217 	ldw	r4,-26680(gp)
 4001d58:	d0e5f317 	ldw	r3,-26676(gp)
 4001d5c:	d0a5f417 	ldw	r2,-26672(gp)
 4001d60:	180b883a 	mov	r5,r3
 4001d64:	100d883a 	mov	r6,r2
 4001d68:	40002640 	call	4000264 <main>
 4001d6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4001d70:	01000044 	movi	r4,1
 4001d74:	40034600 	call	4003460 <close>
  exit (result);
 4001d78:	e13fff17 	ldw	r4,-4(fp)
 4001d7c:	40042f40 	call	40042f4 <exit>

04001d80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4001d80:	defffd04 	addi	sp,sp,-12
 4001d84:	dfc00215 	stw	ra,8(sp)
 4001d88:	df000115 	stw	fp,4(sp)
 4001d8c:	df000104 	addi	fp,sp,4
 4001d90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4001d94:	e13fff17 	ldw	r4,-4(fp)
 4001d98:	01410034 	movhi	r5,1024
 4001d9c:	29581a04 	addi	r5,r5,24680
 4001da0:	40035e80 	call	40035e8 <alt_dev_llist_insert>
}
 4001da4:	e037883a 	mov	sp,fp
 4001da8:	dfc00117 	ldw	ra,4(sp)
 4001dac:	df000017 	ldw	fp,0(sp)
 4001db0:	dec00204 	addi	sp,sp,8
 4001db4:	f800283a 	ret

04001db8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4001db8:	defffd04 	addi	sp,sp,-12
 4001dbc:	dfc00215 	stw	ra,8(sp)
 4001dc0:	df000115 	stw	fp,4(sp)
 4001dc4:	df000104 	addi	fp,sp,4
 4001dc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4001dcc:	4003fdc0 	call	4003fdc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4001dd0:	00800044 	movi	r2,1
 4001dd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4001dd8:	e037883a 	mov	sp,fp
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	df000017 	ldw	fp,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
 4001de8:	f800283a 	ret

04001dec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4001dec:	defffe04 	addi	sp,sp,-8
 4001df0:	dfc00115 	stw	ra,4(sp)
 4001df4:	df000015 	stw	fp,0(sp)
 4001df8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_10MS, timer_10ms);
 4001dfc:	01020034 	movhi	r4,2048
 4001e00:	21041004 	addi	r4,r4,4160
 4001e04:	000b883a 	mov	r5,zero
 4001e08:	000d883a 	mov	r6,zero
 4001e0c:	01c01904 	movi	r7,100
 4001e10:	40029440 	call	4002944 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4001e14:	01010034 	movhi	r4,1024
 4001e18:	21126c04 	addi	r4,r4,18864
 4001e1c:	000b883a 	mov	r5,zero
 4001e20:	01800044 	movi	r6,1
 4001e24:	4001fd00 	call	4001fd0 <altera_avalon_jtag_uart_init>
 4001e28:	01010034 	movhi	r4,1024
 4001e2c:	21126204 	addi	r4,r4,18824
 4001e30:	4001d800 	call	4001d80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
 4001e34:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 4001e38:	01010034 	movhi	r4,1024
 4001e3c:	21168404 	addi	r4,r4,23056
 4001e40:	000b883a 	mov	r5,zero
 4001e44:	01800084 	movi	r6,2
 4001e48:	4002adc0 	call	4002adc <altera_avalon_uart_init>
 4001e4c:	01010034 	movhi	r4,1024
 4001e50:	21167a04 	addi	r4,r4,23016
 4001e54:	4001d800 	call	4001d80 <alt_dev_reg>
}
 4001e58:	e037883a 	mov	sp,fp
 4001e5c:	dfc00117 	ldw	ra,4(sp)
 4001e60:	df000017 	ldw	fp,0(sp)
 4001e64:	dec00204 	addi	sp,sp,8
 4001e68:	f800283a 	ret

04001e6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4001e6c:	defffa04 	addi	sp,sp,-24
 4001e70:	dfc00515 	stw	ra,20(sp)
 4001e74:	df000415 	stw	fp,16(sp)
 4001e78:	df000404 	addi	fp,sp,16
 4001e7c:	e13ffd15 	stw	r4,-12(fp)
 4001e80:	e17ffe15 	stw	r5,-8(fp)
 4001e84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001e88:	e0bffd17 	ldw	r2,-12(fp)
 4001e8c:	10800017 	ldw	r2,0(r2)
 4001e90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4001e94:	e0bffc17 	ldw	r2,-16(fp)
 4001e98:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4001e9c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4001ea0:	10800217 	ldw	r2,8(r2)
 4001ea4:	1809883a 	mov	r4,r3
 4001ea8:	e17ffe17 	ldw	r5,-8(fp)
 4001eac:	e1bfff17 	ldw	r6,-4(fp)
 4001eb0:	100f883a 	mov	r7,r2
 4001eb4:	40024940 	call	4002494 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4001eb8:	e037883a 	mov	sp,fp
 4001ebc:	dfc00117 	ldw	ra,4(sp)
 4001ec0:	df000017 	ldw	fp,0(sp)
 4001ec4:	dec00204 	addi	sp,sp,8
 4001ec8:	f800283a 	ret

04001ecc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4001ecc:	defffa04 	addi	sp,sp,-24
 4001ed0:	dfc00515 	stw	ra,20(sp)
 4001ed4:	df000415 	stw	fp,16(sp)
 4001ed8:	df000404 	addi	fp,sp,16
 4001edc:	e13ffd15 	stw	r4,-12(fp)
 4001ee0:	e17ffe15 	stw	r5,-8(fp)
 4001ee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001ee8:	e0bffd17 	ldw	r2,-12(fp)
 4001eec:	10800017 	ldw	r2,0(r2)
 4001ef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4001ef4:	e0bffc17 	ldw	r2,-16(fp)
 4001ef8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4001efc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4001f00:	10800217 	ldw	r2,8(r2)
 4001f04:	1809883a 	mov	r4,r3
 4001f08:	e17ffe17 	ldw	r5,-8(fp)
 4001f0c:	e1bfff17 	ldw	r6,-4(fp)
 4001f10:	100f883a 	mov	r7,r2
 4001f14:	40026ac0 	call	40026ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4001f18:	e037883a 	mov	sp,fp
 4001f1c:	dfc00117 	ldw	ra,4(sp)
 4001f20:	df000017 	ldw	fp,0(sp)
 4001f24:	dec00204 	addi	sp,sp,8
 4001f28:	f800283a 	ret

04001f2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4001f2c:	defffc04 	addi	sp,sp,-16
 4001f30:	dfc00315 	stw	ra,12(sp)
 4001f34:	df000215 	stw	fp,8(sp)
 4001f38:	df000204 	addi	fp,sp,8
 4001f3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001f40:	e0bfff17 	ldw	r2,-4(fp)
 4001f44:	10800017 	ldw	r2,0(r2)
 4001f48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4001f4c:	e0bffe17 	ldw	r2,-8(fp)
 4001f50:	10c00a04 	addi	r3,r2,40
 4001f54:	e0bfff17 	ldw	r2,-4(fp)
 4001f58:	10800217 	ldw	r2,8(r2)
 4001f5c:	1809883a 	mov	r4,r3
 4001f60:	100b883a 	mov	r5,r2
 4001f64:	40023380 	call	4002338 <altera_avalon_jtag_uart_close>
}
 4001f68:	e037883a 	mov	sp,fp
 4001f6c:	dfc00117 	ldw	ra,4(sp)
 4001f70:	df000017 	ldw	fp,0(sp)
 4001f74:	dec00204 	addi	sp,sp,8
 4001f78:	f800283a 	ret

04001f7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4001f7c:	defffa04 	addi	sp,sp,-24
 4001f80:	dfc00515 	stw	ra,20(sp)
 4001f84:	df000415 	stw	fp,16(sp)
 4001f88:	df000404 	addi	fp,sp,16
 4001f8c:	e13ffd15 	stw	r4,-12(fp)
 4001f90:	e17ffe15 	stw	r5,-8(fp)
 4001f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4001f98:	e0bffd17 	ldw	r2,-12(fp)
 4001f9c:	10800017 	ldw	r2,0(r2)
 4001fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4001fa4:	e0bffc17 	ldw	r2,-16(fp)
 4001fa8:	10800a04 	addi	r2,r2,40
 4001fac:	1009883a 	mov	r4,r2
 4001fb0:	e17ffe17 	ldw	r5,-8(fp)
 4001fb4:	e1bfff17 	ldw	r6,-4(fp)
 4001fb8:	40023a00 	call	40023a0 <altera_avalon_jtag_uart_ioctl>
}
 4001fbc:	e037883a 	mov	sp,fp
 4001fc0:	dfc00117 	ldw	ra,4(sp)
 4001fc4:	df000017 	ldw	fp,0(sp)
 4001fc8:	dec00204 	addi	sp,sp,8
 4001fcc:	f800283a 	ret

04001fd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4001fd0:	defffa04 	addi	sp,sp,-24
 4001fd4:	dfc00515 	stw	ra,20(sp)
 4001fd8:	df000415 	stw	fp,16(sp)
 4001fdc:	df000404 	addi	fp,sp,16
 4001fe0:	e13ffd15 	stw	r4,-12(fp)
 4001fe4:	e17ffe15 	stw	r5,-8(fp)
 4001fe8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4001fec:	e0bffd17 	ldw	r2,-12(fp)
 4001ff0:	00c00044 	movi	r3,1
 4001ff4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4001ff8:	e0bffd17 	ldw	r2,-12(fp)
 4001ffc:	10800017 	ldw	r2,0(r2)
 4002000:	10800104 	addi	r2,r2,4
 4002004:	e0fffd17 	ldw	r3,-12(fp)
 4002008:	18c00817 	ldw	r3,32(r3)
 400200c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4002010:	e0fffe17 	ldw	r3,-8(fp)
 4002014:	e0bfff17 	ldw	r2,-4(fp)
 4002018:	d8000015 	stw	zero,0(sp)
 400201c:	1809883a 	mov	r4,r3
 4002020:	100b883a 	mov	r5,r2
 4002024:	01810034 	movhi	r6,1024
 4002028:	31882404 	addi	r6,r6,8336
 400202c:	e1fffd17 	ldw	r7,-12(fp)
 4002030:	40037700 	call	4003770 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4002034:	e0bffd17 	ldw	r2,-12(fp)
 4002038:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400203c:	e0bffd17 	ldw	r2,-12(fp)
 4002040:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002044:	00810034 	movhi	r2,1024
 4002048:	109e0b04 	addi	r2,r2,30764
 400204c:	10800017 	ldw	r2,0(r2)
 4002050:	1809883a 	mov	r4,r3
 4002054:	100b883a 	mov	r5,r2
 4002058:	01810034 	movhi	r6,1024
 400205c:	3188a504 	addi	r6,r6,8852
 4002060:	e1fffd17 	ldw	r7,-12(fp)
 4002064:	40032d00 	call	40032d0 <alt_alarm_start>
 4002068:	1000040e 	bge	r2,zero,400207c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400206c:	e0bffd17 	ldw	r2,-12(fp)
 4002070:	00e00034 	movhi	r3,32768
 4002074:	18ffffc4 	addi	r3,r3,-1
 4002078:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400207c:	e037883a 	mov	sp,fp
 4002080:	dfc00117 	ldw	ra,4(sp)
 4002084:	df000017 	ldw	fp,0(sp)
 4002088:	dec00204 	addi	sp,sp,8
 400208c:	f800283a 	ret

04002090 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4002090:	defff804 	addi	sp,sp,-32
 4002094:	df000715 	stw	fp,28(sp)
 4002098:	df000704 	addi	fp,sp,28
 400209c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40020a0:	e0bfff17 	ldw	r2,-4(fp)
 40020a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 40020a8:	e0bffb17 	ldw	r2,-20(fp)
 40020ac:	10800017 	ldw	r2,0(r2)
 40020b0:	e0bffc15 	stw	r2,-16(fp)
 40020b4:	00000106 	br	40020bc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 40020b8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40020bc:	e0bffc17 	ldw	r2,-16(fp)
 40020c0:	10800104 	addi	r2,r2,4
 40020c4:	10800037 	ldwio	r2,0(r2)
 40020c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40020cc:	e0bffd17 	ldw	r2,-12(fp)
 40020d0:	1080c00c 	andi	r2,r2,768
 40020d4:	10006a26 	beq	r2,zero,4002280 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40020d8:	e0bffd17 	ldw	r2,-12(fp)
 40020dc:	1080400c 	andi	r2,r2,256
 40020e0:	10003326 	beq	r2,zero,40021b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40020e4:	00800074 	movhi	r2,1
 40020e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40020ec:	e0bffb17 	ldw	r2,-20(fp)
 40020f0:	10800a17 	ldw	r2,40(r2)
 40020f4:	10800044 	addi	r2,r2,1
 40020f8:	1081ffcc 	andi	r2,r2,2047
 40020fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4002100:	e0bffb17 	ldw	r2,-20(fp)
 4002104:	10c00b17 	ldw	r3,44(r2)
 4002108:	e0bffe17 	ldw	r2,-8(fp)
 400210c:	18801426 	beq	r3,r2,4002160 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4002110:	e0bffc17 	ldw	r2,-16(fp)
 4002114:	10800037 	ldwio	r2,0(r2)
 4002118:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400211c:	e0bff917 	ldw	r2,-28(fp)
 4002120:	10a0000c 	andi	r2,r2,32768
 4002124:	10001026 	beq	r2,zero,4002168 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4002128:	e0bffb17 	ldw	r2,-20(fp)
 400212c:	10800a17 	ldw	r2,40(r2)
 4002130:	e0fff917 	ldw	r3,-28(fp)
 4002134:	e13ffb17 	ldw	r4,-20(fp)
 4002138:	2085883a 	add	r2,r4,r2
 400213c:	10800e04 	addi	r2,r2,56
 4002140:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4002144:	e0bffb17 	ldw	r2,-20(fp)
 4002148:	10800a17 	ldw	r2,40(r2)
 400214c:	10800044 	addi	r2,r2,1
 4002150:	10c1ffcc 	andi	r3,r2,2047
 4002154:	e0bffb17 	ldw	r2,-20(fp)
 4002158:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400215c:	003fe306 	br	40020ec <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4002160:	0001883a 	nop
 4002164:	00000106 	br	400216c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4002168:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400216c:	e0bff917 	ldw	r2,-28(fp)
 4002170:	10bfffec 	andhi	r2,r2,65535
 4002174:	10000e26 	beq	r2,zero,40021b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4002178:	e0bffb17 	ldw	r2,-20(fp)
 400217c:	10c00817 	ldw	r3,32(r2)
 4002180:	00bfff84 	movi	r2,-2
 4002184:	1886703a 	and	r3,r3,r2
 4002188:	e0bffb17 	ldw	r2,-20(fp)
 400218c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4002190:	e0bffc17 	ldw	r2,-16(fp)
 4002194:	10800104 	addi	r2,r2,4
 4002198:	e0fffb17 	ldw	r3,-20(fp)
 400219c:	18c00817 	ldw	r3,32(r3)
 40021a0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40021a4:	e0bffc17 	ldw	r2,-16(fp)
 40021a8:	10800104 	addi	r2,r2,4
 40021ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40021b0:	e0bffd17 	ldw	r2,-12(fp)
 40021b4:	1080800c 	andi	r2,r2,512
 40021b8:	103fbf26 	beq	r2,zero,40020b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40021bc:	e0bffd17 	ldw	r2,-12(fp)
 40021c0:	1004d43a 	srli	r2,r2,16
 40021c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40021c8:	00001406 	br	400221c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40021cc:	e0bffc17 	ldw	r2,-16(fp)
 40021d0:	e0fffb17 	ldw	r3,-20(fp)
 40021d4:	18c00d17 	ldw	r3,52(r3)
 40021d8:	e13ffb17 	ldw	r4,-20(fp)
 40021dc:	20c7883a 	add	r3,r4,r3
 40021e0:	18c20e04 	addi	r3,r3,2104
 40021e4:	18c00003 	ldbu	r3,0(r3)
 40021e8:	18c03fcc 	andi	r3,r3,255
 40021ec:	18c0201c 	xori	r3,r3,128
 40021f0:	18ffe004 	addi	r3,r3,-128
 40021f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40021f8:	e0bffb17 	ldw	r2,-20(fp)
 40021fc:	10800d17 	ldw	r2,52(r2)
 4002200:	10800044 	addi	r2,r2,1
 4002204:	10c1ffcc 	andi	r3,r2,2047
 4002208:	e0bffb17 	ldw	r2,-20(fp)
 400220c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4002210:	e0bffa17 	ldw	r2,-24(fp)
 4002214:	10bfffc4 	addi	r2,r2,-1
 4002218:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400221c:	e0bffa17 	ldw	r2,-24(fp)
 4002220:	10000526 	beq	r2,zero,4002238 <altera_avalon_jtag_uart_irq+0x1a8>
 4002224:	e0bffb17 	ldw	r2,-20(fp)
 4002228:	10c00d17 	ldw	r3,52(r2)
 400222c:	e0bffb17 	ldw	r2,-20(fp)
 4002230:	10800c17 	ldw	r2,48(r2)
 4002234:	18bfe51e 	bne	r3,r2,40021cc <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4002238:	e0bffa17 	ldw	r2,-24(fp)
 400223c:	103f9e26 	beq	r2,zero,40020b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4002240:	e0bffb17 	ldw	r2,-20(fp)
 4002244:	10c00817 	ldw	r3,32(r2)
 4002248:	00bfff44 	movi	r2,-3
 400224c:	1886703a 	and	r3,r3,r2
 4002250:	e0bffb17 	ldw	r2,-20(fp)
 4002254:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4002258:	e0bffb17 	ldw	r2,-20(fp)
 400225c:	10800017 	ldw	r2,0(r2)
 4002260:	10800104 	addi	r2,r2,4
 4002264:	e0fffb17 	ldw	r3,-20(fp)
 4002268:	18c00817 	ldw	r3,32(r3)
 400226c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4002270:	e0bffc17 	ldw	r2,-16(fp)
 4002274:	10800104 	addi	r2,r2,4
 4002278:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400227c:	003f8e06 	br	40020b8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4002280:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4002284:	e037883a 	mov	sp,fp
 4002288:	df000017 	ldw	fp,0(sp)
 400228c:	dec00104 	addi	sp,sp,4
 4002290:	f800283a 	ret

04002294 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4002294:	defffc04 	addi	sp,sp,-16
 4002298:	df000315 	stw	fp,12(sp)
 400229c:	df000304 	addi	fp,sp,12
 40022a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40022a4:	e0bfff17 	ldw	r2,-4(fp)
 40022a8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40022ac:	e0bffd17 	ldw	r2,-12(fp)
 40022b0:	10800017 	ldw	r2,0(r2)
 40022b4:	10800104 	addi	r2,r2,4
 40022b8:	10800037 	ldwio	r2,0(r2)
 40022bc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40022c0:	e0bffe17 	ldw	r2,-8(fp)
 40022c4:	1081000c 	andi	r2,r2,1024
 40022c8:	10000a26 	beq	r2,zero,40022f4 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40022cc:	e0bffd17 	ldw	r2,-12(fp)
 40022d0:	10800017 	ldw	r2,0(r2)
 40022d4:	10800104 	addi	r2,r2,4
 40022d8:	e0fffd17 	ldw	r3,-12(fp)
 40022dc:	18c00817 	ldw	r3,32(r3)
 40022e0:	18c10014 	ori	r3,r3,1024
 40022e4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 40022e8:	e0bffd17 	ldw	r2,-12(fp)
 40022ec:	10000915 	stw	zero,36(r2)
 40022f0:	00000a06 	br	400231c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40022f4:	e0bffd17 	ldw	r2,-12(fp)
 40022f8:	10800917 	ldw	r2,36(r2)
 40022fc:	00e00034 	movhi	r3,32768
 4002300:	18ffff04 	addi	r3,r3,-4
 4002304:	18800536 	bltu	r3,r2,400231c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 4002308:	e0bffd17 	ldw	r2,-12(fp)
 400230c:	10800917 	ldw	r2,36(r2)
 4002310:	10c00044 	addi	r3,r2,1
 4002314:	e0bffd17 	ldw	r2,-12(fp)
 4002318:	10c00915 	stw	r3,36(r2)
 400231c:	00810034 	movhi	r2,1024
 4002320:	109e0b04 	addi	r2,r2,30764
 4002324:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4002328:	e037883a 	mov	sp,fp
 400232c:	df000017 	ldw	fp,0(sp)
 4002330:	dec00104 	addi	sp,sp,4
 4002334:	f800283a 	ret

04002338 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4002338:	defffd04 	addi	sp,sp,-12
 400233c:	df000215 	stw	fp,8(sp)
 4002340:	df000204 	addi	fp,sp,8
 4002344:	e13ffe15 	stw	r4,-8(fp)
 4002348:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400234c:	00000506 	br	4002364 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4002350:	e0bfff17 	ldw	r2,-4(fp)
 4002354:	1090000c 	andi	r2,r2,16384
 4002358:	10000226 	beq	r2,zero,4002364 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400235c:	00bffd44 	movi	r2,-11
 4002360:	00000b06 	br	4002390 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4002364:	e0bffe17 	ldw	r2,-8(fp)
 4002368:	10c00d17 	ldw	r3,52(r2)
 400236c:	e0bffe17 	ldw	r2,-8(fp)
 4002370:	10800c17 	ldw	r2,48(r2)
 4002374:	18800526 	beq	r3,r2,400238c <altera_avalon_jtag_uart_close+0x54>
 4002378:	e0bffe17 	ldw	r2,-8(fp)
 400237c:	10c00917 	ldw	r3,36(r2)
 4002380:	e0bffe17 	ldw	r2,-8(fp)
 4002384:	10800117 	ldw	r2,4(r2)
 4002388:	18bff136 	bltu	r3,r2,4002350 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400238c:	0005883a 	mov	r2,zero
}
 4002390:	e037883a 	mov	sp,fp
 4002394:	df000017 	ldw	fp,0(sp)
 4002398:	dec00104 	addi	sp,sp,4
 400239c:	f800283a 	ret

040023a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40023a0:	defffa04 	addi	sp,sp,-24
 40023a4:	df000515 	stw	fp,20(sp)
 40023a8:	df000504 	addi	fp,sp,20
 40023ac:	e13ffd15 	stw	r4,-12(fp)
 40023b0:	e17ffe15 	stw	r5,-8(fp)
 40023b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40023b8:	00bff9c4 	movi	r2,-25
 40023bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40023c0:	e0bffe17 	ldw	r2,-8(fp)
 40023c4:	10da8060 	cmpeqi	r3,r2,27137
 40023c8:	1800031e 	bne	r3,zero,40023d8 <altera_avalon_jtag_uart_ioctl+0x38>
 40023cc:	109a80a0 	cmpeqi	r2,r2,27138
 40023d0:	1000181e 	bne	r2,zero,4002434 <altera_avalon_jtag_uart_ioctl+0x94>
 40023d4:	00002606 	br	4002470 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40023d8:	e0bffd17 	ldw	r2,-12(fp)
 40023dc:	10c00117 	ldw	r3,4(r2)
 40023e0:	00a00034 	movhi	r2,32768
 40023e4:	10bfffc4 	addi	r2,r2,-1
 40023e8:	18802226 	beq	r3,r2,4002474 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 40023ec:	e0bfff17 	ldw	r2,-4(fp)
 40023f0:	10800017 	ldw	r2,0(r2)
 40023f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40023f8:	e0bffc17 	ldw	r2,-16(fp)
 40023fc:	10800090 	cmplti	r2,r2,2
 4002400:	1000061e 	bne	r2,zero,400241c <altera_avalon_jtag_uart_ioctl+0x7c>
 4002404:	e0fffc17 	ldw	r3,-16(fp)
 4002408:	00a00034 	movhi	r2,32768
 400240c:	10bfffc4 	addi	r2,r2,-1
 4002410:	18800226 	beq	r3,r2,400241c <altera_avalon_jtag_uart_ioctl+0x7c>
 4002414:	e0bffc17 	ldw	r2,-16(fp)
 4002418:	00000206 	br	4002424 <altera_avalon_jtag_uart_ioctl+0x84>
 400241c:	00a00034 	movhi	r2,32768
 4002420:	10bfff84 	addi	r2,r2,-2
 4002424:	e0fffd17 	ldw	r3,-12(fp)
 4002428:	18800115 	stw	r2,4(r3)
      rc = 0;
 400242c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4002430:	00001006 	br	4002474 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4002434:	e0bffd17 	ldw	r2,-12(fp)
 4002438:	10c00117 	ldw	r3,4(r2)
 400243c:	00a00034 	movhi	r2,32768
 4002440:	10bfffc4 	addi	r2,r2,-1
 4002444:	18800d26 	beq	r3,r2,400247c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4002448:	e0bffd17 	ldw	r2,-12(fp)
 400244c:	10c00917 	ldw	r3,36(r2)
 4002450:	e0bffd17 	ldw	r2,-12(fp)
 4002454:	10800117 	ldw	r2,4(r2)
 4002458:	1885803a 	cmpltu	r2,r3,r2
 400245c:	10c03fcc 	andi	r3,r2,255
 4002460:	e0bfff17 	ldw	r2,-4(fp)
 4002464:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4002468:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400246c:	00000306 	br	400247c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 4002470:	00000306 	br	4002480 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4002474:	0001883a 	nop
 4002478:	00000106 	br	4002480 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400247c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4002480:	e0bffb17 	ldw	r2,-20(fp)
}
 4002484:	e037883a 	mov	sp,fp
 4002488:	df000017 	ldw	fp,0(sp)
 400248c:	dec00104 	addi	sp,sp,4
 4002490:	f800283a 	ret

04002494 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4002494:	defff304 	addi	sp,sp,-52
 4002498:	dfc00c15 	stw	ra,48(sp)
 400249c:	df000b15 	stw	fp,44(sp)
 40024a0:	df000b04 	addi	fp,sp,44
 40024a4:	e13ffc15 	stw	r4,-16(fp)
 40024a8:	e17ffd15 	stw	r5,-12(fp)
 40024ac:	e1bffe15 	stw	r6,-8(fp)
 40024b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40024b4:	e0bffd17 	ldw	r2,-12(fp)
 40024b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40024bc:	00004706 	br	40025dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40024c0:	e0bffc17 	ldw	r2,-16(fp)
 40024c4:	10800a17 	ldw	r2,40(r2)
 40024c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40024cc:	e0bffc17 	ldw	r2,-16(fp)
 40024d0:	10800b17 	ldw	r2,44(r2)
 40024d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40024d8:	e0fff717 	ldw	r3,-36(fp)
 40024dc:	e0bff817 	ldw	r2,-32(fp)
 40024e0:	18800536 	bltu	r3,r2,40024f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40024e4:	e0fff717 	ldw	r3,-36(fp)
 40024e8:	e0bff817 	ldw	r2,-32(fp)
 40024ec:	1885c83a 	sub	r2,r3,r2
 40024f0:	e0bff615 	stw	r2,-40(fp)
 40024f4:	00000406 	br	4002508 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40024f8:	00c20004 	movi	r3,2048
 40024fc:	e0bff817 	ldw	r2,-32(fp)
 4002500:	1885c83a 	sub	r2,r3,r2
 4002504:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4002508:	e0bff617 	ldw	r2,-40(fp)
 400250c:	10001e26 	beq	r2,zero,4002588 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4002510:	e0fffe17 	ldw	r3,-8(fp)
 4002514:	e0bff617 	ldw	r2,-40(fp)
 4002518:	1880022e 	bgeu	r3,r2,4002524 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400251c:	e0bffe17 	ldw	r2,-8(fp)
 4002520:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4002524:	e0bff817 	ldw	r2,-32(fp)
 4002528:	10800e04 	addi	r2,r2,56
 400252c:	e0fffc17 	ldw	r3,-16(fp)
 4002530:	1885883a 	add	r2,r3,r2
 4002534:	e13ff517 	ldw	r4,-44(fp)
 4002538:	100b883a 	mov	r5,r2
 400253c:	e1bff617 	ldw	r6,-40(fp)
 4002540:	40043a80 	call	40043a8 <memcpy>
      ptr   += n;
 4002544:	e0fff517 	ldw	r3,-44(fp)
 4002548:	e0bff617 	ldw	r2,-40(fp)
 400254c:	1885883a 	add	r2,r3,r2
 4002550:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4002554:	e0fffe17 	ldw	r3,-8(fp)
 4002558:	e0bff617 	ldw	r2,-40(fp)
 400255c:	1885c83a 	sub	r2,r3,r2
 4002560:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4002564:	e0fff817 	ldw	r3,-32(fp)
 4002568:	e0bff617 	ldw	r2,-40(fp)
 400256c:	1885883a 	add	r2,r3,r2
 4002570:	10c1ffcc 	andi	r3,r2,2047
 4002574:	e0bffc17 	ldw	r2,-16(fp)
 4002578:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400257c:	e0bffe17 	ldw	r2,-8(fp)
 4002580:	00bfcf16 	blt	zero,r2,40024c0 <altera_avalon_jtag_uart_read+0x2c>
 4002584:	00000106 	br	400258c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4002588:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400258c:	e0fff517 	ldw	r3,-44(fp)
 4002590:	e0bffd17 	ldw	r2,-12(fp)
 4002594:	1880141e 	bne	r3,r2,40025e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4002598:	e0bfff17 	ldw	r2,-4(fp)
 400259c:	1090000c 	andi	r2,r2,16384
 40025a0:	1000131e 	bne	r2,zero,40025f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40025a4:	0001883a 	nop
 40025a8:	e0bffc17 	ldw	r2,-16(fp)
 40025ac:	10c00a17 	ldw	r3,40(r2)
 40025b0:	e0bff717 	ldw	r2,-36(fp)
 40025b4:	1880051e 	bne	r3,r2,40025cc <altera_avalon_jtag_uart_read+0x138>
 40025b8:	e0bffc17 	ldw	r2,-16(fp)
 40025bc:	10c00917 	ldw	r3,36(r2)
 40025c0:	e0bffc17 	ldw	r2,-16(fp)
 40025c4:	10800117 	ldw	r2,4(r2)
 40025c8:	18bff736 	bltu	r3,r2,40025a8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40025cc:	e0bffc17 	ldw	r2,-16(fp)
 40025d0:	10c00a17 	ldw	r3,40(r2)
 40025d4:	e0bff717 	ldw	r2,-36(fp)
 40025d8:	18800726 	beq	r3,r2,40025f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40025dc:	e0bffe17 	ldw	r2,-8(fp)
 40025e0:	00bfb716 	blt	zero,r2,40024c0 <altera_avalon_jtag_uart_read+0x2c>
 40025e4:	00000506 	br	40025fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40025e8:	0001883a 	nop
 40025ec:	00000306 	br	40025fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40025f0:	0001883a 	nop
 40025f4:	00000106 	br	40025fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40025f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40025fc:	e0fff517 	ldw	r3,-44(fp)
 4002600:	e0bffd17 	ldw	r2,-12(fp)
 4002604:	18801726 	beq	r3,r2,4002664 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002608:	0005303a 	rdctl	r2,status
 400260c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002610:	e0fffa17 	ldw	r3,-24(fp)
 4002614:	00bfff84 	movi	r2,-2
 4002618:	1884703a 	and	r2,r3,r2
 400261c:	1001703a 	wrctl	status,r2
  
  return context;
 4002620:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4002624:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4002628:	e0bffc17 	ldw	r2,-16(fp)
 400262c:	10800817 	ldw	r2,32(r2)
 4002630:	10c00054 	ori	r3,r2,1
 4002634:	e0bffc17 	ldw	r2,-16(fp)
 4002638:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400263c:	e0bffc17 	ldw	r2,-16(fp)
 4002640:	10800017 	ldw	r2,0(r2)
 4002644:	10800104 	addi	r2,r2,4
 4002648:	e0fffc17 	ldw	r3,-16(fp)
 400264c:	18c00817 	ldw	r3,32(r3)
 4002650:	10c00035 	stwio	r3,0(r2)
 4002654:	e0bff917 	ldw	r2,-28(fp)
 4002658:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400265c:	e0bffb17 	ldw	r2,-20(fp)
 4002660:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4002664:	e0fff517 	ldw	r3,-44(fp)
 4002668:	e0bffd17 	ldw	r2,-12(fp)
 400266c:	18800426 	beq	r3,r2,4002680 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 4002670:	e0fff517 	ldw	r3,-44(fp)
 4002674:	e0bffd17 	ldw	r2,-12(fp)
 4002678:	1885c83a 	sub	r2,r3,r2
 400267c:	00000606 	br	4002698 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 4002680:	e0bfff17 	ldw	r2,-4(fp)
 4002684:	1090000c 	andi	r2,r2,16384
 4002688:	10000226 	beq	r2,zero,4002694 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 400268c:	00bffd44 	movi	r2,-11
 4002690:	00000106 	br	4002698 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 4002694:	00bffec4 	movi	r2,-5
}
 4002698:	e037883a 	mov	sp,fp
 400269c:	dfc00117 	ldw	ra,4(sp)
 40026a0:	df000017 	ldw	fp,0(sp)
 40026a4:	dec00204 	addi	sp,sp,8
 40026a8:	f800283a 	ret

040026ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40026ac:	defff304 	addi	sp,sp,-52
 40026b0:	dfc00c15 	stw	ra,48(sp)
 40026b4:	df000b15 	stw	fp,44(sp)
 40026b8:	df000b04 	addi	fp,sp,44
 40026bc:	e13ffc15 	stw	r4,-16(fp)
 40026c0:	e17ffd15 	stw	r5,-12(fp)
 40026c4:	e1bffe15 	stw	r6,-8(fp)
 40026c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40026cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40026d0:	e0bffd17 	ldw	r2,-12(fp)
 40026d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40026d8:	00003706 	br	40027b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40026dc:	e0bffc17 	ldw	r2,-16(fp)
 40026e0:	10800c17 	ldw	r2,48(r2)
 40026e4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 40026e8:	e0bffc17 	ldw	r2,-16(fp)
 40026ec:	10800d17 	ldw	r2,52(r2)
 40026f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40026f4:	e0fff817 	ldw	r3,-32(fp)
 40026f8:	e0bff517 	ldw	r2,-44(fp)
 40026fc:	1880062e 	bgeu	r3,r2,4002718 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4002700:	e0fff517 	ldw	r3,-44(fp)
 4002704:	e0bff817 	ldw	r2,-32(fp)
 4002708:	1885c83a 	sub	r2,r3,r2
 400270c:	10bfffc4 	addi	r2,r2,-1
 4002710:	e0bff615 	stw	r2,-40(fp)
 4002714:	00000b06 	br	4002744 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4002718:	e0bff517 	ldw	r2,-44(fp)
 400271c:	10000526 	beq	r2,zero,4002734 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4002720:	00c20004 	movi	r3,2048
 4002724:	e0bff817 	ldw	r2,-32(fp)
 4002728:	1885c83a 	sub	r2,r3,r2
 400272c:	e0bff615 	stw	r2,-40(fp)
 4002730:	00000406 	br	4002744 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4002734:	00c1ffc4 	movi	r3,2047
 4002738:	e0bff817 	ldw	r2,-32(fp)
 400273c:	1885c83a 	sub	r2,r3,r2
 4002740:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4002744:	e0bff617 	ldw	r2,-40(fp)
 4002748:	10001e26 	beq	r2,zero,40027c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400274c:	e0fffe17 	ldw	r3,-8(fp)
 4002750:	e0bff617 	ldw	r2,-40(fp)
 4002754:	1880022e 	bgeu	r3,r2,4002760 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4002758:	e0bffe17 	ldw	r2,-8(fp)
 400275c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4002760:	e0bff817 	ldw	r2,-32(fp)
 4002764:	10820e04 	addi	r2,r2,2104
 4002768:	e0fffc17 	ldw	r3,-16(fp)
 400276c:	1885883a 	add	r2,r3,r2
 4002770:	1009883a 	mov	r4,r2
 4002774:	e17ffd17 	ldw	r5,-12(fp)
 4002778:	e1bff617 	ldw	r6,-40(fp)
 400277c:	40043a80 	call	40043a8 <memcpy>
      ptr   += n;
 4002780:	e0fffd17 	ldw	r3,-12(fp)
 4002784:	e0bff617 	ldw	r2,-40(fp)
 4002788:	1885883a 	add	r2,r3,r2
 400278c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4002790:	e0fffe17 	ldw	r3,-8(fp)
 4002794:	e0bff617 	ldw	r2,-40(fp)
 4002798:	1885c83a 	sub	r2,r3,r2
 400279c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40027a0:	e0fff817 	ldw	r3,-32(fp)
 40027a4:	e0bff617 	ldw	r2,-40(fp)
 40027a8:	1885883a 	add	r2,r3,r2
 40027ac:	10c1ffcc 	andi	r3,r2,2047
 40027b0:	e0bffc17 	ldw	r2,-16(fp)
 40027b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40027b8:	e0bffe17 	ldw	r2,-8(fp)
 40027bc:	00bfc716 	blt	zero,r2,40026dc <altera_avalon_jtag_uart_write+0x30>
 40027c0:	00000106 	br	40027c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40027c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40027c8:	0005303a 	rdctl	r2,status
 40027cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40027d0:	e0fffa17 	ldw	r3,-24(fp)
 40027d4:	00bfff84 	movi	r2,-2
 40027d8:	1884703a 	and	r2,r3,r2
 40027dc:	1001703a 	wrctl	status,r2
  
  return context;
 40027e0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40027e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40027e8:	e0bffc17 	ldw	r2,-16(fp)
 40027ec:	10800817 	ldw	r2,32(r2)
 40027f0:	10c00094 	ori	r3,r2,2
 40027f4:	e0bffc17 	ldw	r2,-16(fp)
 40027f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40027fc:	e0bffc17 	ldw	r2,-16(fp)
 4002800:	10800017 	ldw	r2,0(r2)
 4002804:	10800104 	addi	r2,r2,4
 4002808:	e0fffc17 	ldw	r3,-16(fp)
 400280c:	18c00817 	ldw	r3,32(r3)
 4002810:	10c00035 	stwio	r3,0(r2)
 4002814:	e0bff917 	ldw	r2,-28(fp)
 4002818:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400281c:	e0bffb17 	ldw	r2,-20(fp)
 4002820:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4002824:	e0bffe17 	ldw	r2,-8(fp)
 4002828:	0080110e 	bge	zero,r2,4002870 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400282c:	e0bfff17 	ldw	r2,-4(fp)
 4002830:	1090000c 	andi	r2,r2,16384
 4002834:	1000111e 	bne	r2,zero,400287c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4002838:	0001883a 	nop
 400283c:	e0bffc17 	ldw	r2,-16(fp)
 4002840:	10c00d17 	ldw	r3,52(r2)
 4002844:	e0bff517 	ldw	r2,-44(fp)
 4002848:	1880051e 	bne	r3,r2,4002860 <altera_avalon_jtag_uart_write+0x1b4>
 400284c:	e0bffc17 	ldw	r2,-16(fp)
 4002850:	10c00917 	ldw	r3,36(r2)
 4002854:	e0bffc17 	ldw	r2,-16(fp)
 4002858:	10800117 	ldw	r2,4(r2)
 400285c:	18bff736 	bltu	r3,r2,400283c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4002860:	e0bffc17 	ldw	r2,-16(fp)
 4002864:	10c00d17 	ldw	r3,52(r2)
 4002868:	e0bff517 	ldw	r2,-44(fp)
 400286c:	18800526 	beq	r3,r2,4002884 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4002870:	e0bffe17 	ldw	r2,-8(fp)
 4002874:	00bfd016 	blt	zero,r2,40027b8 <altera_avalon_jtag_uart_write+0x10c>
 4002878:	00000306 	br	4002888 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400287c:	0001883a 	nop
 4002880:	00000106 	br	4002888 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 4002884:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4002888:	e0fffd17 	ldw	r3,-12(fp)
 400288c:	e0bff717 	ldw	r2,-36(fp)
 4002890:	18800426 	beq	r3,r2,40028a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4002894:	e0fffd17 	ldw	r3,-12(fp)
 4002898:	e0bff717 	ldw	r2,-36(fp)
 400289c:	1885c83a 	sub	r2,r3,r2
 40028a0:	00000606 	br	40028bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40028a4:	e0bfff17 	ldw	r2,-4(fp)
 40028a8:	1090000c 	andi	r2,r2,16384
 40028ac:	10000226 	beq	r2,zero,40028b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40028b0:	00bffd44 	movi	r2,-11
 40028b4:	00000106 	br	40028bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40028b8:	00bffec4 	movi	r2,-5
}
 40028bc:	e037883a 	mov	sp,fp
 40028c0:	dfc00117 	ldw	ra,4(sp)
 40028c4:	df000017 	ldw	fp,0(sp)
 40028c8:	dec00204 	addi	sp,sp,8
 40028cc:	f800283a 	ret

040028d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40028d0:	defffa04 	addi	sp,sp,-24
 40028d4:	dfc00515 	stw	ra,20(sp)
 40028d8:	df000415 	stw	fp,16(sp)
 40028dc:	df000404 	addi	fp,sp,16
 40028e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40028e4:	0007883a 	mov	r3,zero
 40028e8:	e0bfff17 	ldw	r2,-4(fp)
 40028ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40028f0:	e0bfff17 	ldw	r2,-4(fp)
 40028f4:	10800104 	addi	r2,r2,4
 40028f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40028fc:	0005303a 	rdctl	r2,status
 4002900:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002904:	e0fffd17 	ldw	r3,-12(fp)
 4002908:	00bfff84 	movi	r2,-2
 400290c:	1884703a 	and	r2,r3,r2
 4002910:	1001703a 	wrctl	status,r2
  
  return context;
 4002914:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4002918:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 400291c:	4003ed80 	call	4003ed8 <alt_tick>
 4002920:	e0bffc17 	ldw	r2,-16(fp)
 4002924:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002928:	e0bffe17 	ldw	r2,-8(fp)
 400292c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4002930:	e037883a 	mov	sp,fp
 4002934:	dfc00117 	ldw	ra,4(sp)
 4002938:	df000017 	ldw	fp,0(sp)
 400293c:	dec00204 	addi	sp,sp,8
 4002940:	f800283a 	ret

04002944 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4002944:	defff804 	addi	sp,sp,-32
 4002948:	dfc00715 	stw	ra,28(sp)
 400294c:	df000615 	stw	fp,24(sp)
 4002950:	df000604 	addi	fp,sp,24
 4002954:	e13ffc15 	stw	r4,-16(fp)
 4002958:	e17ffd15 	stw	r5,-12(fp)
 400295c:	e1bffe15 	stw	r6,-8(fp)
 4002960:	e1ffff15 	stw	r7,-4(fp)
 4002964:	e0bfff17 	ldw	r2,-4(fp)
 4002968:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400296c:	00810034 	movhi	r2,1024
 4002970:	109e0b04 	addi	r2,r2,30764
 4002974:	10800017 	ldw	r2,0(r2)
 4002978:	1000041e 	bne	r2,zero,400298c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 400297c:	00810034 	movhi	r2,1024
 4002980:	109e0b04 	addi	r2,r2,30764
 4002984:	e0fffb17 	ldw	r3,-20(fp)
 4002988:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400298c:	e0bffc17 	ldw	r2,-16(fp)
 4002990:	10800104 	addi	r2,r2,4
 4002994:	00c001c4 	movi	r3,7
 4002998:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400299c:	d8000015 	stw	zero,0(sp)
 40029a0:	e13ffd17 	ldw	r4,-12(fp)
 40029a4:	e17ffe17 	ldw	r5,-8(fp)
 40029a8:	01810034 	movhi	r6,1024
 40029ac:	318a3404 	addi	r6,r6,10448
 40029b0:	e1fffc17 	ldw	r7,-16(fp)
 40029b4:	40037700 	call	4003770 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 40029b8:	e037883a 	mov	sp,fp
 40029bc:	dfc00117 	ldw	ra,4(sp)
 40029c0:	df000017 	ldw	fp,0(sp)
 40029c4:	dec00204 	addi	sp,sp,8
 40029c8:	f800283a 	ret

040029cc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40029cc:	defffa04 	addi	sp,sp,-24
 40029d0:	dfc00515 	stw	ra,20(sp)
 40029d4:	df000415 	stw	fp,16(sp)
 40029d8:	df000404 	addi	fp,sp,16
 40029dc:	e13ffd15 	stw	r4,-12(fp)
 40029e0:	e17ffe15 	stw	r5,-8(fp)
 40029e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40029e8:	e0bffd17 	ldw	r2,-12(fp)
 40029ec:	10800017 	ldw	r2,0(r2)
 40029f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 40029f4:	e0bffc17 	ldw	r2,-16(fp)
 40029f8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 40029fc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4002a00:	10800217 	ldw	r2,8(r2)
 4002a04:	1809883a 	mov	r4,r3
 4002a08:	e17ffe17 	ldw	r5,-8(fp)
 4002a0c:	e1bfff17 	ldw	r6,-4(fp)
 4002a10:	100f883a 	mov	r7,r2
 4002a14:	4002ed40 	call	4002ed4 <altera_avalon_uart_read>
      fd->fd_flags);
}
 4002a18:	e037883a 	mov	sp,fp
 4002a1c:	dfc00117 	ldw	ra,4(sp)
 4002a20:	df000017 	ldw	fp,0(sp)
 4002a24:	dec00204 	addi	sp,sp,8
 4002a28:	f800283a 	ret

04002a2c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4002a2c:	defffa04 	addi	sp,sp,-24
 4002a30:	dfc00515 	stw	ra,20(sp)
 4002a34:	df000415 	stw	fp,16(sp)
 4002a38:	df000404 	addi	fp,sp,16
 4002a3c:	e13ffd15 	stw	r4,-12(fp)
 4002a40:	e17ffe15 	stw	r5,-8(fp)
 4002a44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4002a48:	e0bffd17 	ldw	r2,-12(fp)
 4002a4c:	10800017 	ldw	r2,0(r2)
 4002a50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4002a54:	e0bffc17 	ldw	r2,-16(fp)
 4002a58:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4002a5c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4002a60:	10800217 	ldw	r2,8(r2)
 4002a64:	1809883a 	mov	r4,r3
 4002a68:	e17ffe17 	ldw	r5,-8(fp)
 4002a6c:	e1bfff17 	ldw	r6,-4(fp)
 4002a70:	100f883a 	mov	r7,r2
 4002a74:	40031280 	call	4003128 <altera_avalon_uart_write>
      fd->fd_flags);
}
 4002a78:	e037883a 	mov	sp,fp
 4002a7c:	dfc00117 	ldw	ra,4(sp)
 4002a80:	df000017 	ldw	fp,0(sp)
 4002a84:	dec00204 	addi	sp,sp,8
 4002a88:	f800283a 	ret

04002a8c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4002a8c:	defffc04 	addi	sp,sp,-16
 4002a90:	dfc00315 	stw	ra,12(sp)
 4002a94:	df000215 	stw	fp,8(sp)
 4002a98:	df000204 	addi	fp,sp,8
 4002a9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4002aa0:	e0bfff17 	ldw	r2,-4(fp)
 4002aa4:	10800017 	ldw	r2,0(r2)
 4002aa8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4002aac:	e0bffe17 	ldw	r2,-8(fp)
 4002ab0:	10c00a04 	addi	r3,r2,40
 4002ab4:	e0bfff17 	ldw	r2,-4(fp)
 4002ab8:	10800217 	ldw	r2,8(r2)
 4002abc:	1809883a 	mov	r4,r3
 4002ac0:	100b883a 	mov	r5,r2
 4002ac4:	4002e300 	call	4002e30 <altera_avalon_uart_close>
}
 4002ac8:	e037883a 	mov	sp,fp
 4002acc:	dfc00117 	ldw	ra,4(sp)
 4002ad0:	df000017 	ldw	fp,0(sp)
 4002ad4:	dec00204 	addi	sp,sp,8
 4002ad8:	f800283a 	ret

04002adc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4002adc:	defff804 	addi	sp,sp,-32
 4002ae0:	dfc00715 	stw	ra,28(sp)
 4002ae4:	df000615 	stw	fp,24(sp)
 4002ae8:	df000604 	addi	fp,sp,24
 4002aec:	e13ffd15 	stw	r4,-12(fp)
 4002af0:	e17ffe15 	stw	r5,-8(fp)
 4002af4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 4002af8:	e0bffd17 	ldw	r2,-12(fp)
 4002afc:	10800017 	ldw	r2,0(r2)
 4002b00:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4002b04:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4002b08:	1000041e 	bne	r2,zero,4002b1c <altera_avalon_uart_init+0x40>
 4002b0c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4002b10:	1000021e 	bne	r2,zero,4002b1c <altera_avalon_uart_init+0x40>
 4002b14:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4002b18:	10000226 	beq	r2,zero,4002b24 <altera_avalon_uart_init+0x48>
 4002b1c:	00800044 	movi	r2,1
 4002b20:	00000106 	br	4002b28 <altera_avalon_uart_init+0x4c>
 4002b24:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4002b28:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 4002b2c:	e0bffc17 	ldw	r2,-16(fp)
 4002b30:	10000f1e 	bne	r2,zero,4002b70 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 4002b34:	e0bffd17 	ldw	r2,-12(fp)
 4002b38:	00c32004 	movi	r3,3200
 4002b3c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 4002b40:	e0bffb17 	ldw	r2,-20(fp)
 4002b44:	10800304 	addi	r2,r2,12
 4002b48:	e0fffd17 	ldw	r3,-12(fp)
 4002b4c:	18c00117 	ldw	r3,4(r3)
 4002b50:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 4002b54:	d8000015 	stw	zero,0(sp)
 4002b58:	e13ffe17 	ldw	r4,-8(fp)
 4002b5c:	e17fff17 	ldw	r5,-4(fp)
 4002b60:	01810034 	movhi	r6,1024
 4002b64:	318ae104 	addi	r6,r6,11140
 4002b68:	e1fffd17 	ldw	r7,-12(fp)
 4002b6c:	40037700 	call	4003770 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 4002b70:	e037883a 	mov	sp,fp
 4002b74:	dfc00117 	ldw	ra,4(sp)
 4002b78:	df000017 	ldw	fp,0(sp)
 4002b7c:	dec00204 	addi	sp,sp,8
 4002b80:	f800283a 	ret

04002b84 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 4002b84:	defffa04 	addi	sp,sp,-24
 4002b88:	dfc00515 	stw	ra,20(sp)
 4002b8c:	df000415 	stw	fp,16(sp)
 4002b90:	df000404 	addi	fp,sp,16
 4002b94:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 4002b98:	e0bfff17 	ldw	r2,-4(fp)
 4002b9c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 4002ba0:	e0bffc17 	ldw	r2,-16(fp)
 4002ba4:	10800017 	ldw	r2,0(r2)
 4002ba8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4002bac:	e0bffd17 	ldw	r2,-12(fp)
 4002bb0:	10800204 	addi	r2,r2,8
 4002bb4:	10800037 	ldwio	r2,0(r2)
 4002bb8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4002bbc:	e0bffd17 	ldw	r2,-12(fp)
 4002bc0:	10800204 	addi	r2,r2,8
 4002bc4:	0007883a 	mov	r3,zero
 4002bc8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4002bcc:	e0bffd17 	ldw	r2,-12(fp)
 4002bd0:	10800204 	addi	r2,r2,8
 4002bd4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4002bd8:	e0bffe17 	ldw	r2,-8(fp)
 4002bdc:	1080200c 	andi	r2,r2,128
 4002be0:	10000326 	beq	r2,zero,4002bf0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4002be4:	e13ffc17 	ldw	r4,-16(fp)
 4002be8:	e17ffe17 	ldw	r5,-8(fp)
 4002bec:	4002c1c0 	call	4002c1c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4002bf0:	e0bffe17 	ldw	r2,-8(fp)
 4002bf4:	1081100c 	andi	r2,r2,1088
 4002bf8:	10000326 	beq	r2,zero,4002c08 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4002bfc:	e13ffc17 	ldw	r4,-16(fp)
 4002c00:	e17ffe17 	ldw	r5,-8(fp)
 4002c04:	4002cf40 	call	4002cf4 <altera_avalon_uart_txirq>
  }
  

}
 4002c08:	e037883a 	mov	sp,fp
 4002c0c:	dfc00117 	ldw	ra,4(sp)
 4002c10:	df000017 	ldw	fp,0(sp)
 4002c14:	dec00204 	addi	sp,sp,8
 4002c18:	f800283a 	ret

04002c1c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4002c1c:	defffc04 	addi	sp,sp,-16
 4002c20:	df000315 	stw	fp,12(sp)
 4002c24:	df000304 	addi	fp,sp,12
 4002c28:	e13ffe15 	stw	r4,-8(fp)
 4002c2c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 4002c30:	e0bfff17 	ldw	r2,-4(fp)
 4002c34:	108000cc 	andi	r2,r2,3
 4002c38:	1000291e 	bne	r2,zero,4002ce0 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 4002c3c:	e0bffe17 	ldw	r2,-8(fp)
 4002c40:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4002c44:	e0bffe17 	ldw	r2,-8(fp)
 4002c48:	10800317 	ldw	r2,12(r2)
 4002c4c:	10800044 	addi	r2,r2,1
 4002c50:	10800fcc 	andi	r2,r2,63
 4002c54:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 4002c58:	e0bffe17 	ldw	r2,-8(fp)
 4002c5c:	10800317 	ldw	r2,12(r2)
 4002c60:	e0fffe17 	ldw	r3,-8(fp)
 4002c64:	18c00017 	ldw	r3,0(r3)
 4002c68:	18c00037 	ldwio	r3,0(r3)
 4002c6c:	e13ffe17 	ldw	r4,-8(fp)
 4002c70:	2085883a 	add	r2,r4,r2
 4002c74:	10800704 	addi	r2,r2,28
 4002c78:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 4002c7c:	e0bffe17 	ldw	r2,-8(fp)
 4002c80:	e0fffd17 	ldw	r3,-12(fp)
 4002c84:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4002c88:	e0bffe17 	ldw	r2,-8(fp)
 4002c8c:	10800317 	ldw	r2,12(r2)
 4002c90:	10800044 	addi	r2,r2,1
 4002c94:	10800fcc 	andi	r2,r2,63
 4002c98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4002c9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ca0:	10c00217 	ldw	r3,8(r2)
 4002ca4:	e0bffd17 	ldw	r2,-12(fp)
 4002ca8:	18800e1e 	bne	r3,r2,4002ce4 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4002cac:	e0bffe17 	ldw	r2,-8(fp)
 4002cb0:	10c00117 	ldw	r3,4(r2)
 4002cb4:	00bfdfc4 	movi	r2,-129
 4002cb8:	1886703a 	and	r3,r3,r2
 4002cbc:	e0bffe17 	ldw	r2,-8(fp)
 4002cc0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4002cc4:	e0bffe17 	ldw	r2,-8(fp)
 4002cc8:	10800017 	ldw	r2,0(r2)
 4002ccc:	10800304 	addi	r2,r2,12
 4002cd0:	e0fffe17 	ldw	r3,-8(fp)
 4002cd4:	18c00117 	ldw	r3,4(r3)
 4002cd8:	10c00035 	stwio	r3,0(r2)
 4002cdc:	00000106 	br	4002ce4 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4002ce0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4002ce4:	e037883a 	mov	sp,fp
 4002ce8:	df000017 	ldw	fp,0(sp)
 4002cec:	dec00104 	addi	sp,sp,4
 4002cf0:	f800283a 	ret

04002cf4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4002cf4:	defffd04 	addi	sp,sp,-12
 4002cf8:	df000215 	stw	fp,8(sp)
 4002cfc:	df000204 	addi	fp,sp,8
 4002d00:	e13ffe15 	stw	r4,-8(fp)
 4002d04:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 4002d08:	e0bffe17 	ldw	r2,-8(fp)
 4002d0c:	10c00417 	ldw	r3,16(r2)
 4002d10:	e0bffe17 	ldw	r2,-8(fp)
 4002d14:	10800517 	ldw	r2,20(r2)
 4002d18:	18803026 	beq	r3,r2,4002ddc <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4002d1c:	e0bffe17 	ldw	r2,-8(fp)
 4002d20:	10800617 	ldw	r2,24(r2)
 4002d24:	1080008c 	andi	r2,r2,2
 4002d28:	10000326 	beq	r2,zero,4002d38 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4002d2c:	e0bfff17 	ldw	r2,-4(fp)
 4002d30:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4002d34:	10001b26 	beq	r2,zero,4002da4 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 4002d38:	e0bffe17 	ldw	r2,-8(fp)
 4002d3c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 4002d40:	e0bffe17 	ldw	r2,-8(fp)
 4002d44:	10800017 	ldw	r2,0(r2)
 4002d48:	10800104 	addi	r2,r2,4
 4002d4c:	e0fffe17 	ldw	r3,-8(fp)
 4002d50:	18c00417 	ldw	r3,16(r3)
 4002d54:	e13ffe17 	ldw	r4,-8(fp)
 4002d58:	20c7883a 	add	r3,r4,r3
 4002d5c:	18c01704 	addi	r3,r3,92
 4002d60:	18c00003 	ldbu	r3,0(r3)
 4002d64:	18c03fcc 	andi	r3,r3,255
 4002d68:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 4002d6c:	e0bffe17 	ldw	r2,-8(fp)
 4002d70:	10800417 	ldw	r2,16(r2)
 4002d74:	10800044 	addi	r2,r2,1
 4002d78:	e0fffe17 	ldw	r3,-8(fp)
 4002d7c:	18800415 	stw	r2,16(r3)
 4002d80:	10c00fcc 	andi	r3,r2,63
 4002d84:	e0bffe17 	ldw	r2,-8(fp)
 4002d88:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4002d8c:	e0bffe17 	ldw	r2,-8(fp)
 4002d90:	10800117 	ldw	r2,4(r2)
 4002d94:	10c01014 	ori	r3,r2,64
 4002d98:	e0bffe17 	ldw	r2,-8(fp)
 4002d9c:	10c00115 	stw	r3,4(r2)
 4002da0:	00000e06 	br	4002ddc <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4002da4:	e0bffe17 	ldw	r2,-8(fp)
 4002da8:	10800017 	ldw	r2,0(r2)
 4002dac:	10800204 	addi	r2,r2,8
 4002db0:	10800037 	ldwio	r2,0(r2)
 4002db4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4002db8:	e0bfff17 	ldw	r2,-4(fp)
 4002dbc:	1082000c 	andi	r2,r2,2048
 4002dc0:	1000061e 	bne	r2,zero,4002ddc <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4002dc4:	e0bffe17 	ldw	r2,-8(fp)
 4002dc8:	10c00117 	ldw	r3,4(r2)
 4002dcc:	00bfefc4 	movi	r2,-65
 4002dd0:	1886703a 	and	r3,r3,r2
 4002dd4:	e0bffe17 	ldw	r2,-8(fp)
 4002dd8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4002ddc:	e0bffe17 	ldw	r2,-8(fp)
 4002de0:	10c00417 	ldw	r3,16(r2)
 4002de4:	e0bffe17 	ldw	r2,-8(fp)
 4002de8:	10800517 	ldw	r2,20(r2)
 4002dec:	1880061e 	bne	r3,r2,4002e08 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4002df0:	e0bffe17 	ldw	r2,-8(fp)
 4002df4:	10c00117 	ldw	r3,4(r2)
 4002df8:	00beefc4 	movi	r2,-1089
 4002dfc:	1886703a 	and	r3,r3,r2
 4002e00:	e0bffe17 	ldw	r2,-8(fp)
 4002e04:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4002e08:	e0bffe17 	ldw	r2,-8(fp)
 4002e0c:	10800017 	ldw	r2,0(r2)
 4002e10:	10800304 	addi	r2,r2,12
 4002e14:	e0fffe17 	ldw	r3,-8(fp)
 4002e18:	18c00117 	ldw	r3,4(r3)
 4002e1c:	10c00035 	stwio	r3,0(r2)
}
 4002e20:	e037883a 	mov	sp,fp
 4002e24:	df000017 	ldw	fp,0(sp)
 4002e28:	dec00104 	addi	sp,sp,4
 4002e2c:	f800283a 	ret

04002e30 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 4002e30:	defffd04 	addi	sp,sp,-12
 4002e34:	df000215 	stw	fp,8(sp)
 4002e38:	df000204 	addi	fp,sp,8
 4002e3c:	e13ffe15 	stw	r4,-8(fp)
 4002e40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4002e44:	00000506 	br	4002e5c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4002e48:	e0bfff17 	ldw	r2,-4(fp)
 4002e4c:	1090000c 	andi	r2,r2,16384
 4002e50:	10000226 	beq	r2,zero,4002e5c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4002e54:	00bffd44 	movi	r2,-11
 4002e58:	00000606 	br	4002e74 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4002e5c:	e0bffe17 	ldw	r2,-8(fp)
 4002e60:	10c00417 	ldw	r3,16(r2)
 4002e64:	e0bffe17 	ldw	r2,-8(fp)
 4002e68:	10800517 	ldw	r2,20(r2)
 4002e6c:	18bff61e 	bne	r3,r2,4002e48 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4002e70:	0005883a 	mov	r2,zero
}
 4002e74:	e037883a 	mov	sp,fp
 4002e78:	df000017 	ldw	fp,0(sp)
 4002e7c:	dec00104 	addi	sp,sp,4
 4002e80:	f800283a 	ret

04002e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002e84:	defffe04 	addi	sp,sp,-8
 4002e88:	dfc00115 	stw	ra,4(sp)
 4002e8c:	df000015 	stw	fp,0(sp)
 4002e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002e94:	00810034 	movhi	r2,1024
 4002e98:	10981d04 	addi	r2,r2,24692
 4002e9c:	10800017 	ldw	r2,0(r2)
 4002ea0:	10000526 	beq	r2,zero,4002eb8 <alt_get_errno+0x34>
 4002ea4:	00810034 	movhi	r2,1024
 4002ea8:	10981d04 	addi	r2,r2,24692
 4002eac:	10800017 	ldw	r2,0(r2)
 4002eb0:	103ee83a 	callr	r2
 4002eb4:	00000206 	br	4002ec0 <alt_get_errno+0x3c>
 4002eb8:	00810034 	movhi	r2,1024
 4002ebc:	109e0d04 	addi	r2,r2,30772
}
 4002ec0:	e037883a 	mov	sp,fp
 4002ec4:	dfc00117 	ldw	ra,4(sp)
 4002ec8:	df000017 	ldw	fp,0(sp)
 4002ecc:	dec00204 	addi	sp,sp,8
 4002ed0:	f800283a 	ret

04002ed4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4002ed4:	defff104 	addi	sp,sp,-60
 4002ed8:	dfc00e15 	stw	ra,56(sp)
 4002edc:	df000d15 	stw	fp,52(sp)
 4002ee0:	df000d04 	addi	fp,sp,52
 4002ee4:	e13ffc15 	stw	r4,-16(fp)
 4002ee8:	e17ffd15 	stw	r5,-12(fp)
 4002eec:	e1bffe15 	stw	r6,-8(fp)
 4002ef0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 4002ef4:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 4002ef8:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4002efc:	e0bfff17 	ldw	r2,-4(fp)
 4002f00:	1090000c 	andi	r2,r2,16384
 4002f04:	1005003a 	cmpeq	r2,r2,zero
 4002f08:	10803fcc 	andi	r2,r2,255
 4002f0c:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 4002f10:	e0bffc17 	ldw	r2,-16(fp)
 4002f14:	10800217 	ldw	r2,8(r2)
 4002f18:	10800044 	addi	r2,r2,1
 4002f1c:	10800fcc 	andi	r2,r2,63
 4002f20:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4002f24:	00001906 	br	4002f8c <altera_avalon_uart_read+0xb8>
    {
      count++;
 4002f28:	e0bff417 	ldw	r2,-48(fp)
 4002f2c:	10800044 	addi	r2,r2,1
 4002f30:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 4002f34:	e0bffc17 	ldw	r2,-16(fp)
 4002f38:	10800217 	ldw	r2,8(r2)
 4002f3c:	e0fffc17 	ldw	r3,-16(fp)
 4002f40:	1885883a 	add	r2,r3,r2
 4002f44:	10800704 	addi	r2,r2,28
 4002f48:	10800003 	ldbu	r2,0(r2)
 4002f4c:	1007883a 	mov	r3,r2
 4002f50:	e0bffd17 	ldw	r2,-12(fp)
 4002f54:	10c00005 	stb	r3,0(r2)
 4002f58:	e0bffd17 	ldw	r2,-12(fp)
 4002f5c:	10800044 	addi	r2,r2,1
 4002f60:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 4002f64:	e0bffc17 	ldw	r2,-16(fp)
 4002f68:	10800217 	ldw	r2,8(r2)
 4002f6c:	10c00044 	addi	r3,r2,1
 4002f70:	e0bffc17 	ldw	r2,-16(fp)
 4002f74:	10c00215 	stw	r3,8(r2)
 4002f78:	e0bffc17 	ldw	r2,-16(fp)
 4002f7c:	10800217 	ldw	r2,8(r2)
 4002f80:	10c00fcc 	andi	r3,r2,63
 4002f84:	e0bffc17 	ldw	r2,-16(fp)
 4002f88:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4002f8c:	e0fff417 	ldw	r3,-48(fp)
 4002f90:	e0bffe17 	ldw	r2,-8(fp)
 4002f94:	1880050e 	bge	r3,r2,4002fac <altera_avalon_uart_read+0xd8>
 4002f98:	e0bffc17 	ldw	r2,-16(fp)
 4002f9c:	10c00217 	ldw	r3,8(r2)
 4002fa0:	e0bffc17 	ldw	r2,-16(fp)
 4002fa4:	10800317 	ldw	r2,12(r2)
 4002fa8:	18bfdf1e 	bne	r3,r2,4002f28 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4002fac:	e0bff417 	ldw	r2,-48(fp)
 4002fb0:	1000241e 	bne	r2,zero,4003044 <altera_avalon_uart_read+0x170>
 4002fb4:	e0bffc17 	ldw	r2,-16(fp)
 4002fb8:	10c00217 	ldw	r3,8(r2)
 4002fbc:	e0bffc17 	ldw	r2,-16(fp)
 4002fc0:	10800317 	ldw	r2,12(r2)
 4002fc4:	18801f1e 	bne	r3,r2,4003044 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 4002fc8:	e0bff517 	ldw	r2,-44(fp)
 4002fcc:	1000061e 	bne	r2,zero,4002fe8 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 4002fd0:	4002e840 	call	4002e84 <alt_get_errno>
 4002fd4:	00c002c4 	movi	r3,11
 4002fd8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 4002fdc:	00800044 	movi	r2,1
 4002fe0:	e0bff305 	stb	r2,-52(fp)
        break;
 4002fe4:	00001b06 	br	4003054 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002fe8:	0005303a 	rdctl	r2,status
 4002fec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002ff0:	e0fff817 	ldw	r3,-32(fp)
 4002ff4:	00bfff84 	movi	r2,-2
 4002ff8:	1884703a 	and	r2,r3,r2
 4002ffc:	1001703a 	wrctl	status,r2
  
  return context;
 4003000:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 4003004:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4003008:	e0bffc17 	ldw	r2,-16(fp)
 400300c:	10800117 	ldw	r2,4(r2)
 4003010:	10c02014 	ori	r3,r2,128
 4003014:	e0bffc17 	ldw	r2,-16(fp)
 4003018:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400301c:	e0bffc17 	ldw	r2,-16(fp)
 4003020:	10800017 	ldw	r2,0(r2)
 4003024:	10800304 	addi	r2,r2,12
 4003028:	e0fffc17 	ldw	r3,-16(fp)
 400302c:	18c00117 	ldw	r3,4(r3)
 4003030:	10c00035 	stwio	r3,0(r2)
 4003034:	e0bff717 	ldw	r2,-36(fp)
 4003038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400303c:	e0bff917 	ldw	r2,-28(fp)
 4003040:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 4003044:	e0bff417 	ldw	r2,-48(fp)
 4003048:	1000021e 	bne	r2,zero,4003054 <altera_avalon_uart_read+0x180>
 400304c:	e0bffe17 	ldw	r2,-8(fp)
 4003050:	103fce1e 	bne	r2,zero,4002f8c <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003054:	0005303a 	rdctl	r2,status
 4003058:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400305c:	e0fffa17 	ldw	r3,-24(fp)
 4003060:	00bfff84 	movi	r2,-2
 4003064:	1884703a 	and	r2,r3,r2
 4003068:	1001703a 	wrctl	status,r2
  
  return context;
 400306c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 4003070:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4003074:	e0bffc17 	ldw	r2,-16(fp)
 4003078:	10800117 	ldw	r2,4(r2)
 400307c:	10c02014 	ori	r3,r2,128
 4003080:	e0bffc17 	ldw	r2,-16(fp)
 4003084:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4003088:	e0bffc17 	ldw	r2,-16(fp)
 400308c:	10800017 	ldw	r2,0(r2)
 4003090:	10800304 	addi	r2,r2,12
 4003094:	e0fffc17 	ldw	r3,-16(fp)
 4003098:	18c00117 	ldw	r3,4(r3)
 400309c:	10c00035 	stwio	r3,0(r2)
 40030a0:	e0bff717 	ldw	r2,-36(fp)
 40030a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40030a8:	e0bffb17 	ldw	r2,-20(fp)
 40030ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 40030b0:	e0bff303 	ldbu	r2,-52(fp)
 40030b4:	10000226 	beq	r2,zero,40030c0 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 40030b8:	00bffd44 	movi	r2,-11
 40030bc:	00000106 	br	40030c4 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 40030c0:	e0bff417 	ldw	r2,-48(fp)
  }
}
 40030c4:	e037883a 	mov	sp,fp
 40030c8:	dfc00117 	ldw	ra,4(sp)
 40030cc:	df000017 	ldw	fp,0(sp)
 40030d0:	dec00204 	addi	sp,sp,8
 40030d4:	f800283a 	ret

040030d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40030d8:	defffe04 	addi	sp,sp,-8
 40030dc:	dfc00115 	stw	ra,4(sp)
 40030e0:	df000015 	stw	fp,0(sp)
 40030e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40030e8:	00810034 	movhi	r2,1024
 40030ec:	10981d04 	addi	r2,r2,24692
 40030f0:	10800017 	ldw	r2,0(r2)
 40030f4:	10000526 	beq	r2,zero,400310c <alt_get_errno+0x34>
 40030f8:	00810034 	movhi	r2,1024
 40030fc:	10981d04 	addi	r2,r2,24692
 4003100:	10800017 	ldw	r2,0(r2)
 4003104:	103ee83a 	callr	r2
 4003108:	00000206 	br	4003114 <alt_get_errno+0x3c>
 400310c:	00810034 	movhi	r2,1024
 4003110:	109e0d04 	addi	r2,r2,30772
}
 4003114:	e037883a 	mov	sp,fp
 4003118:	dfc00117 	ldw	ra,4(sp)
 400311c:	df000017 	ldw	fp,0(sp)
 4003120:	dec00204 	addi	sp,sp,8
 4003124:	f800283a 	ret

04003128 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4003128:	defff204 	addi	sp,sp,-56
 400312c:	dfc00d15 	stw	ra,52(sp)
 4003130:	df000c15 	stw	fp,48(sp)
 4003134:	df000c04 	addi	fp,sp,48
 4003138:	e13ffc15 	stw	r4,-16(fp)
 400313c:	e17ffd15 	stw	r5,-12(fp)
 4003140:	e1bffe15 	stw	r6,-8(fp)
 4003144:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4003148:	e0bffe17 	ldw	r2,-8(fp)
 400314c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4003150:	e0bfff17 	ldw	r2,-4(fp)
 4003154:	1090000c 	andi	r2,r2,16384
 4003158:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400315c:	00003b06 	br	400324c <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4003160:	e0bffc17 	ldw	r2,-16(fp)
 4003164:	10800517 	ldw	r2,20(r2)
 4003168:	10800044 	addi	r2,r2,1
 400316c:	10800fcc 	andi	r2,r2,63
 4003170:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4003174:	e0bffc17 	ldw	r2,-16(fp)
 4003178:	10c00417 	ldw	r3,16(r2)
 400317c:	e0bff617 	ldw	r2,-40(fp)
 4003180:	1880211e 	bne	r3,r2,4003208 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 4003184:	e0bff517 	ldw	r2,-44(fp)
 4003188:	10000426 	beq	r2,zero,400319c <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 400318c:	40030d80 	call	40030d8 <alt_get_errno>
 4003190:	00c002c4 	movi	r3,11
 4003194:	10c00015 	stw	r3,0(r2)
        break;
 4003198:	00002e06 	br	4003254 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400319c:	0005303a 	rdctl	r2,status
 40031a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40031a4:	e0fff817 	ldw	r3,-32(fp)
 40031a8:	00bfff84 	movi	r2,-2
 40031ac:	1884703a 	and	r2,r3,r2
 40031b0:	1001703a 	wrctl	status,r2
  
  return context;
 40031b4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 40031b8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40031bc:	e0bffc17 	ldw	r2,-16(fp)
 40031c0:	10800117 	ldw	r2,4(r2)
 40031c4:	10c11014 	ori	r3,r2,1088
 40031c8:	e0bffc17 	ldw	r2,-16(fp)
 40031cc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40031d0:	e0bffc17 	ldw	r2,-16(fp)
 40031d4:	10800017 	ldw	r2,0(r2)
 40031d8:	10800304 	addi	r2,r2,12
 40031dc:	e0fffc17 	ldw	r3,-16(fp)
 40031e0:	18c00117 	ldw	r3,4(r3)
 40031e4:	10c00035 	stwio	r3,0(r2)
 40031e8:	e0bff717 	ldw	r2,-36(fp)
 40031ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40031f0:	e0bff917 	ldw	r2,-28(fp)
 40031f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 40031f8:	e0bffc17 	ldw	r2,-16(fp)
 40031fc:	10c00417 	ldw	r3,16(r2)
 4003200:	e0bff617 	ldw	r2,-40(fp)
 4003204:	18bffc26 	beq	r3,r2,40031f8 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 4003208:	e0bff417 	ldw	r2,-48(fp)
 400320c:	10bfffc4 	addi	r2,r2,-1
 4003210:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4003214:	e0bffc17 	ldw	r2,-16(fp)
 4003218:	10800517 	ldw	r2,20(r2)
 400321c:	e0fffd17 	ldw	r3,-12(fp)
 4003220:	18c00003 	ldbu	r3,0(r3)
 4003224:	e13ffc17 	ldw	r4,-16(fp)
 4003228:	2085883a 	add	r2,r4,r2
 400322c:	10801704 	addi	r2,r2,92
 4003230:	10c00005 	stb	r3,0(r2)
 4003234:	e0bffd17 	ldw	r2,-12(fp)
 4003238:	10800044 	addi	r2,r2,1
 400323c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 4003240:	e0bffc17 	ldw	r2,-16(fp)
 4003244:	e0fff617 	ldw	r3,-40(fp)
 4003248:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400324c:	e0bff417 	ldw	r2,-48(fp)
 4003250:	103fc31e 	bne	r2,zero,4003160 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003254:	0005303a 	rdctl	r2,status
 4003258:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400325c:	e0fffa17 	ldw	r3,-24(fp)
 4003260:	00bfff84 	movi	r2,-2
 4003264:	1884703a 	and	r2,r3,r2
 4003268:	1001703a 	wrctl	status,r2
  
  return context;
 400326c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4003270:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4003274:	e0bffc17 	ldw	r2,-16(fp)
 4003278:	10800117 	ldw	r2,4(r2)
 400327c:	10c11014 	ori	r3,r2,1088
 4003280:	e0bffc17 	ldw	r2,-16(fp)
 4003284:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4003288:	e0bffc17 	ldw	r2,-16(fp)
 400328c:	10800017 	ldw	r2,0(r2)
 4003290:	10800304 	addi	r2,r2,12
 4003294:	e0fffc17 	ldw	r3,-16(fp)
 4003298:	18c00117 	ldw	r3,4(r3)
 400329c:	10c00035 	stwio	r3,0(r2)
 40032a0:	e0bff717 	ldw	r2,-36(fp)
 40032a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40032a8:	e0bffb17 	ldw	r2,-20(fp)
 40032ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40032b0:	e0fffe17 	ldw	r3,-8(fp)
 40032b4:	e0bff417 	ldw	r2,-48(fp)
 40032b8:	1885c83a 	sub	r2,r3,r2
}
 40032bc:	e037883a 	mov	sp,fp
 40032c0:	dfc00117 	ldw	ra,4(sp)
 40032c4:	df000017 	ldw	fp,0(sp)
 40032c8:	dec00204 	addi	sp,sp,8
 40032cc:	f800283a 	ret

040032d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40032d0:	defff504 	addi	sp,sp,-44
 40032d4:	df000a15 	stw	fp,40(sp)
 40032d8:	df000a04 	addi	fp,sp,40
 40032dc:	e13ffc15 	stw	r4,-16(fp)
 40032e0:	e17ffd15 	stw	r5,-12(fp)
 40032e4:	e1bffe15 	stw	r6,-8(fp)
 40032e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40032ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40032f0:	00810034 	movhi	r2,1024
 40032f4:	109e0b04 	addi	r2,r2,30764
 40032f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 40032fc:	10003f26 	beq	r2,zero,40033fc <alt_alarm_start+0x12c>
  {
    if (alarm)
 4003300:	e0bffc17 	ldw	r2,-16(fp)
 4003304:	10003b26 	beq	r2,zero,40033f4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4003308:	e0bffc17 	ldw	r2,-16(fp)
 400330c:	e0fffe17 	ldw	r3,-8(fp)
 4003310:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4003314:	e0bffc17 	ldw	r2,-16(fp)
 4003318:	e0ffff17 	ldw	r3,-4(fp)
 400331c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003320:	0005303a 	rdctl	r2,status
 4003324:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003328:	e0fff817 	ldw	r3,-32(fp)
 400332c:	00bfff84 	movi	r2,-2
 4003330:	1884703a 	and	r2,r3,r2
 4003334:	1001703a 	wrctl	status,r2
  
  return context;
 4003338:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400333c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4003340:	00810034 	movhi	r2,1024
 4003344:	109e0c04 	addi	r2,r2,30768
 4003348:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400334c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4003350:	e0fffd17 	ldw	r3,-12(fp)
 4003354:	e0bff617 	ldw	r2,-40(fp)
 4003358:	1885883a 	add	r2,r3,r2
 400335c:	10c00044 	addi	r3,r2,1
 4003360:	e0bffc17 	ldw	r2,-16(fp)
 4003364:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4003368:	e0bffc17 	ldw	r2,-16(fp)
 400336c:	10c00217 	ldw	r3,8(r2)
 4003370:	e0bff617 	ldw	r2,-40(fp)
 4003374:	1880042e 	bgeu	r3,r2,4003388 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4003378:	e0bffc17 	ldw	r2,-16(fp)
 400337c:	00c00044 	movi	r3,1
 4003380:	10c00405 	stb	r3,16(r2)
 4003384:	00000206 	br	4003390 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4003388:	e0bffc17 	ldw	r2,-16(fp)
 400338c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4003390:	e0bffc17 	ldw	r2,-16(fp)
 4003394:	00c10034 	movhi	r3,1024
 4003398:	18d81f04 	addi	r3,r3,24700
 400339c:	e0fff915 	stw	r3,-28(fp)
 40033a0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40033a4:	e0bffa17 	ldw	r2,-24(fp)
 40033a8:	e0fff917 	ldw	r3,-28(fp)
 40033ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40033b0:	e0bff917 	ldw	r2,-28(fp)
 40033b4:	10c00017 	ldw	r3,0(r2)
 40033b8:	e0bffa17 	ldw	r2,-24(fp)
 40033bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40033c0:	e0bff917 	ldw	r2,-28(fp)
 40033c4:	10800017 	ldw	r2,0(r2)
 40033c8:	e0fffa17 	ldw	r3,-24(fp)
 40033cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40033d0:	e0bff917 	ldw	r2,-28(fp)
 40033d4:	e0fffa17 	ldw	r3,-24(fp)
 40033d8:	10c00015 	stw	r3,0(r2)
 40033dc:	e0bff717 	ldw	r2,-36(fp)
 40033e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40033e4:	e0bffb17 	ldw	r2,-20(fp)
 40033e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40033ec:	0005883a 	mov	r2,zero
 40033f0:	00000306 	br	4003400 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 40033f4:	00bffa84 	movi	r2,-22
 40033f8:	00000106 	br	4003400 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 40033fc:	00bfde84 	movi	r2,-134
  }
}
 4003400:	e037883a 	mov	sp,fp
 4003404:	df000017 	ldw	fp,0(sp)
 4003408:	dec00104 	addi	sp,sp,4
 400340c:	f800283a 	ret

04003410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003410:	defffe04 	addi	sp,sp,-8
 4003414:	dfc00115 	stw	ra,4(sp)
 4003418:	df000015 	stw	fp,0(sp)
 400341c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003420:	00810034 	movhi	r2,1024
 4003424:	10981d04 	addi	r2,r2,24692
 4003428:	10800017 	ldw	r2,0(r2)
 400342c:	10000526 	beq	r2,zero,4003444 <alt_get_errno+0x34>
 4003430:	00810034 	movhi	r2,1024
 4003434:	10981d04 	addi	r2,r2,24692
 4003438:	10800017 	ldw	r2,0(r2)
 400343c:	103ee83a 	callr	r2
 4003440:	00000206 	br	400344c <alt_get_errno+0x3c>
 4003444:	00810034 	movhi	r2,1024
 4003448:	109e0d04 	addi	r2,r2,30772
}
 400344c:	e037883a 	mov	sp,fp
 4003450:	dfc00117 	ldw	ra,4(sp)
 4003454:	df000017 	ldw	fp,0(sp)
 4003458:	dec00204 	addi	sp,sp,8
 400345c:	f800283a 	ret

04003460 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4003460:	defffb04 	addi	sp,sp,-20
 4003464:	dfc00415 	stw	ra,16(sp)
 4003468:	df000315 	stw	fp,12(sp)
 400346c:	df000304 	addi	fp,sp,12
 4003470:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4003474:	e0bfff17 	ldw	r2,-4(fp)
 4003478:	10000616 	blt	r2,zero,4003494 <close+0x34>
 400347c:	e0bfff17 	ldw	r2,-4(fp)
 4003480:	10c00324 	muli	r3,r2,12
 4003484:	00810034 	movhi	r2,1024
 4003488:	1096b504 	addi	r2,r2,23252
 400348c:	1885883a 	add	r2,r3,r2
 4003490:	00000106 	br	4003498 <close+0x38>
 4003494:	0005883a 	mov	r2,zero
 4003498:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400349c:	e0bffd17 	ldw	r2,-12(fp)
 40034a0:	10001826 	beq	r2,zero,4003504 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40034a4:	e0bffd17 	ldw	r2,-12(fp)
 40034a8:	10800017 	ldw	r2,0(r2)
 40034ac:	10800417 	ldw	r2,16(r2)
 40034b0:	10000626 	beq	r2,zero,40034cc <close+0x6c>
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	10800017 	ldw	r2,0(r2)
 40034bc:	10800417 	ldw	r2,16(r2)
 40034c0:	e13ffd17 	ldw	r4,-12(fp)
 40034c4:	103ee83a 	callr	r2
 40034c8:	00000106 	br	40034d0 <close+0x70>
 40034cc:	0005883a 	mov	r2,zero
 40034d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40034d4:	e13fff17 	ldw	r4,-4(fp)
 40034d8:	4003de00 	call	4003de0 <alt_release_fd>
    if (rval < 0)
 40034dc:	e0bffe17 	ldw	r2,-8(fp)
 40034e0:	1000060e 	bge	r2,zero,40034fc <close+0x9c>
    {
      ALT_ERRNO = -rval;
 40034e4:	40034100 	call	4003410 <alt_get_errno>
 40034e8:	e0fffe17 	ldw	r3,-8(fp)
 40034ec:	00c7c83a 	sub	r3,zero,r3
 40034f0:	10c00015 	stw	r3,0(r2)
      return -1;
 40034f4:	00bfffc4 	movi	r2,-1
 40034f8:	00000606 	br	4003514 <close+0xb4>
    }
    return 0;
 40034fc:	0005883a 	mov	r2,zero
 4003500:	00000406 	br	4003514 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003504:	40034100 	call	4003410 <alt_get_errno>
 4003508:	00c01444 	movi	r3,81
 400350c:	10c00015 	stw	r3,0(r2)
    return -1;
 4003510:	00bfffc4 	movi	r2,-1
  }
}
 4003514:	e037883a 	mov	sp,fp
 4003518:	dfc00117 	ldw	ra,4(sp)
 400351c:	df000017 	ldw	fp,0(sp)
 4003520:	dec00204 	addi	sp,sp,8
 4003524:	f800283a 	ret

04003528 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4003528:	defffe04 	addi	sp,sp,-8
 400352c:	df000115 	stw	fp,4(sp)
 4003530:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4003534:	e03fff15 	stw	zero,-4(fp)
 4003538:	00000506 	br	4003550 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400353c:	e0bfff17 	ldw	r2,-4(fp)
 4003540:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4003544:	e0bfff17 	ldw	r2,-4(fp)
 4003548:	10800804 	addi	r2,r2,32
 400354c:	e0bfff15 	stw	r2,-4(fp)
 4003550:	e0bfff17 	ldw	r2,-4(fp)
 4003554:	10820030 	cmpltui	r2,r2,2048
 4003558:	103ff81e 	bne	r2,zero,400353c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400355c:	e037883a 	mov	sp,fp
 4003560:	df000017 	ldw	fp,0(sp)
 4003564:	dec00104 	addi	sp,sp,4
 4003568:	f800283a 	ret

0400356c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400356c:	defffc04 	addi	sp,sp,-16
 4003570:	df000315 	stw	fp,12(sp)
 4003574:	df000304 	addi	fp,sp,12
 4003578:	e13ffd15 	stw	r4,-12(fp)
 400357c:	e17ffe15 	stw	r5,-8(fp)
 4003580:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003584:	e0bfff17 	ldw	r2,-4(fp)
}
 4003588:	e037883a 	mov	sp,fp
 400358c:	df000017 	ldw	fp,0(sp)
 4003590:	dec00104 	addi	sp,sp,4
 4003594:	f800283a 	ret

04003598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003598:	defffe04 	addi	sp,sp,-8
 400359c:	dfc00115 	stw	ra,4(sp)
 40035a0:	df000015 	stw	fp,0(sp)
 40035a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40035a8:	00810034 	movhi	r2,1024
 40035ac:	10981d04 	addi	r2,r2,24692
 40035b0:	10800017 	ldw	r2,0(r2)
 40035b4:	10000526 	beq	r2,zero,40035cc <alt_get_errno+0x34>
 40035b8:	00810034 	movhi	r2,1024
 40035bc:	10981d04 	addi	r2,r2,24692
 40035c0:	10800017 	ldw	r2,0(r2)
 40035c4:	103ee83a 	callr	r2
 40035c8:	00000206 	br	40035d4 <alt_get_errno+0x3c>
 40035cc:	00810034 	movhi	r2,1024
 40035d0:	109e0d04 	addi	r2,r2,30772
}
 40035d4:	e037883a 	mov	sp,fp
 40035d8:	dfc00117 	ldw	ra,4(sp)
 40035dc:	df000017 	ldw	fp,0(sp)
 40035e0:	dec00204 	addi	sp,sp,8
 40035e4:	f800283a 	ret

040035e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40035e8:	defffa04 	addi	sp,sp,-24
 40035ec:	dfc00515 	stw	ra,20(sp)
 40035f0:	df000415 	stw	fp,16(sp)
 40035f4:	df000404 	addi	fp,sp,16
 40035f8:	e13ffe15 	stw	r4,-8(fp)
 40035fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4003600:	e0bffe17 	ldw	r2,-8(fp)
 4003604:	10000326 	beq	r2,zero,4003614 <alt_dev_llist_insert+0x2c>
 4003608:	e0bffe17 	ldw	r2,-8(fp)
 400360c:	10800217 	ldw	r2,8(r2)
 4003610:	1000051e 	bne	r2,zero,4003628 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 4003614:	40035980 	call	4003598 <alt_get_errno>
 4003618:	00c00584 	movi	r3,22
 400361c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4003620:	00bffa84 	movi	r2,-22
 4003624:	00001306 	br	4003674 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4003628:	e0bffe17 	ldw	r2,-8(fp)
 400362c:	e0ffff17 	ldw	r3,-4(fp)
 4003630:	e0fffc15 	stw	r3,-16(fp)
 4003634:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4003638:	e0bffd17 	ldw	r2,-12(fp)
 400363c:	e0fffc17 	ldw	r3,-16(fp)
 4003640:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4003644:	e0bffc17 	ldw	r2,-16(fp)
 4003648:	10c00017 	ldw	r3,0(r2)
 400364c:	e0bffd17 	ldw	r2,-12(fp)
 4003650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4003654:	e0bffc17 	ldw	r2,-16(fp)
 4003658:	10800017 	ldw	r2,0(r2)
 400365c:	e0fffd17 	ldw	r3,-12(fp)
 4003660:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4003664:	e0bffc17 	ldw	r2,-16(fp)
 4003668:	e0fffd17 	ldw	r3,-12(fp)
 400366c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4003670:	0005883a 	mov	r2,zero
}
 4003674:	e037883a 	mov	sp,fp
 4003678:	dfc00117 	ldw	ra,4(sp)
 400367c:	df000017 	ldw	fp,0(sp)
 4003680:	dec00204 	addi	sp,sp,8
 4003684:	f800283a 	ret

04003688 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4003688:	defffd04 	addi	sp,sp,-12
 400368c:	dfc00215 	stw	ra,8(sp)
 4003690:	df000115 	stw	fp,4(sp)
 4003694:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4003698:	00810034 	movhi	r2,1024
 400369c:	10920d04 	addi	r2,r2,18484
 40036a0:	e0bfff15 	stw	r2,-4(fp)
 40036a4:	00000606 	br	40036c0 <_do_ctors+0x38>
        (*ctor) (); 
 40036a8:	e0bfff17 	ldw	r2,-4(fp)
 40036ac:	10800017 	ldw	r2,0(r2)
 40036b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40036b4:	e0bfff17 	ldw	r2,-4(fp)
 40036b8:	10bfff04 	addi	r2,r2,-4
 40036bc:	e0bfff15 	stw	r2,-4(fp)
 40036c0:	e0ffff17 	ldw	r3,-4(fp)
 40036c4:	00810034 	movhi	r2,1024
 40036c8:	10920e04 	addi	r2,r2,18488
 40036cc:	18bff62e 	bgeu	r3,r2,40036a8 <_do_ctors+0x20>
        (*ctor) (); 
}
 40036d0:	e037883a 	mov	sp,fp
 40036d4:	dfc00117 	ldw	ra,4(sp)
 40036d8:	df000017 	ldw	fp,0(sp)
 40036dc:	dec00204 	addi	sp,sp,8
 40036e0:	f800283a 	ret

040036e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40036e4:	defffd04 	addi	sp,sp,-12
 40036e8:	dfc00215 	stw	ra,8(sp)
 40036ec:	df000115 	stw	fp,4(sp)
 40036f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40036f4:	00810034 	movhi	r2,1024
 40036f8:	10920d04 	addi	r2,r2,18484
 40036fc:	e0bfff15 	stw	r2,-4(fp)
 4003700:	00000606 	br	400371c <_do_dtors+0x38>
        (*dtor) (); 
 4003704:	e0bfff17 	ldw	r2,-4(fp)
 4003708:	10800017 	ldw	r2,0(r2)
 400370c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4003710:	e0bfff17 	ldw	r2,-4(fp)
 4003714:	10bfff04 	addi	r2,r2,-4
 4003718:	e0bfff15 	stw	r2,-4(fp)
 400371c:	e0ffff17 	ldw	r3,-4(fp)
 4003720:	00810034 	movhi	r2,1024
 4003724:	10920e04 	addi	r2,r2,18488
 4003728:	18bff62e 	bgeu	r3,r2,4003704 <_do_dtors+0x20>
        (*dtor) (); 
}
 400372c:	e037883a 	mov	sp,fp
 4003730:	dfc00117 	ldw	ra,4(sp)
 4003734:	df000017 	ldw	fp,0(sp)
 4003738:	dec00204 	addi	sp,sp,8
 400373c:	f800283a 	ret

04003740 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4003740:	defffe04 	addi	sp,sp,-8
 4003744:	dfc00115 	stw	ra,4(sp)
 4003748:	df000015 	stw	fp,0(sp)
 400374c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4003750:	0009883a 	mov	r4,zero
 4003754:	01440004 	movi	r5,4096
 4003758:	40042540 	call	4004254 <alt_icache_flush>
#endif
}
 400375c:	e037883a 	mov	sp,fp
 4003760:	dfc00117 	ldw	ra,4(sp)
 4003764:	df000017 	ldw	fp,0(sp)
 4003768:	dec00204 	addi	sp,sp,8
 400376c:	f800283a 	ret

04003770 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4003770:	defff904 	addi	sp,sp,-28
 4003774:	dfc00615 	stw	ra,24(sp)
 4003778:	df000515 	stw	fp,20(sp)
 400377c:	df000504 	addi	fp,sp,20
 4003780:	e13ffc15 	stw	r4,-16(fp)
 4003784:	e17ffd15 	stw	r5,-12(fp)
 4003788:	e1bffe15 	stw	r6,-8(fp)
 400378c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4003790:	e0800217 	ldw	r2,8(fp)
 4003794:	d8800015 	stw	r2,0(sp)
 4003798:	e13ffc17 	ldw	r4,-16(fp)
 400379c:	e17ffd17 	ldw	r5,-12(fp)
 40037a0:	e1bffe17 	ldw	r6,-8(fp)
 40037a4:	e1ffff17 	ldw	r7,-4(fp)
 40037a8:	40039480 	call	4003948 <alt_iic_isr_register>
}  
 40037ac:	e037883a 	mov	sp,fp
 40037b0:	dfc00117 	ldw	ra,4(sp)
 40037b4:	df000017 	ldw	fp,0(sp)
 40037b8:	dec00204 	addi	sp,sp,8
 40037bc:	f800283a 	ret

040037c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40037c0:	defff904 	addi	sp,sp,-28
 40037c4:	df000615 	stw	fp,24(sp)
 40037c8:	df000604 	addi	fp,sp,24
 40037cc:	e13ffe15 	stw	r4,-8(fp)
 40037d0:	e17fff15 	stw	r5,-4(fp)
 40037d4:	e0bfff17 	ldw	r2,-4(fp)
 40037d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40037dc:	0005303a 	rdctl	r2,status
 40037e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40037e4:	e0fffb17 	ldw	r3,-20(fp)
 40037e8:	00bfff84 	movi	r2,-2
 40037ec:	1884703a 	and	r2,r3,r2
 40037f0:	1001703a 	wrctl	status,r2
  
  return context;
 40037f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40037f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40037fc:	e0bffa17 	ldw	r2,-24(fp)
 4003800:	00c00044 	movi	r3,1
 4003804:	1884983a 	sll	r2,r3,r2
 4003808:	1007883a 	mov	r3,r2
 400380c:	00810034 	movhi	r2,1024
 4003810:	109e0a04 	addi	r2,r2,30760
 4003814:	10800017 	ldw	r2,0(r2)
 4003818:	1886b03a 	or	r3,r3,r2
 400381c:	00810034 	movhi	r2,1024
 4003820:	109e0a04 	addi	r2,r2,30760
 4003824:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4003828:	00810034 	movhi	r2,1024
 400382c:	109e0a04 	addi	r2,r2,30760
 4003830:	10800017 	ldw	r2,0(r2)
 4003834:	100170fa 	wrctl	ienable,r2
 4003838:	e0bffc17 	ldw	r2,-16(fp)
 400383c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003840:	e0bffd17 	ldw	r2,-12(fp)
 4003844:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4003848:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 400384c:	e037883a 	mov	sp,fp
 4003850:	df000017 	ldw	fp,0(sp)
 4003854:	dec00104 	addi	sp,sp,4
 4003858:	f800283a 	ret

0400385c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400385c:	defff904 	addi	sp,sp,-28
 4003860:	df000615 	stw	fp,24(sp)
 4003864:	df000604 	addi	fp,sp,24
 4003868:	e13ffe15 	stw	r4,-8(fp)
 400386c:	e17fff15 	stw	r5,-4(fp)
 4003870:	e0bfff17 	ldw	r2,-4(fp)
 4003874:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003878:	0005303a 	rdctl	r2,status
 400387c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003880:	e0fffb17 	ldw	r3,-20(fp)
 4003884:	00bfff84 	movi	r2,-2
 4003888:	1884703a 	and	r2,r3,r2
 400388c:	1001703a 	wrctl	status,r2
  
  return context;
 4003890:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4003894:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4003898:	e0bffa17 	ldw	r2,-24(fp)
 400389c:	00c00044 	movi	r3,1
 40038a0:	1884983a 	sll	r2,r3,r2
 40038a4:	0084303a 	nor	r2,zero,r2
 40038a8:	1007883a 	mov	r3,r2
 40038ac:	00810034 	movhi	r2,1024
 40038b0:	109e0a04 	addi	r2,r2,30760
 40038b4:	10800017 	ldw	r2,0(r2)
 40038b8:	1886703a 	and	r3,r3,r2
 40038bc:	00810034 	movhi	r2,1024
 40038c0:	109e0a04 	addi	r2,r2,30760
 40038c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40038c8:	00810034 	movhi	r2,1024
 40038cc:	109e0a04 	addi	r2,r2,30760
 40038d0:	10800017 	ldw	r2,0(r2)
 40038d4:	100170fa 	wrctl	ienable,r2
 40038d8:	e0bffc17 	ldw	r2,-16(fp)
 40038dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40038e0:	e0bffd17 	ldw	r2,-12(fp)
 40038e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40038e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 40038ec:	e037883a 	mov	sp,fp
 40038f0:	df000017 	ldw	fp,0(sp)
 40038f4:	dec00104 	addi	sp,sp,4
 40038f8:	f800283a 	ret

040038fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40038fc:	defffc04 	addi	sp,sp,-16
 4003900:	df000315 	stw	fp,12(sp)
 4003904:	df000304 	addi	fp,sp,12
 4003908:	e13ffe15 	stw	r4,-8(fp)
 400390c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4003910:	000530fa 	rdctl	r2,ienable
 4003914:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4003918:	e0bfff17 	ldw	r2,-4(fp)
 400391c:	00c00044 	movi	r3,1
 4003920:	1884983a 	sll	r2,r3,r2
 4003924:	1007883a 	mov	r3,r2
 4003928:	e0bffd17 	ldw	r2,-12(fp)
 400392c:	1884703a 	and	r2,r3,r2
 4003930:	1004c03a 	cmpne	r2,r2,zero
 4003934:	10803fcc 	andi	r2,r2,255
}
 4003938:	e037883a 	mov	sp,fp
 400393c:	df000017 	ldw	fp,0(sp)
 4003940:	dec00104 	addi	sp,sp,4
 4003944:	f800283a 	ret

04003948 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4003948:	defff504 	addi	sp,sp,-44
 400394c:	dfc00a15 	stw	ra,40(sp)
 4003950:	df000915 	stw	fp,36(sp)
 4003954:	df000904 	addi	fp,sp,36
 4003958:	e13ffc15 	stw	r4,-16(fp)
 400395c:	e17ffd15 	stw	r5,-12(fp)
 4003960:	e1bffe15 	stw	r6,-8(fp)
 4003964:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4003968:	00bffa84 	movi	r2,-22
 400396c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4003970:	e0bffd17 	ldw	r2,-12(fp)
 4003974:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4003978:	e0bff817 	ldw	r2,-32(fp)
 400397c:	10800808 	cmpgei	r2,r2,32
 4003980:	1000271e 	bne	r2,zero,4003a20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003984:	0005303a 	rdctl	r2,status
 4003988:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400398c:	e0fffa17 	ldw	r3,-24(fp)
 4003990:	00bfff84 	movi	r2,-2
 4003994:	1884703a 	and	r2,r3,r2
 4003998:	1001703a 	wrctl	status,r2
  
  return context;
 400399c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40039a0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 40039a4:	00c10034 	movhi	r3,1024
 40039a8:	18de0e04 	addi	r3,r3,30776
 40039ac:	e0bff817 	ldw	r2,-32(fp)
 40039b0:	100490fa 	slli	r2,r2,3
 40039b4:	1885883a 	add	r2,r3,r2
 40039b8:	e0fffe17 	ldw	r3,-8(fp)
 40039bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40039c0:	00c10034 	movhi	r3,1024
 40039c4:	18de0e04 	addi	r3,r3,30776
 40039c8:	e0bff817 	ldw	r2,-32(fp)
 40039cc:	100490fa 	slli	r2,r2,3
 40039d0:	1885883a 	add	r2,r3,r2
 40039d4:	10800104 	addi	r2,r2,4
 40039d8:	e0ffff17 	ldw	r3,-4(fp)
 40039dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40039e0:	e0bffe17 	ldw	r2,-8(fp)
 40039e4:	10000526 	beq	r2,zero,40039fc <alt_iic_isr_register+0xb4>
 40039e8:	e0bff817 	ldw	r2,-32(fp)
 40039ec:	e13ffc17 	ldw	r4,-16(fp)
 40039f0:	100b883a 	mov	r5,r2
 40039f4:	40037c00 	call	40037c0 <alt_ic_irq_enable>
 40039f8:	00000406 	br	4003a0c <alt_iic_isr_register+0xc4>
 40039fc:	e0bff817 	ldw	r2,-32(fp)
 4003a00:	e13ffc17 	ldw	r4,-16(fp)
 4003a04:	100b883a 	mov	r5,r2
 4003a08:	400385c0 	call	400385c <alt_ic_irq_disable>
 4003a0c:	e0bff715 	stw	r2,-36(fp)
 4003a10:	e0bff917 	ldw	r2,-28(fp)
 4003a14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003a18:	e0bffb17 	ldw	r2,-20(fp)
 4003a1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4003a20:	e0bff717 	ldw	r2,-36(fp)
}
 4003a24:	e037883a 	mov	sp,fp
 4003a28:	dfc00117 	ldw	ra,4(sp)
 4003a2c:	df000017 	ldw	fp,0(sp)
 4003a30:	dec00204 	addi	sp,sp,8
 4003a34:	f800283a 	ret

04003a38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4003a38:	defff904 	addi	sp,sp,-28
 4003a3c:	dfc00615 	stw	ra,24(sp)
 4003a40:	df000515 	stw	fp,20(sp)
 4003a44:	df000504 	addi	fp,sp,20
 4003a48:	e13ffc15 	stw	r4,-16(fp)
 4003a4c:	e17ffd15 	stw	r5,-12(fp)
 4003a50:	e1bffe15 	stw	r6,-8(fp)
 4003a54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4003a58:	e13ffd17 	ldw	r4,-12(fp)
 4003a5c:	e17ffe17 	ldw	r5,-8(fp)
 4003a60:	e1bfff17 	ldw	r6,-4(fp)
 4003a64:	4003c8c0 	call	4003c8c <open>
 4003a68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4003a6c:	e0bffb17 	ldw	r2,-20(fp)
 4003a70:	10001c16 	blt	r2,zero,4003ae4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4003a74:	00c10034 	movhi	r3,1024
 4003a78:	18d6b504 	addi	r3,r3,23252
 4003a7c:	e0bffb17 	ldw	r2,-20(fp)
 4003a80:	10800324 	muli	r2,r2,12
 4003a84:	1885883a 	add	r2,r3,r2
 4003a88:	10c00017 	ldw	r3,0(r2)
 4003a8c:	e0bffc17 	ldw	r2,-16(fp)
 4003a90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4003a94:	00c10034 	movhi	r3,1024
 4003a98:	18d6b504 	addi	r3,r3,23252
 4003a9c:	e0bffb17 	ldw	r2,-20(fp)
 4003aa0:	10800324 	muli	r2,r2,12
 4003aa4:	1885883a 	add	r2,r3,r2
 4003aa8:	10800104 	addi	r2,r2,4
 4003aac:	10c00017 	ldw	r3,0(r2)
 4003ab0:	e0bffc17 	ldw	r2,-16(fp)
 4003ab4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4003ab8:	00c10034 	movhi	r3,1024
 4003abc:	18d6b504 	addi	r3,r3,23252
 4003ac0:	e0bffb17 	ldw	r2,-20(fp)
 4003ac4:	10800324 	muli	r2,r2,12
 4003ac8:	1885883a 	add	r2,r3,r2
 4003acc:	10800204 	addi	r2,r2,8
 4003ad0:	10c00017 	ldw	r3,0(r2)
 4003ad4:	e0bffc17 	ldw	r2,-16(fp)
 4003ad8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4003adc:	e13ffb17 	ldw	r4,-20(fp)
 4003ae0:	4003de00 	call	4003de0 <alt_release_fd>
  }
} 
 4003ae4:	e037883a 	mov	sp,fp
 4003ae8:	dfc00117 	ldw	ra,4(sp)
 4003aec:	df000017 	ldw	fp,0(sp)
 4003af0:	dec00204 	addi	sp,sp,8
 4003af4:	f800283a 	ret

04003af8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4003af8:	defffb04 	addi	sp,sp,-20
 4003afc:	dfc00415 	stw	ra,16(sp)
 4003b00:	df000315 	stw	fp,12(sp)
 4003b04:	df000304 	addi	fp,sp,12
 4003b08:	e13ffd15 	stw	r4,-12(fp)
 4003b0c:	e17ffe15 	stw	r5,-8(fp)
 4003b10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4003b14:	01010034 	movhi	r4,1024
 4003b18:	2116b804 	addi	r4,r4,23264
 4003b1c:	e17ffd17 	ldw	r5,-12(fp)
 4003b20:	01800044 	movi	r6,1
 4003b24:	01c07fc4 	movi	r7,511
 4003b28:	4003a380 	call	4003a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4003b2c:	01010034 	movhi	r4,1024
 4003b30:	2116b504 	addi	r4,r4,23252
 4003b34:	e17ffe17 	ldw	r5,-8(fp)
 4003b38:	000d883a 	mov	r6,zero
 4003b3c:	01c07fc4 	movi	r7,511
 4003b40:	4003a380 	call	4003a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4003b44:	01010034 	movhi	r4,1024
 4003b48:	2116bb04 	addi	r4,r4,23276
 4003b4c:	e17fff17 	ldw	r5,-4(fp)
 4003b50:	01800044 	movi	r6,1
 4003b54:	01c07fc4 	movi	r7,511
 4003b58:	4003a380 	call	4003a38 <alt_open_fd>
}  
 4003b5c:	e037883a 	mov	sp,fp
 4003b60:	dfc00117 	ldw	ra,4(sp)
 4003b64:	df000017 	ldw	fp,0(sp)
 4003b68:	dec00204 	addi	sp,sp,8
 4003b6c:	f800283a 	ret

04003b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003b70:	defffe04 	addi	sp,sp,-8
 4003b74:	dfc00115 	stw	ra,4(sp)
 4003b78:	df000015 	stw	fp,0(sp)
 4003b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003b80:	00810034 	movhi	r2,1024
 4003b84:	10981d04 	addi	r2,r2,24692
 4003b88:	10800017 	ldw	r2,0(r2)
 4003b8c:	10000526 	beq	r2,zero,4003ba4 <alt_get_errno+0x34>
 4003b90:	00810034 	movhi	r2,1024
 4003b94:	10981d04 	addi	r2,r2,24692
 4003b98:	10800017 	ldw	r2,0(r2)
 4003b9c:	103ee83a 	callr	r2
 4003ba0:	00000206 	br	4003bac <alt_get_errno+0x3c>
 4003ba4:	00810034 	movhi	r2,1024
 4003ba8:	109e0d04 	addi	r2,r2,30772
}
 4003bac:	e037883a 	mov	sp,fp
 4003bb0:	dfc00117 	ldw	ra,4(sp)
 4003bb4:	df000017 	ldw	fp,0(sp)
 4003bb8:	dec00204 	addi	sp,sp,8
 4003bbc:	f800283a 	ret

04003bc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4003bc0:	defffd04 	addi	sp,sp,-12
 4003bc4:	df000215 	stw	fp,8(sp)
 4003bc8:	df000204 	addi	fp,sp,8
 4003bcc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4003bd0:	e0bfff17 	ldw	r2,-4(fp)
 4003bd4:	10800217 	ldw	r2,8(r2)
 4003bd8:	10d00034 	orhi	r3,r2,16384
 4003bdc:	e0bfff17 	ldw	r2,-4(fp)
 4003be0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4003be4:	e03ffe15 	stw	zero,-8(fp)
 4003be8:	00001d06 	br	4003c60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4003bec:	00c10034 	movhi	r3,1024
 4003bf0:	18d6b504 	addi	r3,r3,23252
 4003bf4:	e0bffe17 	ldw	r2,-8(fp)
 4003bf8:	10800324 	muli	r2,r2,12
 4003bfc:	1885883a 	add	r2,r3,r2
 4003c00:	10c00017 	ldw	r3,0(r2)
 4003c04:	e0bfff17 	ldw	r2,-4(fp)
 4003c08:	10800017 	ldw	r2,0(r2)
 4003c0c:	1880111e 	bne	r3,r2,4003c54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4003c10:	00c10034 	movhi	r3,1024
 4003c14:	18d6b504 	addi	r3,r3,23252
 4003c18:	e0bffe17 	ldw	r2,-8(fp)
 4003c1c:	10800324 	muli	r2,r2,12
 4003c20:	1885883a 	add	r2,r3,r2
 4003c24:	10800204 	addi	r2,r2,8
 4003c28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4003c2c:	1000090e 	bge	r2,zero,4003c54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4003c30:	e0bffe17 	ldw	r2,-8(fp)
 4003c34:	10c00324 	muli	r3,r2,12
 4003c38:	00810034 	movhi	r2,1024
 4003c3c:	1096b504 	addi	r2,r2,23252
 4003c40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4003c44:	e0bfff17 	ldw	r2,-4(fp)
 4003c48:	18800226 	beq	r3,r2,4003c54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4003c4c:	00bffcc4 	movi	r2,-13
 4003c50:	00000a06 	br	4003c7c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4003c54:	e0bffe17 	ldw	r2,-8(fp)
 4003c58:	10800044 	addi	r2,r2,1
 4003c5c:	e0bffe15 	stw	r2,-8(fp)
 4003c60:	00810034 	movhi	r2,1024
 4003c64:	10981c04 	addi	r2,r2,24688
 4003c68:	10800017 	ldw	r2,0(r2)
 4003c6c:	1007883a 	mov	r3,r2
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	18bfdd2e 	bgeu	r3,r2,4003bec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4003c78:	0005883a 	mov	r2,zero
}
 4003c7c:	e037883a 	mov	sp,fp
 4003c80:	df000017 	ldw	fp,0(sp)
 4003c84:	dec00104 	addi	sp,sp,4
 4003c88:	f800283a 	ret

04003c8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4003c8c:	defff604 	addi	sp,sp,-40
 4003c90:	dfc00915 	stw	ra,36(sp)
 4003c94:	df000815 	stw	fp,32(sp)
 4003c98:	df000804 	addi	fp,sp,32
 4003c9c:	e13ffd15 	stw	r4,-12(fp)
 4003ca0:	e17ffe15 	stw	r5,-8(fp)
 4003ca4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4003ca8:	00bfffc4 	movi	r2,-1
 4003cac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4003cb0:	00bffb44 	movi	r2,-19
 4003cb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4003cb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4003cbc:	e13ffd17 	ldw	r4,-12(fp)
 4003cc0:	01410034 	movhi	r5,1024
 4003cc4:	29581a04 	addi	r5,r5,24680
 4003cc8:	4003ffc0 	call	4003ffc <alt_find_dev>
 4003ccc:	e0bff815 	stw	r2,-32(fp)
 4003cd0:	e0bff817 	ldw	r2,-32(fp)
 4003cd4:	1000051e 	bne	r2,zero,4003cec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4003cd8:	e13ffd17 	ldw	r4,-12(fp)
 4003cdc:	400408c0 	call	400408c <alt_find_file>
 4003ce0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4003ce4:	00800044 	movi	r2,1
 4003ce8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4003cec:	e0bff817 	ldw	r2,-32(fp)
 4003cf0:	10002926 	beq	r2,zero,4003d98 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4003cf4:	e13ff817 	ldw	r4,-32(fp)
 4003cf8:	40041a00 	call	40041a0 <alt_get_fd>
 4003cfc:	e0bff915 	stw	r2,-28(fp)
 4003d00:	e0bff917 	ldw	r2,-28(fp)
 4003d04:	1000030e 	bge	r2,zero,4003d14 <open+0x88>
    {
      status = index;
 4003d08:	e0bff917 	ldw	r2,-28(fp)
 4003d0c:	e0bffa15 	stw	r2,-24(fp)
 4003d10:	00002306 	br	4003da0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 4003d14:	e0bff917 	ldw	r2,-28(fp)
 4003d18:	10c00324 	muli	r3,r2,12
 4003d1c:	00810034 	movhi	r2,1024
 4003d20:	1096b504 	addi	r2,r2,23252
 4003d24:	1885883a 	add	r2,r3,r2
 4003d28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4003d2c:	e0fffe17 	ldw	r3,-8(fp)
 4003d30:	00900034 	movhi	r2,16384
 4003d34:	10bfffc4 	addi	r2,r2,-1
 4003d38:	1886703a 	and	r3,r3,r2
 4003d3c:	e0bffc17 	ldw	r2,-16(fp)
 4003d40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4003d44:	e0bffb17 	ldw	r2,-20(fp)
 4003d48:	1000051e 	bne	r2,zero,4003d60 <open+0xd4>
 4003d4c:	e13ffc17 	ldw	r4,-16(fp)
 4003d50:	4003bc00 	call	4003bc0 <alt_file_locked>
 4003d54:	e0bffa15 	stw	r2,-24(fp)
 4003d58:	e0bffa17 	ldw	r2,-24(fp)
 4003d5c:	10001016 	blt	r2,zero,4003da0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4003d60:	e0bff817 	ldw	r2,-32(fp)
 4003d64:	10800317 	ldw	r2,12(r2)
 4003d68:	10000826 	beq	r2,zero,4003d8c <open+0x100>
 4003d6c:	e0bff817 	ldw	r2,-32(fp)
 4003d70:	10800317 	ldw	r2,12(r2)
 4003d74:	e13ffc17 	ldw	r4,-16(fp)
 4003d78:	e17ffd17 	ldw	r5,-12(fp)
 4003d7c:	e1bffe17 	ldw	r6,-8(fp)
 4003d80:	e1ffff17 	ldw	r7,-4(fp)
 4003d84:	103ee83a 	callr	r2
 4003d88:	00000106 	br	4003d90 <open+0x104>
 4003d8c:	0005883a 	mov	r2,zero
 4003d90:	e0bffa15 	stw	r2,-24(fp)
 4003d94:	00000206 	br	4003da0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4003d98:	00bffb44 	movi	r2,-19
 4003d9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4003da0:	e0bffa17 	ldw	r2,-24(fp)
 4003da4:	1000080e 	bge	r2,zero,4003dc8 <open+0x13c>
  {
    alt_release_fd (index);  
 4003da8:	e13ff917 	ldw	r4,-28(fp)
 4003dac:	4003de00 	call	4003de0 <alt_release_fd>
    ALT_ERRNO = -status;
 4003db0:	4003b700 	call	4003b70 <alt_get_errno>
 4003db4:	e0fffa17 	ldw	r3,-24(fp)
 4003db8:	00c7c83a 	sub	r3,zero,r3
 4003dbc:	10c00015 	stw	r3,0(r2)
    return -1;
 4003dc0:	00bfffc4 	movi	r2,-1
 4003dc4:	00000106 	br	4003dcc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4003dc8:	e0bff917 	ldw	r2,-28(fp)
}
 4003dcc:	e037883a 	mov	sp,fp
 4003dd0:	dfc00117 	ldw	ra,4(sp)
 4003dd4:	df000017 	ldw	fp,0(sp)
 4003dd8:	dec00204 	addi	sp,sp,8
 4003ddc:	f800283a 	ret

04003de0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003de0:	defffe04 	addi	sp,sp,-8
 4003de4:	df000115 	stw	fp,4(sp)
 4003de8:	df000104 	addi	fp,sp,4
 4003dec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003df0:	e0bfff17 	ldw	r2,-4(fp)
 4003df4:	108000d0 	cmplti	r2,r2,3
 4003df8:	10000d1e 	bne	r2,zero,4003e30 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003dfc:	00c10034 	movhi	r3,1024
 4003e00:	18d6b504 	addi	r3,r3,23252
 4003e04:	e0bfff17 	ldw	r2,-4(fp)
 4003e08:	10800324 	muli	r2,r2,12
 4003e0c:	1885883a 	add	r2,r3,r2
 4003e10:	10800204 	addi	r2,r2,8
 4003e14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4003e18:	00c10034 	movhi	r3,1024
 4003e1c:	18d6b504 	addi	r3,r3,23252
 4003e20:	e0bfff17 	ldw	r2,-4(fp)
 4003e24:	10800324 	muli	r2,r2,12
 4003e28:	1885883a 	add	r2,r3,r2
 4003e2c:	10000015 	stw	zero,0(r2)
  }
}
 4003e30:	e037883a 	mov	sp,fp
 4003e34:	df000017 	ldw	fp,0(sp)
 4003e38:	dec00104 	addi	sp,sp,4
 4003e3c:	f800283a 	ret

04003e40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4003e40:	defffa04 	addi	sp,sp,-24
 4003e44:	df000515 	stw	fp,20(sp)
 4003e48:	df000504 	addi	fp,sp,20
 4003e4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003e50:	0005303a 	rdctl	r2,status
 4003e54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003e58:	e0fffc17 	ldw	r3,-16(fp)
 4003e5c:	00bfff84 	movi	r2,-2
 4003e60:	1884703a 	and	r2,r3,r2
 4003e64:	1001703a 	wrctl	status,r2
  
  return context;
 4003e68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4003e6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4003e70:	e0bfff17 	ldw	r2,-4(fp)
 4003e74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4003e78:	e0bffd17 	ldw	r2,-12(fp)
 4003e7c:	10800017 	ldw	r2,0(r2)
 4003e80:	e0fffd17 	ldw	r3,-12(fp)
 4003e84:	18c00117 	ldw	r3,4(r3)
 4003e88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4003e8c:	e0bffd17 	ldw	r2,-12(fp)
 4003e90:	10800117 	ldw	r2,4(r2)
 4003e94:	e0fffd17 	ldw	r3,-12(fp)
 4003e98:	18c00017 	ldw	r3,0(r3)
 4003e9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4003ea0:	e0bffd17 	ldw	r2,-12(fp)
 4003ea4:	e0fffd17 	ldw	r3,-12(fp)
 4003ea8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4003eac:	e0bffd17 	ldw	r2,-12(fp)
 4003eb0:	e0fffd17 	ldw	r3,-12(fp)
 4003eb4:	10c00015 	stw	r3,0(r2)
 4003eb8:	e0bffb17 	ldw	r2,-20(fp)
 4003ebc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003ec0:	e0bffe17 	ldw	r2,-8(fp)
 4003ec4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4003ec8:	e037883a 	mov	sp,fp
 4003ecc:	df000017 	ldw	fp,0(sp)
 4003ed0:	dec00104 	addi	sp,sp,4
 4003ed4:	f800283a 	ret

04003ed8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4003ed8:	defffb04 	addi	sp,sp,-20
 4003edc:	dfc00415 	stw	ra,16(sp)
 4003ee0:	df000315 	stw	fp,12(sp)
 4003ee4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4003ee8:	d0a00a17 	ldw	r2,-32728(gp)
 4003eec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4003ef0:	d0a5f717 	ldw	r2,-26660(gp)
 4003ef4:	10800044 	addi	r2,r2,1
 4003ef8:	d0a5f715 	stw	r2,-26660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4003efc:	00002e06 	br	4003fb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4003f00:	e0bffd17 	ldw	r2,-12(fp)
 4003f04:	10800017 	ldw	r2,0(r2)
 4003f08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4003f0c:	e0bffd17 	ldw	r2,-12(fp)
 4003f10:	10800403 	ldbu	r2,16(r2)
 4003f14:	10803fcc 	andi	r2,r2,255
 4003f18:	10000426 	beq	r2,zero,4003f2c <alt_tick+0x54>
 4003f1c:	d0a5f717 	ldw	r2,-26660(gp)
 4003f20:	1000021e 	bne	r2,zero,4003f2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4003f24:	e0bffd17 	ldw	r2,-12(fp)
 4003f28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4003f2c:	e0bffd17 	ldw	r2,-12(fp)
 4003f30:	10800217 	ldw	r2,8(r2)
 4003f34:	d0e5f717 	ldw	r3,-26660(gp)
 4003f38:	18801d36 	bltu	r3,r2,4003fb0 <alt_tick+0xd8>
 4003f3c:	e0bffd17 	ldw	r2,-12(fp)
 4003f40:	10800403 	ldbu	r2,16(r2)
 4003f44:	10803fcc 	andi	r2,r2,255
 4003f48:	1000191e 	bne	r2,zero,4003fb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4003f4c:	e0bffd17 	ldw	r2,-12(fp)
 4003f50:	10c00317 	ldw	r3,12(r2)
 4003f54:	e0bffd17 	ldw	r2,-12(fp)
 4003f58:	10800517 	ldw	r2,20(r2)
 4003f5c:	1009883a 	mov	r4,r2
 4003f60:	183ee83a 	callr	r3
 4003f64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4003f68:	e0bfff17 	ldw	r2,-4(fp)
 4003f6c:	1000031e 	bne	r2,zero,4003f7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4003f70:	e13ffd17 	ldw	r4,-12(fp)
 4003f74:	4003e400 	call	4003e40 <alt_alarm_stop>
 4003f78:	00000d06 	br	4003fb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4003f7c:	e0bffd17 	ldw	r2,-12(fp)
 4003f80:	10c00217 	ldw	r3,8(r2)
 4003f84:	e0bfff17 	ldw	r2,-4(fp)
 4003f88:	1887883a 	add	r3,r3,r2
 4003f8c:	e0bffd17 	ldw	r2,-12(fp)
 4003f90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4003f94:	e0bffd17 	ldw	r2,-12(fp)
 4003f98:	10c00217 	ldw	r3,8(r2)
 4003f9c:	d0a5f717 	ldw	r2,-26660(gp)
 4003fa0:	1880032e 	bgeu	r3,r2,4003fb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4003fa4:	e0bffd17 	ldw	r2,-12(fp)
 4003fa8:	00c00044 	movi	r3,1
 4003fac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4003fb0:	e0bffe17 	ldw	r2,-8(fp)
 4003fb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4003fb8:	e0fffd17 	ldw	r3,-12(fp)
 4003fbc:	d0a00a04 	addi	r2,gp,-32728
 4003fc0:	18bfcf1e 	bne	r3,r2,4003f00 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4003fc4:	0001883a 	nop
}
 4003fc8:	e037883a 	mov	sp,fp
 4003fcc:	dfc00117 	ldw	ra,4(sp)
 4003fd0:	df000017 	ldw	fp,0(sp)
 4003fd4:	dec00204 	addi	sp,sp,8
 4003fd8:	f800283a 	ret

04003fdc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4003fdc:	deffff04 	addi	sp,sp,-4
 4003fe0:	df000015 	stw	fp,0(sp)
 4003fe4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4003fe8:	000170fa 	wrctl	ienable,zero
}
 4003fec:	e037883a 	mov	sp,fp
 4003ff0:	df000017 	ldw	fp,0(sp)
 4003ff4:	dec00104 	addi	sp,sp,4
 4003ff8:	f800283a 	ret

04003ffc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4003ffc:	defffa04 	addi	sp,sp,-24
 4004000:	dfc00515 	stw	ra,20(sp)
 4004004:	df000415 	stw	fp,16(sp)
 4004008:	df000404 	addi	fp,sp,16
 400400c:	e13ffe15 	stw	r4,-8(fp)
 4004010:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4004014:	e0bfff17 	ldw	r2,-4(fp)
 4004018:	10800017 	ldw	r2,0(r2)
 400401c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4004020:	e13ffe17 	ldw	r4,-8(fp)
 4004024:	40044a00 	call	40044a0 <strlen>
 4004028:	10800044 	addi	r2,r2,1
 400402c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4004030:	00000d06 	br	4004068 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4004034:	e0bffc17 	ldw	r2,-16(fp)
 4004038:	10c00217 	ldw	r3,8(r2)
 400403c:	e0bffd17 	ldw	r2,-12(fp)
 4004040:	1809883a 	mov	r4,r3
 4004044:	e17ffe17 	ldw	r5,-8(fp)
 4004048:	100d883a 	mov	r6,r2
 400404c:	400432c0 	call	400432c <memcmp>
 4004050:	1000021e 	bne	r2,zero,400405c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4004054:	e0bffc17 	ldw	r2,-16(fp)
 4004058:	00000706 	br	4004078 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400405c:	e0bffc17 	ldw	r2,-16(fp)
 4004060:	10800017 	ldw	r2,0(r2)
 4004064:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4004068:	e0fffc17 	ldw	r3,-16(fp)
 400406c:	e0bfff17 	ldw	r2,-4(fp)
 4004070:	18bff01e 	bne	r3,r2,4004034 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4004074:	0005883a 	mov	r2,zero
}
 4004078:	e037883a 	mov	sp,fp
 400407c:	dfc00117 	ldw	ra,4(sp)
 4004080:	df000017 	ldw	fp,0(sp)
 4004084:	dec00204 	addi	sp,sp,8
 4004088:	f800283a 	ret

0400408c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400408c:	defffb04 	addi	sp,sp,-20
 4004090:	dfc00415 	stw	ra,16(sp)
 4004094:	df000315 	stw	fp,12(sp)
 4004098:	df000304 	addi	fp,sp,12
 400409c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40040a0:	00810034 	movhi	r2,1024
 40040a4:	10981804 	addi	r2,r2,24672
 40040a8:	10800017 	ldw	r2,0(r2)
 40040ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40040b0:	00003106 	br	4004178 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 40040b4:	e0bffd17 	ldw	r2,-12(fp)
 40040b8:	10800217 	ldw	r2,8(r2)
 40040bc:	1009883a 	mov	r4,r2
 40040c0:	40044a00 	call	40044a0 <strlen>
 40040c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40040c8:	e0bffd17 	ldw	r2,-12(fp)
 40040cc:	10c00217 	ldw	r3,8(r2)
 40040d0:	e0bffe17 	ldw	r2,-8(fp)
 40040d4:	10bfffc4 	addi	r2,r2,-1
 40040d8:	1885883a 	add	r2,r3,r2
 40040dc:	10800003 	ldbu	r2,0(r2)
 40040e0:	10803fcc 	andi	r2,r2,255
 40040e4:	1080201c 	xori	r2,r2,128
 40040e8:	10bfe004 	addi	r2,r2,-128
 40040ec:	10800bd8 	cmpnei	r2,r2,47
 40040f0:	1000031e 	bne	r2,zero,4004100 <alt_find_file+0x74>
    {
      len -= 1;
 40040f4:	e0bffe17 	ldw	r2,-8(fp)
 40040f8:	10bfffc4 	addi	r2,r2,-1
 40040fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4004100:	e0bffe17 	ldw	r2,-8(fp)
 4004104:	e0ffff17 	ldw	r3,-4(fp)
 4004108:	1885883a 	add	r2,r3,r2
 400410c:	10800003 	ldbu	r2,0(r2)
 4004110:	10803fcc 	andi	r2,r2,255
 4004114:	1080201c 	xori	r2,r2,128
 4004118:	10bfe004 	addi	r2,r2,-128
 400411c:	10800be0 	cmpeqi	r2,r2,47
 4004120:	1000081e 	bne	r2,zero,4004144 <alt_find_file+0xb8>
 4004124:	e0bffe17 	ldw	r2,-8(fp)
 4004128:	e0ffff17 	ldw	r3,-4(fp)
 400412c:	1885883a 	add	r2,r3,r2
 4004130:	10800003 	ldbu	r2,0(r2)
 4004134:	10803fcc 	andi	r2,r2,255
 4004138:	1080201c 	xori	r2,r2,128
 400413c:	10bfe004 	addi	r2,r2,-128
 4004140:	10000a1e 	bne	r2,zero,400416c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4004144:	e0bffd17 	ldw	r2,-12(fp)
 4004148:	10c00217 	ldw	r3,8(r2)
 400414c:	e0bffe17 	ldw	r2,-8(fp)
 4004150:	1809883a 	mov	r4,r3
 4004154:	e17fff17 	ldw	r5,-4(fp)
 4004158:	100d883a 	mov	r6,r2
 400415c:	400432c0 	call	400432c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4004160:	1000021e 	bne	r2,zero,400416c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4004164:	e0bffd17 	ldw	r2,-12(fp)
 4004168:	00000806 	br	400418c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400416c:	e0bffd17 	ldw	r2,-12(fp)
 4004170:	10800017 	ldw	r2,0(r2)
 4004174:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4004178:	e0fffd17 	ldw	r3,-12(fp)
 400417c:	00810034 	movhi	r2,1024
 4004180:	10981804 	addi	r2,r2,24672
 4004184:	18bfcb1e 	bne	r3,r2,40040b4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4004188:	0005883a 	mov	r2,zero
}
 400418c:	e037883a 	mov	sp,fp
 4004190:	dfc00117 	ldw	ra,4(sp)
 4004194:	df000017 	ldw	fp,0(sp)
 4004198:	dec00204 	addi	sp,sp,8
 400419c:	f800283a 	ret

040041a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40041a0:	defffc04 	addi	sp,sp,-16
 40041a4:	df000315 	stw	fp,12(sp)
 40041a8:	df000304 	addi	fp,sp,12
 40041ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40041b0:	00bffa04 	movi	r2,-24
 40041b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40041b8:	e03ffd15 	stw	zero,-12(fp)
 40041bc:	00001d06 	br	4004234 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 40041c0:	00c10034 	movhi	r3,1024
 40041c4:	18d6b504 	addi	r3,r3,23252
 40041c8:	e0bffd17 	ldw	r2,-12(fp)
 40041cc:	10800324 	muli	r2,r2,12
 40041d0:	1885883a 	add	r2,r3,r2
 40041d4:	10800017 	ldw	r2,0(r2)
 40041d8:	1000131e 	bne	r2,zero,4004228 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 40041dc:	00c10034 	movhi	r3,1024
 40041e0:	18d6b504 	addi	r3,r3,23252
 40041e4:	e0bffd17 	ldw	r2,-12(fp)
 40041e8:	10800324 	muli	r2,r2,12
 40041ec:	1885883a 	add	r2,r3,r2
 40041f0:	e0ffff17 	ldw	r3,-4(fp)
 40041f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40041f8:	00810034 	movhi	r2,1024
 40041fc:	10981c04 	addi	r2,r2,24688
 4004200:	10c00017 	ldw	r3,0(r2)
 4004204:	e0bffd17 	ldw	r2,-12(fp)
 4004208:	1880040e 	bge	r3,r2,400421c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 400420c:	00810034 	movhi	r2,1024
 4004210:	10981c04 	addi	r2,r2,24688
 4004214:	e0fffd17 	ldw	r3,-12(fp)
 4004218:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400421c:	e0bffd17 	ldw	r2,-12(fp)
 4004220:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4004224:	00000606 	br	4004240 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4004228:	e0bffd17 	ldw	r2,-12(fp)
 400422c:	10800044 	addi	r2,r2,1
 4004230:	e0bffd15 	stw	r2,-12(fp)
 4004234:	e0bffd17 	ldw	r2,-12(fp)
 4004238:	10800810 	cmplti	r2,r2,32
 400423c:	103fe01e 	bne	r2,zero,40041c0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4004240:	e0bffe17 	ldw	r2,-8(fp)
}
 4004244:	e037883a 	mov	sp,fp
 4004248:	df000017 	ldw	fp,0(sp)
 400424c:	dec00104 	addi	sp,sp,4
 4004250:	f800283a 	ret

04004254 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4004254:	defffb04 	addi	sp,sp,-20
 4004258:	df000415 	stw	fp,16(sp)
 400425c:	df000404 	addi	fp,sp,16
 4004260:	e13ffe15 	stw	r4,-8(fp)
 4004264:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4004268:	e0bfff17 	ldw	r2,-4(fp)
 400426c:	10840070 	cmpltui	r2,r2,4097
 4004270:	1000021e 	bne	r2,zero,400427c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4004274:	00840004 	movi	r2,4096
 4004278:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400427c:	e0fffe17 	ldw	r3,-8(fp)
 4004280:	e0bfff17 	ldw	r2,-4(fp)
 4004284:	1885883a 	add	r2,r3,r2
 4004288:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400428c:	e0bffe17 	ldw	r2,-8(fp)
 4004290:	e0bffc15 	stw	r2,-16(fp)
 4004294:	00000506 	br	40042ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4004298:	e0bffc17 	ldw	r2,-16(fp)
 400429c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40042a0:	e0bffc17 	ldw	r2,-16(fp)
 40042a4:	10800804 	addi	r2,r2,32
 40042a8:	e0bffc15 	stw	r2,-16(fp)
 40042ac:	e0fffc17 	ldw	r3,-16(fp)
 40042b0:	e0bffd17 	ldw	r2,-12(fp)
 40042b4:	18bff836 	bltu	r3,r2,4004298 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40042b8:	e0bffe17 	ldw	r2,-8(fp)
 40042bc:	108007cc 	andi	r2,r2,31
 40042c0:	10000226 	beq	r2,zero,40042cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40042cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40042d0:	e037883a 	mov	sp,fp
 40042d4:	df000017 	ldw	fp,0(sp)
 40042d8:	dec00104 	addi	sp,sp,4
 40042dc:	f800283a 	ret

040042e0 <atexit>:
 40042e0:	200b883a 	mov	r5,r4
 40042e4:	000d883a 	mov	r6,zero
 40042e8:	0009883a 	mov	r4,zero
 40042ec:	000f883a 	mov	r7,zero
 40042f0:	400452c1 	jmpi	400452c <__register_exitproc>

040042f4 <exit>:
 40042f4:	defffe04 	addi	sp,sp,-8
 40042f8:	000b883a 	mov	r5,zero
 40042fc:	dc000015 	stw	r16,0(sp)
 4004300:	dfc00115 	stw	ra,4(sp)
 4004304:	2021883a 	mov	r16,r4
 4004308:	400465c0 	call	400465c <__call_exitprocs>
 400430c:	00810034 	movhi	r2,1024
 4004310:	10982104 	addi	r2,r2,24708
 4004314:	11000017 	ldw	r4,0(r2)
 4004318:	20800f17 	ldw	r2,60(r4)
 400431c:	10000126 	beq	r2,zero,4004324 <exit+0x30>
 4004320:	103ee83a 	callr	r2
 4004324:	8009883a 	mov	r4,r16
 4004328:	40047fc0 	call	40047fc <_exit>

0400432c <memcmp>:
 400432c:	01c000c4 	movi	r7,3
 4004330:	3980192e 	bgeu	r7,r6,4004398 <memcmp+0x6c>
 4004334:	2904b03a 	or	r2,r5,r4
 4004338:	11c4703a 	and	r2,r2,r7
 400433c:	10000f26 	beq	r2,zero,400437c <memcmp+0x50>
 4004340:	20c00003 	ldbu	r3,0(r4)
 4004344:	28800003 	ldbu	r2,0(r5)
 4004348:	1880151e 	bne	r3,r2,40043a0 <memcmp+0x74>
 400434c:	31bfff84 	addi	r6,r6,-2
 4004350:	01ffffc4 	movi	r7,-1
 4004354:	00000406 	br	4004368 <memcmp+0x3c>
 4004358:	20c00003 	ldbu	r3,0(r4)
 400435c:	28800003 	ldbu	r2,0(r5)
 4004360:	31bfffc4 	addi	r6,r6,-1
 4004364:	18800e1e 	bne	r3,r2,40043a0 <memcmp+0x74>
 4004368:	21000044 	addi	r4,r4,1
 400436c:	29400044 	addi	r5,r5,1
 4004370:	31fff91e 	bne	r6,r7,4004358 <memcmp+0x2c>
 4004374:	0005883a 	mov	r2,zero
 4004378:	f800283a 	ret
 400437c:	20c00017 	ldw	r3,0(r4)
 4004380:	28800017 	ldw	r2,0(r5)
 4004384:	1880041e 	bne	r3,r2,4004398 <memcmp+0x6c>
 4004388:	31bfff04 	addi	r6,r6,-4
 400438c:	21000104 	addi	r4,r4,4
 4004390:	29400104 	addi	r5,r5,4
 4004394:	39bff936 	bltu	r7,r6,400437c <memcmp+0x50>
 4004398:	303fe91e 	bne	r6,zero,4004340 <memcmp+0x14>
 400439c:	003ff506 	br	4004374 <memcmp+0x48>
 40043a0:	1885c83a 	sub	r2,r3,r2
 40043a4:	f800283a 	ret

040043a8 <memcpy>:
 40043a8:	00c003c4 	movi	r3,15
 40043ac:	2005883a 	mov	r2,r4
 40043b0:	3009883a 	mov	r4,r6
 40043b4:	1980032e 	bgeu	r3,r6,40043c4 <memcpy+0x1c>
 40043b8:	2886b03a 	or	r3,r5,r2
 40043bc:	18c000cc 	andi	r3,r3,3
 40043c0:	18000926 	beq	r3,zero,40043e8 <memcpy+0x40>
 40043c4:	1007883a 	mov	r3,r2
 40043c8:	290f883a 	add	r7,r5,r4
 40043cc:	20000526 	beq	r4,zero,40043e4 <memcpy+0x3c>
 40043d0:	29800003 	ldbu	r6,0(r5)
 40043d4:	18c00044 	addi	r3,r3,1
 40043d8:	29400044 	addi	r5,r5,1
 40043dc:	19bfffc5 	stb	r6,-1(r3)
 40043e0:	29fffb1e 	bne	r5,r7,40043d0 <memcpy+0x28>
 40043e4:	f800283a 	ret
 40043e8:	327ffc04 	addi	r9,r6,-16
 40043ec:	4812d13a 	srli	r9,r9,4
 40043f0:	11000404 	addi	r4,r2,16
 40043f4:	1007883a 	mov	r3,r2
 40043f8:	4810913a 	slli	r8,r9,4
 40043fc:	280f883a 	mov	r7,r5
 4004400:	2209883a 	add	r4,r4,r8
 4004404:	3a000017 	ldw	r8,0(r7)
 4004408:	18c00404 	addi	r3,r3,16
 400440c:	39c00404 	addi	r7,r7,16
 4004410:	1a3ffc15 	stw	r8,-16(r3)
 4004414:	3a3ffd17 	ldw	r8,-12(r7)
 4004418:	1a3ffd15 	stw	r8,-12(r3)
 400441c:	3a3ffe17 	ldw	r8,-8(r7)
 4004420:	1a3ffe15 	stw	r8,-8(r3)
 4004424:	3a3fff17 	ldw	r8,-4(r7)
 4004428:	1a3fff15 	stw	r8,-4(r3)
 400442c:	193ff51e 	bne	r3,r4,4004404 <memcpy+0x5c>
 4004430:	49c00044 	addi	r7,r9,1
 4004434:	380e913a 	slli	r7,r7,4
 4004438:	310003cc 	andi	r4,r6,15
 400443c:	018000c4 	movi	r6,3
 4004440:	11c7883a 	add	r3,r2,r7
 4004444:	29cb883a 	add	r5,r5,r7
 4004448:	313fdf2e 	bgeu	r6,r4,40043c8 <memcpy+0x20>
 400444c:	213fff04 	addi	r4,r4,-4
 4004450:	2014d0ba 	srli	r10,r4,2
 4004454:	1a400104 	addi	r9,r3,4
 4004458:	180d883a 	mov	r6,r3
 400445c:	528f883a 	add	r7,r10,r10
 4004460:	39cf883a 	add	r7,r7,r7
 4004464:	49d3883a 	add	r9,r9,r7
 4004468:	280f883a 	mov	r7,r5
 400446c:	3a000017 	ldw	r8,0(r7)
 4004470:	31800104 	addi	r6,r6,4
 4004474:	39c00104 	addi	r7,r7,4
 4004478:	323fff15 	stw	r8,-4(r6)
 400447c:	327ffb1e 	bne	r6,r9,400446c <memcpy+0xc4>
 4004480:	51800044 	addi	r6,r10,1
 4004484:	52bfff24 	muli	r10,r10,-4
 4004488:	318d883a 	add	r6,r6,r6
 400448c:	318d883a 	add	r6,r6,r6
 4004490:	5109883a 	add	r4,r10,r4
 4004494:	298b883a 	add	r5,r5,r6
 4004498:	1987883a 	add	r3,r3,r6
 400449c:	003fca06 	br	40043c8 <memcpy+0x20>

040044a0 <strlen>:
 40044a0:	208000cc 	andi	r2,r4,3
 40044a4:	10001f1e 	bne	r2,zero,4004524 <strlen+0x84>
 40044a8:	20800017 	ldw	r2,0(r4)
 40044ac:	01ffbff4 	movhi	r7,65279
 40044b0:	39ffbfc4 	addi	r7,r7,-257
 40044b4:	01a02074 	movhi	r6,32897
 40044b8:	31a02004 	addi	r6,r6,-32640
 40044bc:	11c7883a 	add	r3,r2,r7
 40044c0:	0084303a 	nor	r2,zero,r2
 40044c4:	1886703a 	and	r3,r3,r2
 40044c8:	1986703a 	and	r3,r3,r6
 40044cc:	2005883a 	mov	r2,r4
 40044d0:	1800101e 	bne	r3,zero,4004514 <strlen+0x74>
 40044d4:	10800104 	addi	r2,r2,4
 40044d8:	10c00017 	ldw	r3,0(r2)
 40044dc:	19cb883a 	add	r5,r3,r7
 40044e0:	00c6303a 	nor	r3,zero,r3
 40044e4:	28c6703a 	and	r3,r5,r3
 40044e8:	1986703a 	and	r3,r3,r6
 40044ec:	1800091e 	bne	r3,zero,4004514 <strlen+0x74>
 40044f0:	10800104 	addi	r2,r2,4
 40044f4:	10c00017 	ldw	r3,0(r2)
 40044f8:	19cb883a 	add	r5,r3,r7
 40044fc:	00c6303a 	nor	r3,zero,r3
 4004500:	28c6703a 	and	r3,r5,r3
 4004504:	1986703a 	and	r3,r3,r6
 4004508:	183ff226 	beq	r3,zero,40044d4 <strlen+0x34>
 400450c:	00000106 	br	4004514 <strlen+0x74>
 4004510:	10800044 	addi	r2,r2,1
 4004514:	10c00007 	ldb	r3,0(r2)
 4004518:	183ffd1e 	bne	r3,zero,4004510 <strlen+0x70>
 400451c:	1105c83a 	sub	r2,r2,r4
 4004520:	f800283a 	ret
 4004524:	2005883a 	mov	r2,r4
 4004528:	003ffa06 	br	4004514 <strlen+0x74>

0400452c <__register_exitproc>:
 400452c:	defffa04 	addi	sp,sp,-24
 4004530:	00810034 	movhi	r2,1024
 4004534:	10982104 	addi	r2,r2,24708
 4004538:	dc000315 	stw	r16,12(sp)
 400453c:	14000017 	ldw	r16,0(r2)
 4004540:	dc400415 	stw	r17,16(sp)
 4004544:	dfc00515 	stw	ra,20(sp)
 4004548:	80805217 	ldw	r2,328(r16)
 400454c:	2023883a 	mov	r17,r4
 4004550:	10003e26 	beq	r2,zero,400464c <__register_exitproc+0x120>
 4004554:	10c00117 	ldw	r3,4(r2)
 4004558:	020007c4 	movi	r8,31
 400455c:	40c0180e 	bge	r8,r3,40045c0 <__register_exitproc+0x94>
 4004560:	00800034 	movhi	r2,0
 4004564:	10800004 	addi	r2,r2,0
 4004568:	1000061e 	bne	r2,zero,4004584 <__register_exitproc+0x58>
 400456c:	00bfffc4 	movi	r2,-1
 4004570:	dfc00517 	ldw	ra,20(sp)
 4004574:	dc400417 	ldw	r17,16(sp)
 4004578:	dc000317 	ldw	r16,12(sp)
 400457c:	dec00604 	addi	sp,sp,24
 4004580:	f800283a 	ret
 4004584:	01006404 	movi	r4,400
 4004588:	d9400015 	stw	r5,0(sp)
 400458c:	d9800115 	stw	r6,4(sp)
 4004590:	d9c00215 	stw	r7,8(sp)
 4004594:	00000000 	call	0 <__reset-0x4000000>
 4004598:	d9400017 	ldw	r5,0(sp)
 400459c:	d9800117 	ldw	r6,4(sp)
 40045a0:	d9c00217 	ldw	r7,8(sp)
 40045a4:	103ff126 	beq	r2,zero,400456c <__register_exitproc+0x40>
 40045a8:	80c05217 	ldw	r3,328(r16)
 40045ac:	10000115 	stw	zero,4(r2)
 40045b0:	10c00015 	stw	r3,0(r2)
 40045b4:	80805215 	stw	r2,328(r16)
 40045b8:	10006215 	stw	zero,392(r2)
 40045bc:	10006315 	stw	zero,396(r2)
 40045c0:	10c00117 	ldw	r3,4(r2)
 40045c4:	88000d1e 	bne	r17,zero,40045fc <__register_exitproc+0xd0>
 40045c8:	19000084 	addi	r4,r3,2
 40045cc:	2109883a 	add	r4,r4,r4
 40045d0:	18c00044 	addi	r3,r3,1
 40045d4:	2109883a 	add	r4,r4,r4
 40045d8:	1109883a 	add	r4,r2,r4
 40045dc:	10c00115 	stw	r3,4(r2)
 40045e0:	0005883a 	mov	r2,zero
 40045e4:	21400015 	stw	r5,0(r4)
 40045e8:	dfc00517 	ldw	ra,20(sp)
 40045ec:	dc400417 	ldw	r17,16(sp)
 40045f0:	dc000317 	ldw	r16,12(sp)
 40045f4:	dec00604 	addi	sp,sp,24
 40045f8:	f800283a 	ret
 40045fc:	02400044 	movi	r9,1
 4004600:	12806217 	ldw	r10,392(r2)
 4004604:	48d2983a 	sll	r9,r9,r3
 4004608:	19000804 	addi	r4,r3,32
 400460c:	18d1883a 	add	r8,r3,r3
 4004610:	2109883a 	add	r4,r4,r4
 4004614:	4211883a 	add	r8,r8,r8
 4004618:	2109883a 	add	r4,r4,r4
 400461c:	1109883a 	add	r4,r2,r4
 4004620:	1211883a 	add	r8,r2,r8
 4004624:	5254b03a 	or	r10,r10,r9
 4004628:	21c02215 	stw	r7,136(r4)
 400462c:	41802215 	stw	r6,136(r8)
 4004630:	12806215 	stw	r10,392(r2)
 4004634:	01000084 	movi	r4,2
 4004638:	893fe31e 	bne	r17,r4,40045c8 <__register_exitproc+0x9c>
 400463c:	11006317 	ldw	r4,396(r2)
 4004640:	2252b03a 	or	r9,r4,r9
 4004644:	12406315 	stw	r9,396(r2)
 4004648:	003fdf06 	br	40045c8 <__register_exitproc+0x9c>
 400464c:	00810034 	movhi	r2,1024
 4004650:	109e4e04 	addi	r2,r2,31032
 4004654:	80805215 	stw	r2,328(r16)
 4004658:	003fbe06 	br	4004554 <__register_exitproc+0x28>

0400465c <__call_exitprocs>:
 400465c:	00810034 	movhi	r2,1024
 4004660:	10982104 	addi	r2,r2,24708
 4004664:	10800017 	ldw	r2,0(r2)
 4004668:	defff304 	addi	sp,sp,-52
 400466c:	df000b15 	stw	fp,44(sp)
 4004670:	d8800015 	stw	r2,0(sp)
 4004674:	10805204 	addi	r2,r2,328
 4004678:	dd400815 	stw	r21,32(sp)
 400467c:	dfc00c15 	stw	ra,48(sp)
 4004680:	ddc00a15 	stw	r23,40(sp)
 4004684:	dd800915 	stw	r22,36(sp)
 4004688:	dd000715 	stw	r20,28(sp)
 400468c:	dcc00615 	stw	r19,24(sp)
 4004690:	dc800515 	stw	r18,20(sp)
 4004694:	dc400415 	stw	r17,16(sp)
 4004698:	dc000315 	stw	r16,12(sp)
 400469c:	d9000115 	stw	r4,4(sp)
 40046a0:	2839883a 	mov	fp,r5
 40046a4:	d8800215 	stw	r2,8(sp)
 40046a8:	057fffc4 	movi	r21,-1
 40046ac:	d8800017 	ldw	r2,0(sp)
 40046b0:	ddc00217 	ldw	r23,8(sp)
 40046b4:	14805217 	ldw	r18,328(r2)
 40046b8:	90001726 	beq	r18,zero,4004718 <__call_exitprocs+0xbc>
 40046bc:	94400117 	ldw	r17,4(r18)
 40046c0:	8c3fffc4 	addi	r16,r17,-1
 40046c4:	80001116 	blt	r16,zero,400470c <__call_exitprocs+0xb0>
 40046c8:	8c400044 	addi	r17,r17,1
 40046cc:	8427883a 	add	r19,r16,r16
 40046d0:	8c63883a 	add	r17,r17,r17
 40046d4:	95802204 	addi	r22,r18,136
 40046d8:	9ce7883a 	add	r19,r19,r19
 40046dc:	8c63883a 	add	r17,r17,r17
 40046e0:	b4e7883a 	add	r19,r22,r19
 40046e4:	9463883a 	add	r17,r18,r17
 40046e8:	e0001726 	beq	fp,zero,4004748 <__call_exitprocs+0xec>
 40046ec:	8c87c83a 	sub	r3,r17,r18
 40046f0:	b0c7883a 	add	r3,r22,r3
 40046f4:	18c01e17 	ldw	r3,120(r3)
 40046f8:	1f001326 	beq	r3,fp,4004748 <__call_exitprocs+0xec>
 40046fc:	843fffc4 	addi	r16,r16,-1
 4004700:	9cffff04 	addi	r19,r19,-4
 4004704:	8c7fff04 	addi	r17,r17,-4
 4004708:	857ff71e 	bne	r16,r21,40046e8 <__call_exitprocs+0x8c>
 400470c:	00800034 	movhi	r2,0
 4004710:	10800004 	addi	r2,r2,0
 4004714:	10002a1e 	bne	r2,zero,40047c0 <__call_exitprocs+0x164>
 4004718:	dfc00c17 	ldw	ra,48(sp)
 400471c:	df000b17 	ldw	fp,44(sp)
 4004720:	ddc00a17 	ldw	r23,40(sp)
 4004724:	dd800917 	ldw	r22,36(sp)
 4004728:	dd400817 	ldw	r21,32(sp)
 400472c:	dd000717 	ldw	r20,28(sp)
 4004730:	dcc00617 	ldw	r19,24(sp)
 4004734:	dc800517 	ldw	r18,20(sp)
 4004738:	dc400417 	ldw	r17,16(sp)
 400473c:	dc000317 	ldw	r16,12(sp)
 4004740:	dec00d04 	addi	sp,sp,52
 4004744:	f800283a 	ret
 4004748:	91000117 	ldw	r4,4(r18)
 400474c:	88c00017 	ldw	r3,0(r17)
 4004750:	213fffc4 	addi	r4,r4,-1
 4004754:	24001526 	beq	r4,r16,40047ac <__call_exitprocs+0x150>
 4004758:	88000015 	stw	zero,0(r17)
 400475c:	183fe726 	beq	r3,zero,40046fc <__call_exitprocs+0xa0>
 4004760:	00800044 	movi	r2,1
 4004764:	1408983a 	sll	r4,r2,r16
 4004768:	91406217 	ldw	r5,392(r18)
 400476c:	95000117 	ldw	r20,4(r18)
 4004770:	214a703a 	and	r5,r4,r5
 4004774:	28000b26 	beq	r5,zero,40047a4 <__call_exitprocs+0x148>
 4004778:	91406317 	ldw	r5,396(r18)
 400477c:	2148703a 	and	r4,r4,r5
 4004780:	20000c1e 	bne	r4,zero,40047b4 <__call_exitprocs+0x158>
 4004784:	99400017 	ldw	r5,0(r19)
 4004788:	d9000117 	ldw	r4,4(sp)
 400478c:	183ee83a 	callr	r3
 4004790:	90c00117 	ldw	r3,4(r18)
 4004794:	1d3fc51e 	bne	r3,r20,40046ac <__call_exitprocs+0x50>
 4004798:	b8c00017 	ldw	r3,0(r23)
 400479c:	1cbfd726 	beq	r3,r18,40046fc <__call_exitprocs+0xa0>
 40047a0:	003fc206 	br	40046ac <__call_exitprocs+0x50>
 40047a4:	183ee83a 	callr	r3
 40047a8:	003ff906 	br	4004790 <__call_exitprocs+0x134>
 40047ac:	94000115 	stw	r16,4(r18)
 40047b0:	003fea06 	br	400475c <__call_exitprocs+0x100>
 40047b4:	99000017 	ldw	r4,0(r19)
 40047b8:	183ee83a 	callr	r3
 40047bc:	003ff406 	br	4004790 <__call_exitprocs+0x134>
 40047c0:	90c00117 	ldw	r3,4(r18)
 40047c4:	1800071e 	bne	r3,zero,40047e4 <__call_exitprocs+0x188>
 40047c8:	90c00017 	ldw	r3,0(r18)
 40047cc:	18000926 	beq	r3,zero,40047f4 <__call_exitprocs+0x198>
 40047d0:	9009883a 	mov	r4,r18
 40047d4:	b8c00015 	stw	r3,0(r23)
 40047d8:	00000000 	call	0 <__reset-0x4000000>
 40047dc:	bc800017 	ldw	r18,0(r23)
 40047e0:	003fb506 	br	40046b8 <__call_exitprocs+0x5c>
 40047e4:	90c00017 	ldw	r3,0(r18)
 40047e8:	902f883a 	mov	r23,r18
 40047ec:	1825883a 	mov	r18,r3
 40047f0:	003fb106 	br	40046b8 <__call_exitprocs+0x5c>
 40047f4:	0007883a 	mov	r3,zero
 40047f8:	003ffb06 	br	40047e8 <__call_exitprocs+0x18c>

040047fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40047fc:	defffc04 	addi	sp,sp,-16
 4004800:	df000315 	stw	fp,12(sp)
 4004804:	df000304 	addi	fp,sp,12
 4004808:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400480c:	0001883a 	nop
 4004810:	e0bfff17 	ldw	r2,-4(fp)
 4004814:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4004818:	e0bffd17 	ldw	r2,-12(fp)
 400481c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4004820:	e0bffe17 	ldw	r2,-8(fp)
 4004824:	10000226 	beq	r2,zero,4004830 <_exit+0x34>
    ALT_SIM_FAIL();
 4004828:	002af070 	cmpltui	zero,zero,43969
 400482c:	00000106 	br	4004834 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 4004830:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4004834:	003fff06 	br	4004834 <_exit+0x38>
