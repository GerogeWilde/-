
uart.elf:     file format elf32-littlenios2
uart.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00005dd8 memsz 0x00005dd8 flags r-x
    LOAD off    0x00006df8 vaddr 0x04005df8 paddr 0x04007904 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x00009410 vaddr 0x04009410 paddr 0x04009410 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005bec  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  04005da4  04005da4  00006da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  04005df8  04007904  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  04009410  04009410  00009410  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008904  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009d0  00000000  00000000  00008928  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000186af  00000000  00000000  000092f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006088  00000000  00000000  000219a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000716a  00000000  00000000  00027a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000114c  00000000  00000000  0002eb9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002269  00000000  00000000  0002fce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005662  00000000  00000000  00031f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  000375b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003a069  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0003a06c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003a06f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003a070  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003a071  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003a075  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003a079  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0003a07d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0003a081  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0003a085  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0003a089  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000015  00000000  00000000  0003a08c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000369ee  00000000  00000000  0003a0a1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04005da4 l    d  .rodata	00000000 .rodata
04005df8 l    d  .rwdata	00000000 .rwdata
04009410 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_bsp//obj/HAL/src/crt0.o
04000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
04005df8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04001cc8 l     F .text	00000008 __fp_lock
04001cd0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
04002c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04002dac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04002dd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04002ed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04002fc4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040030b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003288 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040078f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040034d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04003614 l     F .text	00000038 alt_dev_reg
040067a8 l     O .rwdata	00001060 jtag_uart_0
04007808 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04003924 l     F .text	00000204 altera_avalon_jtag_uart_irq
04003b28 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004164 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
04004418 l     F .text	00000098 altera_avalon_uart_irq
040044b0 l     F .text	000000d8 altera_avalon_uart_rxirq
04004588 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04004718 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0400496c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04004ce8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04005188 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040052c0 l     F .text	00000050 alt_get_errno
04005310 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
04002b58 g     F .text	00000064 _isatty_r
040031d0 g     F .text	00000078 alt_main
04000238 g     F .text	00000084 _puts_r
04009460 g     O .bss	00000100 alt_irq
04002bbc g     F .text	0000006c _lseek_r
04007904 g       *ABS*	00000000 __flash_rwdata_start
040096f0 g       *ABS*	00000000 __alt_heap_start
0400286c g     F .text	0000005c __sseek
04001d58 g     F .text	0000010c __sinit
04001ce4 g     F .text	00000064 __sfmoreglue
04003268 g     F .text	00000020 __malloc_unlock
040011b4 g     F .text	00000128 memmove
04001d48 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002af0 g     F .text	00000068 _fstat_r
0400941c g     O .bss	00000004 errno
04009424 g     O .bss	00000004 alt_argv
0400f8cc g       *ABS*	00000000 _gp
04006628 g     O .rwdata	00000180 alt_fd_list
040056ec g     F .text	00000090 alt_find_dev
040010bc g     F .text	000000f8 memcpy
04001cd8 g     F .text	0000000c _cleanup_r
04005248 g     F .text	00000078 alt_io_redirect
04005da4 g       *ABS*	00000000 __DTOR_END__
040002bc g     F .text	00000014 puts
04003d28 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04002f24 g     F .text	000000a0 isatty
04005944 g     F .text	0000008c alt_icache_flush
04009418 g     O .bss	00000004 __malloc_top_pad
0400035c g     F .text	000004e4 __sfvwrite_r
040018d8 g     F .text	00000064 _sbrk_r
04002c28 g     F .text	0000006c _read_r
040078ec g     O .rwdata	00000004 alt_max_fd
040029a0 g     F .text	0000013c _fclose_r
04001c98 g     F .text	00000030 fflush
04009414 g     O .bss	00000004 __malloc_max_sbrked_mem
04003100 g     F .text	000000d0 lseek
040078cc g     O .rwdata	00000004 _global_impure_ptr
040012dc g     F .text	000005fc _realloc_r
040096f0 g       *ABS*	00000000 __bss_end
04005098 g     F .text	000000f0 alt_iic_isr_register
040055c8 g     F .text	00000104 alt_tick
04004370 g     F .text	000000a8 altera_avalon_uart_init
04001f70 g     F .text	00000018 __fp_lock_all
0400504c g     F .text	0000004c alt_ic_irq_enabled
04005530 g     F .text	00000098 alt_alarm_stop
0400942c g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
04006600 g     O .rwdata	00000028 alt_dev_null
04004ca4 g     F .text	00000044 alt_dcache_flush_all
04007904 g       *ABS*	00000000 __ram_rwdata_end
040078e4 g     O .rwdata	00000008 alt_dev_list
04003528 g     F .text	000000ec write
04005df8 g       *ABS*	00000000 __ram_rodata_end
04002e28 g     F .text	000000ac fstat
040096f0 g       *ABS*	00000000 end
040049bc g     F .text	000001a8 altera_avalon_uart_write
04003864 g     F .text	000000c0 altera_avalon_jtag_uart_init
04005da4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040041d8 g     F .text	00000088 alt_avalon_timer_sc_init
040042c0 g     F .text	00000060 altera_avalon_uart_write_fd
04004320 g     F .text	00000050 altera_avalon_uart_close_fd
04003f40 g     F .text	00000224 altera_avalon_jtag_uart_write
04001f60 g     F .text	00000004 __sfp_lock_acquire
04000fc4 g     F .text	000000f8 memchr
040020dc g     F .text	000002d0 _free_r
04005bc8 g     F .text	000001a0 __call_exitprocs
040078d4 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	0000004c _start
04009430 g     O .bss	00000004 _alt_tick_rate
04009434 g     O .bss	00000004 _alt_nticks
040032d8 g     F .text	000000f0 read
04003680 g     F .text	00000080 alt_sys_init
04005a98 g     F .text	00000130 __register_exitproc
04003bcc g     F .text	00000068 altera_avalon_jtag_uart_close
04005df8 g       *ABS*	00000000 __ram_rwdata_start
04005da4 g       *ABS*	00000000 __ram_rodata_start
04009438 g     O .bss	00000028 __malloc_current_mallinfo
04003700 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04005890 g     F .text	000000b4 alt_get_fd
0400293c g     F .text	00000064 _close_r
04005a1c g     F .text	0000007c memcmp
040037c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040096f0 g       *ABS*	00000000 __alt_stack_base
04003810 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400193c g     F .text	00000174 __swsetup_r
04001e64 g     F .text	000000fc __sfp
040061f8 g     O .rwdata	00000408 __malloc_av_
04001f6c g     F .text	00000004 __sinit_lock_release
04002790 g     F .text	00000054 __sread
0400577c g     F .text	00000114 alt_find_file
04004d38 g     F .text	000000a0 alt_dev_llist_insert
04003248 g     F .text	00000020 __malloc_lock
04003428 g     F .text	000000b0 sbrk
04001ab0 g     F .text	000001e8 _fflush_r
04009410 g       *ABS*	00000000 __bss_start
040026b4 g     F .text	000000dc memset
04000204 g     F .text	00000034 main
04009428 g     O .bss	00000004 alt_envp
04009410 g     O .bss	00000004 __malloc_max_total_mem
04003760 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040028c8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04002adc g     F .text	00000014 fclose
04009560 g     O .bss	00000190 _atexit0
04000840 g     F .text	00000784 _malloc_r
040078f0 g     O .rwdata	00000004 alt_errno
040023ac g     F .text	000000a8 _fwalk
04001fa0 g     F .text	0000013c _malloc_trim_r
04005da4 g       *ABS*	00000000 __CTOR_END__
04005da4 g       *ABS*	00000000 __flash_rodata_start
04005da4 g       *ABS*	00000000 __DTOR_LIST__
0400364c g     F .text	00000034 alt_irq_init
040033c8 g     F .text	00000060 alt_release_fd
040059d0 g     F .text	00000014 atexit
040028d0 g     F .text	0000006c _write_r
040078d0 g     O .rwdata	00000004 _impure_ptr
04009420 g     O .bss	00000004 alt_argc
04004e34 g     F .text	0000005c _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
04001f88 g     F .text	00000018 __fp_unlock_all
040078dc g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004ec0 g     F .text	00000050 alt_ic_isr_register
04007904 g       *ABS*	00000000 _edata
04004260 g     F .text	00000060 altera_avalon_uart_read_fd
040096f0 g       *ABS*	00000000 _end
040001b8 g       *ABS*	00000000 __ram_exceptions_end
04003c34 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04004fac g     F .text	000000a0 alt_ic_irq_disable
040027e4 g     F .text	00000088 __swrite
040078d8 g     O .rwdata	00000004 __malloc_trim_threshold
040056cc g     F .text	00000020 altera_nios2_qsys_irq_init
040059e4 g     F .text	00000038 exit
04002454 g     F .text	000000b8 _fwalk_reent
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04001f64 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040046c4 g     F .text	00000054 altera_avalon_uart_close
04005d68 g     F .text	0000003c _exit
04004b64 g     F .text	00000140 alt_alarm_start
0400250c g     F .text	000001a8 __smakebuf_r
040002d0 g     F .text	0000008c strlen
040053dc g     F .text	00000154 open
04004e90 g     F .text	00000030 alt_icache_flush_all
040078f8 g     O .rwdata	00000004 alt_priority_mask
04004f10 g     F .text	0000009c alt_ic_irq_enable
04004768 g     F .text	00000204 altera_avalon_uart_read
040078fc g     O .rwdata	00000008 alt_alarm_list
04004dd8 g     F .text	0000005c _do_ctors
04002ce4 g     F .text	000000c8 close
04003030 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
04001f68 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406e14 	ori	at,at,440
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10074 	movhi	r3,1025
 4000130:	18e51804 	addi	r3,r3,-27552
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010074 	movhi	r4,1025
 4000148:	21251804 	addi	r4,r4,-27552
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001d4:	d6be3314 	ori	gp,gp,63692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001dc:	10a50414 	ori	r2,r2,37904

    movhi r3, %hi(__bss_end)
 40001e0:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001e4:	18e5bc14 	ori	r3,r3,38640

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f8:	40030300 	call	4003030 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001fc:	40031d00 	call	40031d0 <alt_main>

04000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000200:	003fff06 	br	4000200 <alt_after_alt_main>

04000204 <main>:
 */

#include <stdio.h>

int main()
{
 4000204:	defffe04 	addi	sp,sp,-8
 4000208:	dfc00115 	stw	ra,4(sp)
 400020c:	df000015 	stw	fp,0(sp)
 4000210:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 4000214:	01010034 	movhi	r4,1024
 4000218:	21176904 	addi	r4,r4,23972
 400021c:	40002bc0 	call	40002bc <puts>

  return 0;
 4000220:	0005883a 	mov	r2,zero
}
 4000224:	e037883a 	mov	sp,fp
 4000228:	dfc00117 	ldw	ra,4(sp)
 400022c:	df000017 	ldw	fp,0(sp)
 4000230:	dec00204 	addi	sp,sp,8
 4000234:	f800283a 	ret

04000238 <_puts_r>:
 4000238:	defff604 	addi	sp,sp,-40
 400023c:	dc400815 	stw	r17,32(sp)
 4000240:	2023883a 	mov	r17,r4
 4000244:	2809883a 	mov	r4,r5
 4000248:	dc000715 	stw	r16,28(sp)
 400024c:	dfc00915 	stw	ra,36(sp)
 4000250:	2821883a 	mov	r16,r5
 4000254:	40002d00 	call	40002d0 <strlen>
 4000258:	10c00044 	addi	r3,r2,1
 400025c:	d8800115 	stw	r2,4(sp)
 4000260:	89400217 	ldw	r5,8(r17)
 4000264:	00810034 	movhi	r2,1024
 4000268:	10976e04 	addi	r2,r2,23992
 400026c:	d8800215 	stw	r2,8(sp)
 4000270:	00800044 	movi	r2,1
 4000274:	d8800315 	stw	r2,12(sp)
 4000278:	8809883a 	mov	r4,r17
 400027c:	00800084 	movi	r2,2
 4000280:	d9800404 	addi	r6,sp,16
 4000284:	dc000015 	stw	r16,0(sp)
 4000288:	d8c00615 	stw	r3,24(sp)
 400028c:	dec00415 	stw	sp,16(sp)
 4000290:	d8800515 	stw	r2,20(sp)
 4000294:	400035c0 	call	400035c <__sfvwrite_r>
 4000298:	1000061e 	bne	r2,zero,40002b4 <_puts_r+0x7c>
 400029c:	00800284 	movi	r2,10
 40002a0:	dfc00917 	ldw	ra,36(sp)
 40002a4:	dc400817 	ldw	r17,32(sp)
 40002a8:	dc000717 	ldw	r16,28(sp)
 40002ac:	dec00a04 	addi	sp,sp,40
 40002b0:	f800283a 	ret
 40002b4:	00bfffc4 	movi	r2,-1
 40002b8:	003ff906 	br	40002a0 <_puts_r+0x68>

040002bc <puts>:
 40002bc:	00810034 	movhi	r2,1024
 40002c0:	109e3404 	addi	r2,r2,30928
 40002c4:	200b883a 	mov	r5,r4
 40002c8:	11000017 	ldw	r4,0(r2)
 40002cc:	40002381 	jmpi	4000238 <_puts_r>

040002d0 <strlen>:
 40002d0:	208000cc 	andi	r2,r4,3
 40002d4:	10001f1e 	bne	r2,zero,4000354 <strlen+0x84>
 40002d8:	20800017 	ldw	r2,0(r4)
 40002dc:	01ffbff4 	movhi	r7,65279
 40002e0:	39ffbfc4 	addi	r7,r7,-257
 40002e4:	01a02074 	movhi	r6,32897
 40002e8:	31a02004 	addi	r6,r6,-32640
 40002ec:	11c7883a 	add	r3,r2,r7
 40002f0:	0084303a 	nor	r2,zero,r2
 40002f4:	1886703a 	and	r3,r3,r2
 40002f8:	1986703a 	and	r3,r3,r6
 40002fc:	2005883a 	mov	r2,r4
 4000300:	1800101e 	bne	r3,zero,4000344 <strlen+0x74>
 4000304:	10800104 	addi	r2,r2,4
 4000308:	10c00017 	ldw	r3,0(r2)
 400030c:	19cb883a 	add	r5,r3,r7
 4000310:	00c6303a 	nor	r3,zero,r3
 4000314:	28c6703a 	and	r3,r5,r3
 4000318:	1986703a 	and	r3,r3,r6
 400031c:	1800091e 	bne	r3,zero,4000344 <strlen+0x74>
 4000320:	10800104 	addi	r2,r2,4
 4000324:	10c00017 	ldw	r3,0(r2)
 4000328:	19cb883a 	add	r5,r3,r7
 400032c:	00c6303a 	nor	r3,zero,r3
 4000330:	28c6703a 	and	r3,r5,r3
 4000334:	1986703a 	and	r3,r3,r6
 4000338:	183ff226 	beq	r3,zero,4000304 <strlen+0x34>
 400033c:	00000106 	br	4000344 <strlen+0x74>
 4000340:	10800044 	addi	r2,r2,1
 4000344:	10c00007 	ldb	r3,0(r2)
 4000348:	183ffd1e 	bne	r3,zero,4000340 <strlen+0x70>
 400034c:	1105c83a 	sub	r2,r2,r4
 4000350:	f800283a 	ret
 4000354:	2005883a 	mov	r2,r4
 4000358:	003ffa06 	br	4000344 <strlen+0x74>

0400035c <__sfvwrite_r>:
 400035c:	30800217 	ldw	r2,8(r6)
 4000360:	defff504 	addi	sp,sp,-44
 4000364:	dd400615 	stw	r21,24(sp)
 4000368:	dd000515 	stw	r20,20(sp)
 400036c:	dc000115 	stw	r16,4(sp)
 4000370:	dfc00a15 	stw	ra,40(sp)
 4000374:	df000915 	stw	fp,36(sp)
 4000378:	ddc00815 	stw	r23,32(sp)
 400037c:	dd800715 	stw	r22,28(sp)
 4000380:	dcc00415 	stw	r19,16(sp)
 4000384:	dc800315 	stw	r18,12(sp)
 4000388:	dc400215 	stw	r17,8(sp)
 400038c:	3029883a 	mov	r20,r6
 4000390:	202b883a 	mov	r21,r4
 4000394:	2821883a 	mov	r16,r5
 4000398:	10002126 	beq	r2,zero,4000420 <__sfvwrite_r+0xc4>
 400039c:	2880030b 	ldhu	r2,12(r5)
 40003a0:	10c0020c 	andi	r3,r2,8
 40003a4:	18ffffcc 	andi	r3,r3,65535
 40003a8:	18e0001c 	xori	r3,r3,32768
 40003ac:	18e00004 	addi	r3,r3,-32768
 40003b0:	18002826 	beq	r3,zero,4000454 <__sfvwrite_r+0xf8>
 40003b4:	28c00417 	ldw	r3,16(r5)
 40003b8:	18002626 	beq	r3,zero,4000454 <__sfvwrite_r+0xf8>
 40003bc:	10c0008c 	andi	r3,r2,2
 40003c0:	18ffffcc 	andi	r3,r3,65535
 40003c4:	18e0001c 	xori	r3,r3,32768
 40003c8:	18e00004 	addi	r3,r3,-32768
 40003cc:	a4400017 	ldw	r17,0(r20)
 40003d0:	18002b26 	beq	r3,zero,4000480 <__sfvwrite_r+0x124>
 40003d4:	0027883a 	mov	r19,zero
 40003d8:	0025883a 	mov	r18,zero
 40003dc:	05810004 	movi	r22,1024
 40003e0:	980d883a 	mov	r6,r19
 40003e4:	a809883a 	mov	r4,r21
 40003e8:	90004f26 	beq	r18,zero,4000528 <__sfvwrite_r+0x1cc>
 40003ec:	900f883a 	mov	r7,r18
 40003f0:	81400717 	ldw	r5,28(r16)
 40003f4:	b480012e 	bgeu	r22,r18,40003fc <__sfvwrite_r+0xa0>
 40003f8:	01c10004 	movi	r7,1024
 40003fc:	80800917 	ldw	r2,36(r16)
 4000400:	103ee83a 	callr	r2
 4000404:	0080540e 	bge	zero,r2,4000558 <__sfvwrite_r+0x1fc>
 4000408:	a0c00217 	ldw	r3,8(r20)
 400040c:	98a7883a 	add	r19,r19,r2
 4000410:	90a5c83a 	sub	r18,r18,r2
 4000414:	1885c83a 	sub	r2,r3,r2
 4000418:	a0800215 	stw	r2,8(r20)
 400041c:	103ff01e 	bne	r2,zero,40003e0 <__sfvwrite_r+0x84>
 4000420:	0005883a 	mov	r2,zero
 4000424:	dfc00a17 	ldw	ra,40(sp)
 4000428:	df000917 	ldw	fp,36(sp)
 400042c:	ddc00817 	ldw	r23,32(sp)
 4000430:	dd800717 	ldw	r22,28(sp)
 4000434:	dd400617 	ldw	r21,24(sp)
 4000438:	dd000517 	ldw	r20,20(sp)
 400043c:	dcc00417 	ldw	r19,16(sp)
 4000440:	dc800317 	ldw	r18,12(sp)
 4000444:	dc400217 	ldw	r17,8(sp)
 4000448:	dc000117 	ldw	r16,4(sp)
 400044c:	dec00b04 	addi	sp,sp,44
 4000450:	f800283a 	ret
 4000454:	a809883a 	mov	r4,r21
 4000458:	800b883a 	mov	r5,r16
 400045c:	400193c0 	call	400193c <__swsetup_r>
 4000460:	1000f01e 	bne	r2,zero,4000824 <__sfvwrite_r+0x4c8>
 4000464:	8080030b 	ldhu	r2,12(r16)
 4000468:	a4400017 	ldw	r17,0(r20)
 400046c:	10c0008c 	andi	r3,r2,2
 4000470:	18ffffcc 	andi	r3,r3,65535
 4000474:	18e0001c 	xori	r3,r3,32768
 4000478:	18e00004 	addi	r3,r3,-32768
 400047c:	183fd51e 	bne	r3,zero,40003d4 <__sfvwrite_r+0x78>
 4000480:	10c0004c 	andi	r3,r2,1
 4000484:	002d883a 	mov	r22,zero
 4000488:	1800381e 	bne	r3,zero,400056c <__sfvwrite_r+0x210>
 400048c:	0025883a 	mov	r18,zero
 4000490:	90002126 	beq	r18,zero,4000518 <__sfvwrite_r+0x1bc>
 4000494:	10c0800c 	andi	r3,r2,512
 4000498:	18ffffcc 	andi	r3,r3,65535
 400049c:	18e0001c 	xori	r3,r3,32768
 40004a0:	18e00004 	addi	r3,r3,-32768
 40004a4:	84c00217 	ldw	r19,8(r16)
 40004a8:	18006b26 	beq	r3,zero,4000658 <__sfvwrite_r+0x2fc>
 40004ac:	980f883a 	mov	r7,r19
 40004b0:	94c08636 	bltu	r18,r19,40006cc <__sfvwrite_r+0x370>
 40004b4:	10c1200c 	andi	r3,r2,1152
 40004b8:	18009f1e 	bne	r3,zero,4000738 <__sfvwrite_r+0x3dc>
 40004bc:	81000017 	ldw	r4,0(r16)
 40004c0:	982f883a 	mov	r23,r19
 40004c4:	9039883a 	mov	fp,r18
 40004c8:	9027883a 	mov	r19,r18
 40004cc:	380d883a 	mov	r6,r7
 40004d0:	b00b883a 	mov	r5,r22
 40004d4:	d9c00015 	stw	r7,0(sp)
 40004d8:	40011b40 	call	40011b4 <memmove>
 40004dc:	d9c00017 	ldw	r7,0(sp)
 40004e0:	81000217 	ldw	r4,8(r16)
 40004e4:	80800017 	ldw	r2,0(r16)
 40004e8:	25efc83a 	sub	r23,r4,r23
 40004ec:	11cf883a 	add	r7,r2,r7
 40004f0:	85c00215 	stw	r23,8(r16)
 40004f4:	81c00015 	stw	r7,0(r16)
 40004f8:	a0800217 	ldw	r2,8(r20)
 40004fc:	b72d883a 	add	r22,r22,fp
 4000500:	9725c83a 	sub	r18,r18,fp
 4000504:	14e7c83a 	sub	r19,r2,r19
 4000508:	a4c00215 	stw	r19,8(r20)
 400050c:	983fc426 	beq	r19,zero,4000420 <__sfvwrite_r+0xc4>
 4000510:	8080030b 	ldhu	r2,12(r16)
 4000514:	903fdf1e 	bne	r18,zero,4000494 <__sfvwrite_r+0x138>
 4000518:	8d800017 	ldw	r22,0(r17)
 400051c:	8c800117 	ldw	r18,4(r17)
 4000520:	8c400204 	addi	r17,r17,8
 4000524:	003fda06 	br	4000490 <__sfvwrite_r+0x134>
 4000528:	8cc00017 	ldw	r19,0(r17)
 400052c:	8c800117 	ldw	r18,4(r17)
 4000530:	8c400204 	addi	r17,r17,8
 4000534:	003faa06 	br	40003e0 <__sfvwrite_r+0x84>
 4000538:	40012dc0 	call	40012dc <_realloc_r>
 400053c:	102f883a 	mov	r23,r2
 4000540:	10009f1e 	bne	r2,zero,40007c0 <__sfvwrite_r+0x464>
 4000544:	81400417 	ldw	r5,16(r16)
 4000548:	a809883a 	mov	r4,r21
 400054c:	40020dc0 	call	40020dc <_free_r>
 4000550:	00800304 	movi	r2,12
 4000554:	a8800015 	stw	r2,0(r21)
 4000558:	80c0030b 	ldhu	r3,12(r16)
 400055c:	00bfffc4 	movi	r2,-1
 4000560:	18c01014 	ori	r3,r3,64
 4000564:	80c0030d 	sth	r3,12(r16)
 4000568:	003fae06 	br	4000424 <__sfvwrite_r+0xc8>
 400056c:	0007883a 	mov	r3,zero
 4000570:	0039883a 	mov	fp,zero
 4000574:	0025883a 	mov	r18,zero
 4000578:	90001e26 	beq	r18,zero,40005f4 <__sfvwrite_r+0x298>
 400057c:	18006526 	beq	r3,zero,4000714 <__sfvwrite_r+0x3b8>
 4000580:	b02f883a 	mov	r23,r22
 4000584:	9580012e 	bgeu	r18,r22,400058c <__sfvwrite_r+0x230>
 4000588:	902f883a 	mov	r23,r18
 400058c:	81000017 	ldw	r4,0(r16)
 4000590:	80800417 	ldw	r2,16(r16)
 4000594:	84c00217 	ldw	r19,8(r16)
 4000598:	81c00517 	ldw	r7,20(r16)
 400059c:	1100022e 	bgeu	r2,r4,40005a8 <__sfvwrite_r+0x24c>
 40005a0:	99e7883a 	add	r19,r19,r7
 40005a4:	9dc01816 	blt	r19,r23,4000608 <__sfvwrite_r+0x2ac>
 40005a8:	b9c03b16 	blt	r23,r7,4000698 <__sfvwrite_r+0x33c>
 40005ac:	80800917 	ldw	r2,36(r16)
 40005b0:	81400717 	ldw	r5,28(r16)
 40005b4:	a809883a 	mov	r4,r21
 40005b8:	d8c00015 	stw	r3,0(sp)
 40005bc:	e00d883a 	mov	r6,fp
 40005c0:	103ee83a 	callr	r2
 40005c4:	1027883a 	mov	r19,r2
 40005c8:	d8c00017 	ldw	r3,0(sp)
 40005cc:	00bfe20e 	bge	zero,r2,4000558 <__sfvwrite_r+0x1fc>
 40005d0:	b4edc83a 	sub	r22,r22,r19
 40005d4:	b0001a26 	beq	r22,zero,4000640 <__sfvwrite_r+0x2e4>
 40005d8:	a0800217 	ldw	r2,8(r20)
 40005dc:	e4f9883a 	add	fp,fp,r19
 40005e0:	94e5c83a 	sub	r18,r18,r19
 40005e4:	14e7c83a 	sub	r19,r2,r19
 40005e8:	a4c00215 	stw	r19,8(r20)
 40005ec:	983f8c26 	beq	r19,zero,4000420 <__sfvwrite_r+0xc4>
 40005f0:	903fe21e 	bne	r18,zero,400057c <__sfvwrite_r+0x220>
 40005f4:	8f000017 	ldw	fp,0(r17)
 40005f8:	8c800117 	ldw	r18,4(r17)
 40005fc:	0007883a 	mov	r3,zero
 4000600:	8c400204 	addi	r17,r17,8
 4000604:	003fdc06 	br	4000578 <__sfvwrite_r+0x21c>
 4000608:	e00b883a 	mov	r5,fp
 400060c:	980d883a 	mov	r6,r19
 4000610:	d8c00015 	stw	r3,0(sp)
 4000614:	40011b40 	call	40011b4 <memmove>
 4000618:	80800017 	ldw	r2,0(r16)
 400061c:	a809883a 	mov	r4,r21
 4000620:	800b883a 	mov	r5,r16
 4000624:	14c5883a 	add	r2,r2,r19
 4000628:	80800015 	stw	r2,0(r16)
 400062c:	4001ab00 	call	4001ab0 <_fflush_r>
 4000630:	d8c00017 	ldw	r3,0(sp)
 4000634:	103fc81e 	bne	r2,zero,4000558 <__sfvwrite_r+0x1fc>
 4000638:	b4edc83a 	sub	r22,r22,r19
 400063c:	b03fe61e 	bne	r22,zero,40005d8 <__sfvwrite_r+0x27c>
 4000640:	a809883a 	mov	r4,r21
 4000644:	800b883a 	mov	r5,r16
 4000648:	4001ab00 	call	4001ab0 <_fflush_r>
 400064c:	103fc21e 	bne	r2,zero,4000558 <__sfvwrite_r+0x1fc>
 4000650:	0007883a 	mov	r3,zero
 4000654:	003fe006 	br	40005d8 <__sfvwrite_r+0x27c>
 4000658:	81000017 	ldw	r4,0(r16)
 400065c:	80800417 	ldw	r2,16(r16)
 4000660:	1100022e 	bgeu	r2,r4,400066c <__sfvwrite_r+0x310>
 4000664:	9839883a 	mov	fp,r19
 4000668:	9c806036 	bltu	r19,r18,40007ec <__sfvwrite_r+0x490>
 400066c:	81c00517 	ldw	r7,20(r16)
 4000670:	91c01c36 	bltu	r18,r7,40006e4 <__sfvwrite_r+0x388>
 4000674:	80800917 	ldw	r2,36(r16)
 4000678:	81400717 	ldw	r5,28(r16)
 400067c:	a809883a 	mov	r4,r21
 4000680:	b00d883a 	mov	r6,r22
 4000684:	103ee83a 	callr	r2
 4000688:	1027883a 	mov	r19,r2
 400068c:	00bfb20e 	bge	zero,r2,4000558 <__sfvwrite_r+0x1fc>
 4000690:	1039883a 	mov	fp,r2
 4000694:	003f9806 	br	40004f8 <__sfvwrite_r+0x19c>
 4000698:	b80d883a 	mov	r6,r23
 400069c:	e00b883a 	mov	r5,fp
 40006a0:	d8c00015 	stw	r3,0(sp)
 40006a4:	40011b40 	call	40011b4 <memmove>
 40006a8:	80800217 	ldw	r2,8(r16)
 40006ac:	81000017 	ldw	r4,0(r16)
 40006b0:	b827883a 	mov	r19,r23
 40006b4:	15c5c83a 	sub	r2,r2,r23
 40006b8:	25ef883a 	add	r23,r4,r23
 40006bc:	80800215 	stw	r2,8(r16)
 40006c0:	85c00015 	stw	r23,0(r16)
 40006c4:	d8c00017 	ldw	r3,0(sp)
 40006c8:	003fc106 	br	40005d0 <__sfvwrite_r+0x274>
 40006cc:	81000017 	ldw	r4,0(r16)
 40006d0:	902f883a 	mov	r23,r18
 40006d4:	9039883a 	mov	fp,r18
 40006d8:	9027883a 	mov	r19,r18
 40006dc:	900f883a 	mov	r7,r18
 40006e0:	003f7a06 	br	40004cc <__sfvwrite_r+0x170>
 40006e4:	b00b883a 	mov	r5,r22
 40006e8:	900d883a 	mov	r6,r18
 40006ec:	40011b40 	call	40011b4 <memmove>
 40006f0:	80c00217 	ldw	r3,8(r16)
 40006f4:	80800017 	ldw	r2,0(r16)
 40006f8:	9027883a 	mov	r19,r18
 40006fc:	1c87c83a 	sub	r3,r3,r18
 4000700:	1485883a 	add	r2,r2,r18
 4000704:	80c00215 	stw	r3,8(r16)
 4000708:	80800015 	stw	r2,0(r16)
 400070c:	9039883a 	mov	fp,r18
 4000710:	003f7906 	br	40004f8 <__sfvwrite_r+0x19c>
 4000714:	e009883a 	mov	r4,fp
 4000718:	01400284 	movi	r5,10
 400071c:	900d883a 	mov	r6,r18
 4000720:	4000fc40 	call	4000fc4 <memchr>
 4000724:	10003c26 	beq	r2,zero,4000818 <__sfvwrite_r+0x4bc>
 4000728:	15800044 	addi	r22,r2,1
 400072c:	b72dc83a 	sub	r22,r22,fp
 4000730:	00c00044 	movi	r3,1
 4000734:	003f9206 	br	4000580 <__sfvwrite_r+0x224>
 4000738:	81000517 	ldw	r4,20(r16)
 400073c:	81400417 	ldw	r5,16(r16)
 4000740:	80c00017 	ldw	r3,0(r16)
 4000744:	210d883a 	add	r6,r4,r4
 4000748:	3109883a 	add	r4,r6,r4
 400074c:	2026d7fa 	srli	r19,r4,31
 4000750:	1979c83a 	sub	fp,r3,r5
 4000754:	e1800044 	addi	r6,fp,1
 4000758:	9909883a 	add	r4,r19,r4
 400075c:	2027d07a 	srai	r19,r4,1
 4000760:	3489883a 	add	r4,r6,r18
 4000764:	980d883a 	mov	r6,r19
 4000768:	9900022e 	bgeu	r19,r4,4000774 <__sfvwrite_r+0x418>
 400076c:	2027883a 	mov	r19,r4
 4000770:	200d883a 	mov	r6,r4
 4000774:	1081000c 	andi	r2,r2,1024
 4000778:	10bfffcc 	andi	r2,r2,65535
 400077c:	10a0001c 	xori	r2,r2,32768
 4000780:	10a00004 	addi	r2,r2,-32768
 4000784:	a809883a 	mov	r4,r21
 4000788:	103f6b26 	beq	r2,zero,4000538 <__sfvwrite_r+0x1dc>
 400078c:	300b883a 	mov	r5,r6
 4000790:	40008400 	call	4000840 <_malloc_r>
 4000794:	102f883a 	mov	r23,r2
 4000798:	103f6d26 	beq	r2,zero,4000550 <__sfvwrite_r+0x1f4>
 400079c:	81400417 	ldw	r5,16(r16)
 40007a0:	1009883a 	mov	r4,r2
 40007a4:	e00d883a 	mov	r6,fp
 40007a8:	40010bc0 	call	40010bc <memcpy>
 40007ac:	8080030b 	ldhu	r2,12(r16)
 40007b0:	00fedfc4 	movi	r3,-1153
 40007b4:	10c4703a 	and	r2,r2,r3
 40007b8:	10802014 	ori	r2,r2,128
 40007bc:	8080030d 	sth	r2,12(r16)
 40007c0:	bf09883a 	add	r4,r23,fp
 40007c4:	9f07c83a 	sub	r3,r19,fp
 40007c8:	85c00415 	stw	r23,16(r16)
 40007cc:	84c00515 	stw	r19,20(r16)
 40007d0:	81000015 	stw	r4,0(r16)
 40007d4:	902f883a 	mov	r23,r18
 40007d8:	80c00215 	stw	r3,8(r16)
 40007dc:	9039883a 	mov	fp,r18
 40007e0:	9027883a 	mov	r19,r18
 40007e4:	900f883a 	mov	r7,r18
 40007e8:	003f3806 	br	40004cc <__sfvwrite_r+0x170>
 40007ec:	b00b883a 	mov	r5,r22
 40007f0:	980d883a 	mov	r6,r19
 40007f4:	40011b40 	call	40011b4 <memmove>
 40007f8:	80800017 	ldw	r2,0(r16)
 40007fc:	a809883a 	mov	r4,r21
 4000800:	800b883a 	mov	r5,r16
 4000804:	14c5883a 	add	r2,r2,r19
 4000808:	80800015 	stw	r2,0(r16)
 400080c:	4001ab00 	call	4001ab0 <_fflush_r>
 4000810:	103f3926 	beq	r2,zero,40004f8 <__sfvwrite_r+0x19c>
 4000814:	003f5006 	br	4000558 <__sfvwrite_r+0x1fc>
 4000818:	95800044 	addi	r22,r18,1
 400081c:	00c00044 	movi	r3,1
 4000820:	003f5706 	br	4000580 <__sfvwrite_r+0x224>
 4000824:	80c0030b 	ldhu	r3,12(r16)
 4000828:	00bfffc4 	movi	r2,-1
 400082c:	18c01014 	ori	r3,r3,64
 4000830:	80c0030d 	sth	r3,12(r16)
 4000834:	00c00244 	movi	r3,9
 4000838:	a8c00015 	stw	r3,0(r21)
 400083c:	003ef906 	br	4000424 <__sfvwrite_r+0xc8>

04000840 <_malloc_r>:
 4000840:	defff604 	addi	sp,sp,-40
 4000844:	dc800215 	stw	r18,8(sp)
 4000848:	dfc00915 	stw	ra,36(sp)
 400084c:	df000815 	stw	fp,32(sp)
 4000850:	ddc00715 	stw	r23,28(sp)
 4000854:	dd800615 	stw	r22,24(sp)
 4000858:	dd400515 	stw	r21,20(sp)
 400085c:	dd000415 	stw	r20,16(sp)
 4000860:	dcc00315 	stw	r19,12(sp)
 4000864:	dc400115 	stw	r17,4(sp)
 4000868:	dc000015 	stw	r16,0(sp)
 400086c:	288002c4 	addi	r2,r5,11
 4000870:	00c00584 	movi	r3,22
 4000874:	2025883a 	mov	r18,r4
 4000878:	18802b2e 	bgeu	r3,r2,4000928 <_malloc_r+0xe8>
 400087c:	047ffe04 	movi	r17,-8
 4000880:	1462703a 	and	r17,r2,r17
 4000884:	88002a16 	blt	r17,zero,4000930 <_malloc_r+0xf0>
 4000888:	89402936 	bltu	r17,r5,4000930 <_malloc_r+0xf0>
 400088c:	9009883a 	mov	r4,r18
 4000890:	40032480 	call	4003248 <__malloc_lock>
 4000894:	00807dc4 	movi	r2,503
 4000898:	14402936 	bltu	r2,r17,4000940 <_malloc_r+0x100>
 400089c:	8808d0fa 	srli	r4,r17,3
 40008a0:	04c10034 	movhi	r19,1024
 40008a4:	9cd87e04 	addi	r19,r19,25080
 40008a8:	2105883a 	add	r2,r4,r4
 40008ac:	1085883a 	add	r2,r2,r2
 40008b0:	1085883a 	add	r2,r2,r2
 40008b4:	9885883a 	add	r2,r19,r2
 40008b8:	14000317 	ldw	r16,12(r2)
 40008bc:	80815526 	beq	r16,r2,4000e14 <_malloc_r+0x5d4>
 40008c0:	81000117 	ldw	r4,4(r16)
 40008c4:	00bfff04 	movi	r2,-4
 40008c8:	80c00317 	ldw	r3,12(r16)
 40008cc:	2084703a 	and	r2,r4,r2
 40008d0:	8085883a 	add	r2,r16,r2
 40008d4:	11800117 	ldw	r6,4(r2)
 40008d8:	81400217 	ldw	r5,8(r16)
 40008dc:	9009883a 	mov	r4,r18
 40008e0:	31800054 	ori	r6,r6,1
 40008e4:	11800115 	stw	r6,4(r2)
 40008e8:	28c00315 	stw	r3,12(r5)
 40008ec:	19400215 	stw	r5,8(r3)
 40008f0:	40032680 	call	4003268 <__malloc_unlock>
 40008f4:	80800204 	addi	r2,r16,8
 40008f8:	dfc00917 	ldw	ra,36(sp)
 40008fc:	df000817 	ldw	fp,32(sp)
 4000900:	ddc00717 	ldw	r23,28(sp)
 4000904:	dd800617 	ldw	r22,24(sp)
 4000908:	dd400517 	ldw	r21,20(sp)
 400090c:	dd000417 	ldw	r20,16(sp)
 4000910:	dcc00317 	ldw	r19,12(sp)
 4000914:	dc800217 	ldw	r18,8(sp)
 4000918:	dc400117 	ldw	r17,4(sp)
 400091c:	dc000017 	ldw	r16,0(sp)
 4000920:	dec00a04 	addi	sp,sp,40
 4000924:	f800283a 	ret
 4000928:	04400404 	movi	r17,16
 400092c:	897fd72e 	bgeu	r17,r5,400088c <_malloc_r+0x4c>
 4000930:	00800304 	movi	r2,12
 4000934:	90800015 	stw	r2,0(r18)
 4000938:	0005883a 	mov	r2,zero
 400093c:	003fee06 	br	40008f8 <_malloc_r+0xb8>
 4000940:	8808d27a 	srli	r4,r17,9
 4000944:	20007126 	beq	r4,zero,4000b0c <_malloc_r+0x2cc>
 4000948:	00800104 	movi	r2,4
 400094c:	1100eb36 	bltu	r2,r4,4000cfc <_malloc_r+0x4bc>
 4000950:	8808d1ba 	srli	r4,r17,6
 4000954:	21000e04 	addi	r4,r4,56
 4000958:	210b883a 	add	r5,r4,r4
 400095c:	294b883a 	add	r5,r5,r5
 4000960:	294b883a 	add	r5,r5,r5
 4000964:	04c10034 	movhi	r19,1024
 4000968:	9cd87e04 	addi	r19,r19,25080
 400096c:	994b883a 	add	r5,r19,r5
 4000970:	2c000317 	ldw	r16,12(r5)
 4000974:	2c000e26 	beq	r5,r16,40009b0 <_malloc_r+0x170>
 4000978:	80c00117 	ldw	r3,4(r16)
 400097c:	01ffff04 	movi	r7,-4
 4000980:	018003c4 	movi	r6,15
 4000984:	19c6703a 	and	r3,r3,r7
 4000988:	1c45c83a 	sub	r2,r3,r17
 400098c:	30800716 	blt	r6,r2,40009ac <_malloc_r+0x16c>
 4000990:	1000610e 	bge	r2,zero,4000b18 <_malloc_r+0x2d8>
 4000994:	84000317 	ldw	r16,12(r16)
 4000998:	2c000526 	beq	r5,r16,40009b0 <_malloc_r+0x170>
 400099c:	80c00117 	ldw	r3,4(r16)
 40009a0:	19c6703a 	and	r3,r3,r7
 40009a4:	1c45c83a 	sub	r2,r3,r17
 40009a8:	30bff90e 	bge	r6,r2,4000990 <_malloc_r+0x150>
 40009ac:	213fffc4 	addi	r4,r4,-1
 40009b0:	21000044 	addi	r4,r4,1
 40009b4:	9c000417 	ldw	r16,16(r19)
 40009b8:	00c10034 	movhi	r3,1024
 40009bc:	18d87e04 	addi	r3,r3,25080
 40009c0:	1a400204 	addi	r9,r3,8
 40009c4:	8240ff26 	beq	r16,r9,4000dc4 <_malloc_r+0x584>
 40009c8:	81400117 	ldw	r5,4(r16)
 40009cc:	00bfff04 	movi	r2,-4
 40009d0:	018003c4 	movi	r6,15
 40009d4:	2884703a 	and	r2,r5,r2
 40009d8:	144bc83a 	sub	r5,r2,r17
 40009dc:	3140ea16 	blt	r6,r5,4000d88 <_malloc_r+0x548>
 40009e0:	1a400515 	stw	r9,20(r3)
 40009e4:	1a400415 	stw	r9,16(r3)
 40009e8:	2800570e 	bge	r5,zero,4000b48 <_malloc_r+0x308>
 40009ec:	01407fc4 	movi	r5,511
 40009f0:	2880ca36 	bltu	r5,r2,4000d1c <_malloc_r+0x4dc>
 40009f4:	1004d0fa 	srli	r2,r2,3
 40009f8:	02000044 	movi	r8,1
 40009fc:	19c00117 	ldw	r7,4(r3)
 4000a00:	108b883a 	add	r5,r2,r2
 4000a04:	294b883a 	add	r5,r5,r5
 4000a08:	1005d0ba 	srai	r2,r2,2
 4000a0c:	294b883a 	add	r5,r5,r5
 4000a10:	28cb883a 	add	r5,r5,r3
 4000a14:	29800217 	ldw	r6,8(r5)
 4000a18:	4084983a 	sll	r2,r8,r2
 4000a1c:	81400315 	stw	r5,12(r16)
 4000a20:	81800215 	stw	r6,8(r16)
 4000a24:	11c4b03a 	or	r2,r2,r7
 4000a28:	18800115 	stw	r2,4(r3)
 4000a2c:	2c000215 	stw	r16,8(r5)
 4000a30:	34000315 	stw	r16,12(r6)
 4000a34:	200bd0ba 	srai	r5,r4,2
 4000a38:	00c00044 	movi	r3,1
 4000a3c:	194a983a 	sll	r5,r3,r5
 4000a40:	11404936 	bltu	r2,r5,4000b68 <_malloc_r+0x328>
 4000a44:	1146703a 	and	r3,r2,r5
 4000a48:	18000a1e 	bne	r3,zero,4000a74 <_malloc_r+0x234>
 4000a4c:	00ffff04 	movi	r3,-4
 4000a50:	294b883a 	add	r5,r5,r5
 4000a54:	20c8703a 	and	r4,r4,r3
 4000a58:	1146703a 	and	r3,r2,r5
 4000a5c:	21000104 	addi	r4,r4,4
 4000a60:	1800041e 	bne	r3,zero,4000a74 <_malloc_r+0x234>
 4000a64:	294b883a 	add	r5,r5,r5
 4000a68:	1146703a 	and	r3,r2,r5
 4000a6c:	21000104 	addi	r4,r4,4
 4000a70:	183ffc26 	beq	r3,zero,4000a64 <_malloc_r+0x224>
 4000a74:	023fff04 	movi	r8,-4
 4000a78:	01c003c4 	movi	r7,15
 4000a7c:	2105883a 	add	r2,r4,r4
 4000a80:	1085883a 	add	r2,r2,r2
 4000a84:	1085883a 	add	r2,r2,r2
 4000a88:	9899883a 	add	r12,r19,r2
 4000a8c:	62800304 	addi	r10,r12,12
 4000a90:	2017883a 	mov	r11,r4
 4000a94:	54000017 	ldw	r16,0(r10)
 4000a98:	51bffd04 	addi	r6,r10,-12
 4000a9c:	8180041e 	bne	r16,r6,4000ab0 <_malloc_r+0x270>
 4000aa0:	0000ca06 	br	4000dcc <_malloc_r+0x58c>
 4000aa4:	10001c0e 	bge	r2,zero,4000b18 <_malloc_r+0x2d8>
 4000aa8:	84000317 	ldw	r16,12(r16)
 4000aac:	8180c726 	beq	r16,r6,4000dcc <_malloc_r+0x58c>
 4000ab0:	80c00117 	ldw	r3,4(r16)
 4000ab4:	1a06703a 	and	r3,r3,r8
 4000ab8:	1c45c83a 	sub	r2,r3,r17
 4000abc:	38bff90e 	bge	r7,r2,4000aa4 <_malloc_r+0x264>
 4000ac0:	81000317 	ldw	r4,12(r16)
 4000ac4:	81400217 	ldw	r5,8(r16)
 4000ac8:	8447883a 	add	r3,r16,r17
 4000acc:	8c400054 	ori	r17,r17,1
 4000ad0:	29000315 	stw	r4,12(r5)
 4000ad4:	21400215 	stw	r5,8(r4)
 4000ad8:	84400115 	stw	r17,4(r16)
 4000adc:	1889883a 	add	r4,r3,r2
 4000ae0:	11400054 	ori	r5,r2,1
 4000ae4:	98c00515 	stw	r3,20(r19)
 4000ae8:	98c00415 	stw	r3,16(r19)
 4000aec:	20800015 	stw	r2,0(r4)
 4000af0:	1a400315 	stw	r9,12(r3)
 4000af4:	1a400215 	stw	r9,8(r3)
 4000af8:	19400115 	stw	r5,4(r3)
 4000afc:	9009883a 	mov	r4,r18
 4000b00:	40032680 	call	4003268 <__malloc_unlock>
 4000b04:	80800204 	addi	r2,r16,8
 4000b08:	003f7b06 	br	40008f8 <_malloc_r+0xb8>
 4000b0c:	8808d0fa 	srli	r4,r17,3
 4000b10:	210b883a 	add	r5,r4,r4
 4000b14:	003f9106 	br	400095c <_malloc_r+0x11c>
 4000b18:	80c7883a 	add	r3,r16,r3
 4000b1c:	19400117 	ldw	r5,4(r3)
 4000b20:	80800317 	ldw	r2,12(r16)
 4000b24:	81000217 	ldw	r4,8(r16)
 4000b28:	29400054 	ori	r5,r5,1
 4000b2c:	19400115 	stw	r5,4(r3)
 4000b30:	20800315 	stw	r2,12(r4)
 4000b34:	11000215 	stw	r4,8(r2)
 4000b38:	9009883a 	mov	r4,r18
 4000b3c:	40032680 	call	4003268 <__malloc_unlock>
 4000b40:	80800204 	addi	r2,r16,8
 4000b44:	003f6c06 	br	40008f8 <_malloc_r+0xb8>
 4000b48:	8085883a 	add	r2,r16,r2
 4000b4c:	10c00117 	ldw	r3,4(r2)
 4000b50:	9009883a 	mov	r4,r18
 4000b54:	18c00054 	ori	r3,r3,1
 4000b58:	10c00115 	stw	r3,4(r2)
 4000b5c:	40032680 	call	4003268 <__malloc_unlock>
 4000b60:	80800204 	addi	r2,r16,8
 4000b64:	003f6406 	br	40008f8 <_malloc_r+0xb8>
 4000b68:	9c000217 	ldw	r16,8(r19)
 4000b6c:	00bfff04 	movi	r2,-4
 4000b70:	85400117 	ldw	r21,4(r16)
 4000b74:	a8aa703a 	and	r21,r21,r2
 4000b78:	ac400336 	bltu	r21,r17,4000b88 <_malloc_r+0x348>
 4000b7c:	ac45c83a 	sub	r2,r21,r17
 4000b80:	00c003c4 	movi	r3,15
 4000b84:	18805316 	blt	r3,r2,4000cd4 <_malloc_r+0x494>
 4000b88:	d5e6d317 	ldw	r23,-25780(gp)
 4000b8c:	d0e00217 	ldw	r3,-32760(gp)
 4000b90:	00bfffc4 	movi	r2,-1
 4000b94:	8579883a 	add	fp,r16,r21
 4000b98:	8def883a 	add	r23,r17,r23
 4000b9c:	1880d226 	beq	r3,r2,4000ee8 <_malloc_r+0x6a8>
 4000ba0:	bdc403c4 	addi	r23,r23,4111
 4000ba4:	00bc0004 	movi	r2,-4096
 4000ba8:	b8ae703a 	and	r23,r23,r2
 4000bac:	9009883a 	mov	r4,r18
 4000bb0:	b80b883a 	mov	r5,r23
 4000bb4:	40018d80 	call	40018d8 <_sbrk_r>
 4000bb8:	1029883a 	mov	r20,r2
 4000bbc:	00bfffc4 	movi	r2,-1
 4000bc0:	a080d126 	beq	r20,r2,4000f08 <_malloc_r+0x6c8>
 4000bc4:	a7009f36 	bltu	r20,fp,4000e44 <_malloc_r+0x604>
 4000bc8:	05810074 	movhi	r22,1025
 4000bcc:	b5a50e04 	addi	r22,r22,-27592
 4000bd0:	b0800017 	ldw	r2,0(r22)
 4000bd4:	b885883a 	add	r2,r23,r2
 4000bd8:	b0800015 	stw	r2,0(r22)
 4000bdc:	e500cf26 	beq	fp,r20,4000f1c <_malloc_r+0x6dc>
 4000be0:	d1200217 	ldw	r4,-32760(gp)
 4000be4:	00ffffc4 	movi	r3,-1
 4000be8:	20c0e026 	beq	r4,r3,4000f6c <_malloc_r+0x72c>
 4000bec:	a739c83a 	sub	fp,r20,fp
 4000bf0:	1705883a 	add	r2,r2,fp
 4000bf4:	b0800015 	stw	r2,0(r22)
 4000bf8:	a08001cc 	andi	r2,r20,7
 4000bfc:	1000a526 	beq	r2,zero,4000e94 <_malloc_r+0x654>
 4000c00:	a0a9c83a 	sub	r20,r20,r2
 4000c04:	00c40204 	movi	r3,4104
 4000c08:	a5000204 	addi	r20,r20,8
 4000c0c:	1885c83a 	sub	r2,r3,r2
 4000c10:	a5c7883a 	add	r3,r20,r23
 4000c14:	18c3ffcc 	andi	r3,r3,4095
 4000c18:	10efc83a 	sub	r23,r2,r3
 4000c1c:	9009883a 	mov	r4,r18
 4000c20:	b80b883a 	mov	r5,r23
 4000c24:	40018d80 	call	40018d8 <_sbrk_r>
 4000c28:	00ffffc4 	movi	r3,-1
 4000c2c:	10c0cc26 	beq	r2,r3,4000f60 <_malloc_r+0x720>
 4000c30:	1505c83a 	sub	r2,r2,r20
 4000c34:	b887883a 	add	r3,r23,r2
 4000c38:	18c00054 	ori	r3,r3,1
 4000c3c:	b0800017 	ldw	r2,0(r22)
 4000c40:	9d000215 	stw	r20,8(r19)
 4000c44:	a0c00115 	stw	r3,4(r20)
 4000c48:	b885883a 	add	r2,r23,r2
 4000c4c:	b0800015 	stw	r2,0(r22)
 4000c50:	84c00e26 	beq	r16,r19,4000c8c <_malloc_r+0x44c>
 4000c54:	00c003c4 	movi	r3,15
 4000c58:	1d40902e 	bgeu	r3,r21,4000e9c <_malloc_r+0x65c>
 4000c5c:	ad7ffd04 	addi	r21,r21,-12
 4000c60:	013ffe04 	movi	r4,-8
 4000c64:	a908703a 	and	r4,r21,r4
 4000c68:	810b883a 	add	r5,r16,r4
 4000c6c:	01800144 	movi	r6,5
 4000c70:	29800115 	stw	r6,4(r5)
 4000c74:	29800215 	stw	r6,8(r5)
 4000c78:	81400117 	ldw	r5,4(r16)
 4000c7c:	2940004c 	andi	r5,r5,1
 4000c80:	214ab03a 	or	r5,r4,r5
 4000c84:	81400115 	stw	r5,4(r16)
 4000c88:	1900ae36 	bltu	r3,r4,4000f44 <_malloc_r+0x704>
 4000c8c:	d0e6d217 	ldw	r3,-25784(gp)
 4000c90:	1880012e 	bgeu	r3,r2,4000c98 <_malloc_r+0x458>
 4000c94:	d0a6d215 	stw	r2,-25784(gp)
 4000c98:	d0e6d117 	ldw	r3,-25788(gp)
 4000c9c:	9c000217 	ldw	r16,8(r19)
 4000ca0:	1880012e 	bgeu	r3,r2,4000ca8 <_malloc_r+0x468>
 4000ca4:	d0a6d115 	stw	r2,-25788(gp)
 4000ca8:	80c00117 	ldw	r3,4(r16)
 4000cac:	00bfff04 	movi	r2,-4
 4000cb0:	1886703a 	and	r3,r3,r2
 4000cb4:	1c45c83a 	sub	r2,r3,r17
 4000cb8:	1c400236 	bltu	r3,r17,4000cc4 <_malloc_r+0x484>
 4000cbc:	00c003c4 	movi	r3,15
 4000cc0:	18800416 	blt	r3,r2,4000cd4 <_malloc_r+0x494>
 4000cc4:	9009883a 	mov	r4,r18
 4000cc8:	40032680 	call	4003268 <__malloc_unlock>
 4000ccc:	0005883a 	mov	r2,zero
 4000cd0:	003f0906 	br	40008f8 <_malloc_r+0xb8>
 4000cd4:	88c00054 	ori	r3,r17,1
 4000cd8:	10800054 	ori	r2,r2,1
 4000cdc:	80c00115 	stw	r3,4(r16)
 4000ce0:	8463883a 	add	r17,r16,r17
 4000ce4:	88800115 	stw	r2,4(r17)
 4000ce8:	9009883a 	mov	r4,r18
 4000cec:	9c400215 	stw	r17,8(r19)
 4000cf0:	40032680 	call	4003268 <__malloc_unlock>
 4000cf4:	80800204 	addi	r2,r16,8
 4000cf8:	003eff06 	br	40008f8 <_malloc_r+0xb8>
 4000cfc:	00800504 	movi	r2,20
 4000d00:	1100492e 	bgeu	r2,r4,4000e28 <_malloc_r+0x5e8>
 4000d04:	00801504 	movi	r2,84
 4000d08:	11005c36 	bltu	r2,r4,4000e7c <_malloc_r+0x63c>
 4000d0c:	8808d33a 	srli	r4,r17,12
 4000d10:	21001b84 	addi	r4,r4,110
 4000d14:	210b883a 	add	r5,r4,r4
 4000d18:	003f1006 	br	400095c <_malloc_r+0x11c>
 4000d1c:	1006d27a 	srli	r3,r2,9
 4000d20:	01400104 	movi	r5,4
 4000d24:	28c0432e 	bgeu	r5,r3,4000e34 <_malloc_r+0x5f4>
 4000d28:	01400504 	movi	r5,20
 4000d2c:	28c07036 	bltu	r5,r3,4000ef0 <_malloc_r+0x6b0>
 4000d30:	194016c4 	addi	r5,r3,91
 4000d34:	294d883a 	add	r6,r5,r5
 4000d38:	318d883a 	add	r6,r6,r6
 4000d3c:	318d883a 	add	r6,r6,r6
 4000d40:	998d883a 	add	r6,r19,r6
 4000d44:	30c00217 	ldw	r3,8(r6)
 4000d48:	01c10034 	movhi	r7,1024
 4000d4c:	39d87e04 	addi	r7,r7,25080
 4000d50:	19805726 	beq	r3,r6,4000eb0 <_malloc_r+0x670>
 4000d54:	01ffff04 	movi	r7,-4
 4000d58:	19400117 	ldw	r5,4(r3)
 4000d5c:	29ca703a 	and	r5,r5,r7
 4000d60:	1140022e 	bgeu	r2,r5,4000d6c <_malloc_r+0x52c>
 4000d64:	18c00217 	ldw	r3,8(r3)
 4000d68:	30fffb1e 	bne	r6,r3,4000d58 <_malloc_r+0x518>
 4000d6c:	19400317 	ldw	r5,12(r3)
 4000d70:	98800117 	ldw	r2,4(r19)
 4000d74:	81400315 	stw	r5,12(r16)
 4000d78:	80c00215 	stw	r3,8(r16)
 4000d7c:	2c000215 	stw	r16,8(r5)
 4000d80:	1c000315 	stw	r16,12(r3)
 4000d84:	003f2b06 	br	4000a34 <_malloc_r+0x1f4>
 4000d88:	8445883a 	add	r2,r16,r17
 4000d8c:	8c400054 	ori	r17,r17,1
 4000d90:	18800515 	stw	r2,20(r3)
 4000d94:	18800415 	stw	r2,16(r3)
 4000d98:	29000054 	ori	r4,r5,1
 4000d9c:	1147883a 	add	r3,r2,r5
 4000da0:	84400115 	stw	r17,4(r16)
 4000da4:	11000115 	stw	r4,4(r2)
 4000da8:	12400315 	stw	r9,12(r2)
 4000dac:	12400215 	stw	r9,8(r2)
 4000db0:	19400015 	stw	r5,0(r3)
 4000db4:	9009883a 	mov	r4,r18
 4000db8:	40032680 	call	4003268 <__malloc_unlock>
 4000dbc:	80800204 	addi	r2,r16,8
 4000dc0:	003ecd06 	br	40008f8 <_malloc_r+0xb8>
 4000dc4:	18800117 	ldw	r2,4(r3)
 4000dc8:	003f1a06 	br	4000a34 <_malloc_r+0x1f4>
 4000dcc:	5ac00044 	addi	r11,r11,1
 4000dd0:	588000cc 	andi	r2,r11,3
 4000dd4:	52800204 	addi	r10,r10,8
 4000dd8:	103f2e1e 	bne	r2,zero,4000a94 <_malloc_r+0x254>
 4000ddc:	20c000cc 	andi	r3,r4,3
 4000de0:	60bffe04 	addi	r2,r12,-8
 4000de4:	18006f26 	beq	r3,zero,4000fa4 <_malloc_r+0x764>
 4000de8:	63000017 	ldw	r12,0(r12)
 4000dec:	213fffc4 	addi	r4,r4,-1
 4000df0:	60bffa26 	beq	r12,r2,4000ddc <_malloc_r+0x59c>
 4000df4:	98800117 	ldw	r2,4(r19)
 4000df8:	294b883a 	add	r5,r5,r5
 4000dfc:	117f5a36 	bltu	r2,r5,4000b68 <_malloc_r+0x328>
 4000e00:	283f5926 	beq	r5,zero,4000b68 <_malloc_r+0x328>
 4000e04:	1146703a 	and	r3,r2,r5
 4000e08:	18001626 	beq	r3,zero,4000e64 <_malloc_r+0x624>
 4000e0c:	5809883a 	mov	r4,r11
 4000e10:	003f1a06 	br	4000a7c <_malloc_r+0x23c>
 4000e14:	80800204 	addi	r2,r16,8
 4000e18:	84000517 	ldw	r16,20(r16)
 4000e1c:	143ea81e 	bne	r2,r16,40008c0 <_malloc_r+0x80>
 4000e20:	21000084 	addi	r4,r4,2
 4000e24:	003ee306 	br	40009b4 <_malloc_r+0x174>
 4000e28:	210016c4 	addi	r4,r4,91
 4000e2c:	210b883a 	add	r5,r4,r4
 4000e30:	003eca06 	br	400095c <_malloc_r+0x11c>
 4000e34:	100ad1ba 	srli	r5,r2,6
 4000e38:	29400e04 	addi	r5,r5,56
 4000e3c:	294d883a 	add	r6,r5,r5
 4000e40:	003fbd06 	br	4000d38 <_malloc_r+0x4f8>
 4000e44:	84ff6026 	beq	r16,r19,4000bc8 <_malloc_r+0x388>
 4000e48:	00810034 	movhi	r2,1024
 4000e4c:	10987e04 	addi	r2,r2,25080
 4000e50:	14000217 	ldw	r16,8(r2)
 4000e54:	00bfff04 	movi	r2,-4
 4000e58:	80c00117 	ldw	r3,4(r16)
 4000e5c:	1886703a 	and	r3,r3,r2
 4000e60:	003f9406 	br	4000cb4 <_malloc_r+0x474>
 4000e64:	294b883a 	add	r5,r5,r5
 4000e68:	1146703a 	and	r3,r2,r5
 4000e6c:	5ac00104 	addi	r11,r11,4
 4000e70:	183ffc26 	beq	r3,zero,4000e64 <_malloc_r+0x624>
 4000e74:	5809883a 	mov	r4,r11
 4000e78:	003f0006 	br	4000a7c <_malloc_r+0x23c>
 4000e7c:	00805504 	movi	r2,340
 4000e80:	11001336 	bltu	r2,r4,4000ed0 <_malloc_r+0x690>
 4000e84:	8808d3fa 	srli	r4,r17,15
 4000e88:	21001dc4 	addi	r4,r4,119
 4000e8c:	210b883a 	add	r5,r4,r4
 4000e90:	003eb206 	br	400095c <_malloc_r+0x11c>
 4000e94:	00840004 	movi	r2,4096
 4000e98:	003f5d06 	br	4000c10 <_malloc_r+0x3d0>
 4000e9c:	00800044 	movi	r2,1
 4000ea0:	a0800115 	stw	r2,4(r20)
 4000ea4:	a021883a 	mov	r16,r20
 4000ea8:	0007883a 	mov	r3,zero
 4000eac:	003f8106 	br	4000cb4 <_malloc_r+0x474>
 4000eb0:	280bd0ba 	srai	r5,r5,2
 4000eb4:	01800044 	movi	r6,1
 4000eb8:	38800117 	ldw	r2,4(r7)
 4000ebc:	314c983a 	sll	r6,r6,r5
 4000ec0:	180b883a 	mov	r5,r3
 4000ec4:	3084b03a 	or	r2,r6,r2
 4000ec8:	38800115 	stw	r2,4(r7)
 4000ecc:	003fa906 	br	4000d74 <_malloc_r+0x534>
 4000ed0:	00815504 	movi	r2,1364
 4000ed4:	11001836 	bltu	r2,r4,4000f38 <_malloc_r+0x6f8>
 4000ed8:	8808d4ba 	srli	r4,r17,18
 4000edc:	21001f04 	addi	r4,r4,124
 4000ee0:	210b883a 	add	r5,r4,r4
 4000ee4:	003e9d06 	br	400095c <_malloc_r+0x11c>
 4000ee8:	bdc00404 	addi	r23,r23,16
 4000eec:	003f2f06 	br	4000bac <_malloc_r+0x36c>
 4000ef0:	01401504 	movi	r5,84
 4000ef4:	28c01f36 	bltu	r5,r3,4000f74 <_malloc_r+0x734>
 4000ef8:	100ad33a 	srli	r5,r2,12
 4000efc:	29401b84 	addi	r5,r5,110
 4000f00:	294d883a 	add	r6,r5,r5
 4000f04:	003f8c06 	br	4000d38 <_malloc_r+0x4f8>
 4000f08:	9c000217 	ldw	r16,8(r19)
 4000f0c:	00bfff04 	movi	r2,-4
 4000f10:	80c00117 	ldw	r3,4(r16)
 4000f14:	1886703a 	and	r3,r3,r2
 4000f18:	003f6606 	br	4000cb4 <_malloc_r+0x474>
 4000f1c:	e0c3ffcc 	andi	r3,fp,4095
 4000f20:	183f2f1e 	bne	r3,zero,4000be0 <_malloc_r+0x3a0>
 4000f24:	98c00217 	ldw	r3,8(r19)
 4000f28:	bd49883a 	add	r4,r23,r21
 4000f2c:	21000054 	ori	r4,r4,1
 4000f30:	19000115 	stw	r4,4(r3)
 4000f34:	003f5506 	br	4000c8c <_malloc_r+0x44c>
 4000f38:	01403f04 	movi	r5,252
 4000f3c:	01001f84 	movi	r4,126
 4000f40:	003e8606 	br	400095c <_malloc_r+0x11c>
 4000f44:	9009883a 	mov	r4,r18
 4000f48:	81400204 	addi	r5,r16,8
 4000f4c:	40020dc0 	call	40020dc <_free_r>
 4000f50:	00810074 	movhi	r2,1025
 4000f54:	10a50e04 	addi	r2,r2,-27592
 4000f58:	10800017 	ldw	r2,0(r2)
 4000f5c:	003f4b06 	br	4000c8c <_malloc_r+0x44c>
 4000f60:	00c00044 	movi	r3,1
 4000f64:	002f883a 	mov	r23,zero
 4000f68:	003f3406 	br	4000c3c <_malloc_r+0x3fc>
 4000f6c:	d5200215 	stw	r20,-32760(gp)
 4000f70:	003f2106 	br	4000bf8 <_malloc_r+0x3b8>
 4000f74:	01405504 	movi	r5,340
 4000f78:	28c00436 	bltu	r5,r3,4000f8c <_malloc_r+0x74c>
 4000f7c:	100ad3fa 	srli	r5,r2,15
 4000f80:	29401dc4 	addi	r5,r5,119
 4000f84:	294d883a 	add	r6,r5,r5
 4000f88:	003f6b06 	br	4000d38 <_malloc_r+0x4f8>
 4000f8c:	01415504 	movi	r5,1364
 4000f90:	28c00936 	bltu	r5,r3,4000fb8 <_malloc_r+0x778>
 4000f94:	100ad4ba 	srli	r5,r2,18
 4000f98:	29401f04 	addi	r5,r5,124
 4000f9c:	294d883a 	add	r6,r5,r5
 4000fa0:	003f6506 	br	4000d38 <_malloc_r+0x4f8>
 4000fa4:	98800117 	ldw	r2,4(r19)
 4000fa8:	0146303a 	nor	r3,zero,r5
 4000fac:	1884703a 	and	r2,r3,r2
 4000fb0:	98800115 	stw	r2,4(r19)
 4000fb4:	003f9006 	br	4000df8 <_malloc_r+0x5b8>
 4000fb8:	01803f04 	movi	r6,252
 4000fbc:	01401f84 	movi	r5,126
 4000fc0:	003f5d06 	br	4000d38 <_malloc_r+0x4f8>

04000fc4 <memchr>:
 4000fc4:	008000c4 	movi	r2,3
 4000fc8:	29403fcc 	andi	r5,r5,255
 4000fcc:	1180282e 	bgeu	r2,r6,4001070 <memchr+0xac>
 4000fd0:	2086703a 	and	r3,r4,r2
 4000fd4:	1800351e 	bne	r3,zero,40010ac <memchr+0xe8>
 4000fd8:	2816923a 	slli	r11,r5,8
 4000fdc:	2093883a 	add	r9,r4,r2
 4000fe0:	22000084 	addi	r8,r4,2
 4000fe4:	5957883a 	add	r11,r11,r5
 4000fe8:	5816923a 	slli	r11,r11,8
 4000fec:	20c00044 	addi	r3,r4,1
 4000ff0:	037fbff4 	movhi	r13,65279
 4000ff4:	6b7fbfc4 	addi	r13,r13,-257
 4000ff8:	5957883a 	add	r11,r11,r5
 4000ffc:	5816923a 	slli	r11,r11,8
 4001000:	03202074 	movhi	r12,32897
 4001004:	63202004 	addi	r12,r12,-32640
 4001008:	101d883a 	mov	r14,r2
 400100c:	5957883a 	add	r11,r11,r5
 4001010:	21c00017 	ldw	r7,0(r4)
 4001014:	31bfff04 	addi	r6,r6,-4
 4001018:	1805883a 	mov	r2,r3
 400101c:	3acef03a 	xor	r7,r7,r11
 4001020:	3b55883a 	add	r10,r7,r13
 4001024:	01ce303a 	nor	r7,zero,r7
 4001028:	51ce703a 	and	r7,r10,r7
 400102c:	3b0e703a 	and	r7,r7,r12
 4001030:	38000a26 	beq	r7,zero,400105c <memchr+0x98>
 4001034:	21c00003 	ldbu	r7,0(r4)
 4001038:	39401e26 	beq	r7,r5,40010b4 <memchr+0xf0>
 400103c:	19c00003 	ldbu	r7,0(r3)
 4001040:	39401926 	beq	r7,r5,40010a8 <memchr+0xe4>
 4001044:	41c00003 	ldbu	r7,0(r8)
 4001048:	4005883a 	mov	r2,r8
 400104c:	39401626 	beq	r7,r5,40010a8 <memchr+0xe4>
 4001050:	49c00003 	ldbu	r7,0(r9)
 4001054:	4805883a 	mov	r2,r9
 4001058:	39401326 	beq	r7,r5,40010a8 <memchr+0xe4>
 400105c:	21000104 	addi	r4,r4,4
 4001060:	4a400104 	addi	r9,r9,4
 4001064:	42000104 	addi	r8,r8,4
 4001068:	18c00104 	addi	r3,r3,4
 400106c:	71bfe836 	bltu	r14,r6,4001010 <memchr+0x4c>
 4001070:	2005883a 	mov	r2,r4
 4001074:	30000a26 	beq	r6,zero,40010a0 <memchr+0xdc>
 4001078:	10c00003 	ldbu	r3,0(r2)
 400107c:	19400a26 	beq	r3,r5,40010a8 <memchr+0xe4>
 4001080:	10c00044 	addi	r3,r2,1
 4001084:	118d883a 	add	r6,r2,r6
 4001088:	00000306 	br	4001098 <memchr+0xd4>
 400108c:	11000003 	ldbu	r4,0(r2)
 4001090:	18c00044 	addi	r3,r3,1
 4001094:	21400426 	beq	r4,r5,40010a8 <memchr+0xe4>
 4001098:	1805883a 	mov	r2,r3
 400109c:	19bffb1e 	bne	r3,r6,400108c <memchr+0xc8>
 40010a0:	0005883a 	mov	r2,zero
 40010a4:	f800283a 	ret
 40010a8:	f800283a 	ret
 40010ac:	2005883a 	mov	r2,r4
 40010b0:	003ff106 	br	4001078 <memchr+0xb4>
 40010b4:	2005883a 	mov	r2,r4
 40010b8:	f800283a 	ret

040010bc <memcpy>:
 40010bc:	00c003c4 	movi	r3,15
 40010c0:	2005883a 	mov	r2,r4
 40010c4:	3009883a 	mov	r4,r6
 40010c8:	1980032e 	bgeu	r3,r6,40010d8 <memcpy+0x1c>
 40010cc:	2886b03a 	or	r3,r5,r2
 40010d0:	18c000cc 	andi	r3,r3,3
 40010d4:	18000926 	beq	r3,zero,40010fc <memcpy+0x40>
 40010d8:	1007883a 	mov	r3,r2
 40010dc:	290f883a 	add	r7,r5,r4
 40010e0:	20000526 	beq	r4,zero,40010f8 <memcpy+0x3c>
 40010e4:	29800003 	ldbu	r6,0(r5)
 40010e8:	18c00044 	addi	r3,r3,1
 40010ec:	29400044 	addi	r5,r5,1
 40010f0:	19bfffc5 	stb	r6,-1(r3)
 40010f4:	29fffb1e 	bne	r5,r7,40010e4 <memcpy+0x28>
 40010f8:	f800283a 	ret
 40010fc:	327ffc04 	addi	r9,r6,-16
 4001100:	4812d13a 	srli	r9,r9,4
 4001104:	11000404 	addi	r4,r2,16
 4001108:	1007883a 	mov	r3,r2
 400110c:	4810913a 	slli	r8,r9,4
 4001110:	280f883a 	mov	r7,r5
 4001114:	2209883a 	add	r4,r4,r8
 4001118:	3a000017 	ldw	r8,0(r7)
 400111c:	18c00404 	addi	r3,r3,16
 4001120:	39c00404 	addi	r7,r7,16
 4001124:	1a3ffc15 	stw	r8,-16(r3)
 4001128:	3a3ffd17 	ldw	r8,-12(r7)
 400112c:	1a3ffd15 	stw	r8,-12(r3)
 4001130:	3a3ffe17 	ldw	r8,-8(r7)
 4001134:	1a3ffe15 	stw	r8,-8(r3)
 4001138:	3a3fff17 	ldw	r8,-4(r7)
 400113c:	1a3fff15 	stw	r8,-4(r3)
 4001140:	193ff51e 	bne	r3,r4,4001118 <memcpy+0x5c>
 4001144:	49c00044 	addi	r7,r9,1
 4001148:	380e913a 	slli	r7,r7,4
 400114c:	310003cc 	andi	r4,r6,15
 4001150:	018000c4 	movi	r6,3
 4001154:	11c7883a 	add	r3,r2,r7
 4001158:	29cb883a 	add	r5,r5,r7
 400115c:	313fdf2e 	bgeu	r6,r4,40010dc <memcpy+0x20>
 4001160:	213fff04 	addi	r4,r4,-4
 4001164:	2014d0ba 	srli	r10,r4,2
 4001168:	1a400104 	addi	r9,r3,4
 400116c:	180d883a 	mov	r6,r3
 4001170:	528f883a 	add	r7,r10,r10
 4001174:	39cf883a 	add	r7,r7,r7
 4001178:	49d3883a 	add	r9,r9,r7
 400117c:	280f883a 	mov	r7,r5
 4001180:	3a000017 	ldw	r8,0(r7)
 4001184:	31800104 	addi	r6,r6,4
 4001188:	39c00104 	addi	r7,r7,4
 400118c:	323fff15 	stw	r8,-4(r6)
 4001190:	327ffb1e 	bne	r6,r9,4001180 <memcpy+0xc4>
 4001194:	51800044 	addi	r6,r10,1
 4001198:	52bfff24 	muli	r10,r10,-4
 400119c:	318d883a 	add	r6,r6,r6
 40011a0:	318d883a 	add	r6,r6,r6
 40011a4:	5109883a 	add	r4,r10,r4
 40011a8:	298b883a 	add	r5,r5,r6
 40011ac:	1987883a 	add	r3,r3,r6
 40011b0:	003fca06 	br	40010dc <memcpy+0x20>

040011b4 <memmove>:
 40011b4:	2005883a 	mov	r2,r4
 40011b8:	300f883a 	mov	r7,r6
 40011bc:	29000b2e 	bgeu	r5,r4,40011ec <memmove+0x38>
 40011c0:	2987883a 	add	r3,r5,r6
 40011c4:	20c0092e 	bgeu	r4,r3,40011ec <memmove+0x38>
 40011c8:	218b883a 	add	r5,r4,r6
 40011cc:	198fc83a 	sub	r7,r3,r6
 40011d0:	30003f26 	beq	r6,zero,40012d0 <memmove+0x11c>
 40011d4:	18ffffc4 	addi	r3,r3,-1
 40011d8:	19000003 	ldbu	r4,0(r3)
 40011dc:	297fffc4 	addi	r5,r5,-1
 40011e0:	29000005 	stb	r4,0(r5)
 40011e4:	19fffb1e 	bne	r3,r7,40011d4 <memmove+0x20>
 40011e8:	f800283a 	ret
 40011ec:	00c003c4 	movi	r3,15
 40011f0:	1980382e 	bgeu	r3,r6,40012d4 <memmove+0x120>
 40011f4:	2886b03a 	or	r3,r5,r2
 40011f8:	18c000cc 	andi	r3,r3,3
 40011fc:	1800351e 	bne	r3,zero,40012d4 <memmove+0x120>
 4001200:	327ffc04 	addi	r9,r6,-16
 4001204:	4812d13a 	srli	r9,r9,4
 4001208:	12000404 	addi	r8,r2,16
 400120c:	1007883a 	mov	r3,r2
 4001210:	4808913a 	slli	r4,r9,4
 4001214:	280f883a 	mov	r7,r5
 4001218:	4111883a 	add	r8,r8,r4
 400121c:	39000017 	ldw	r4,0(r7)
 4001220:	18c00404 	addi	r3,r3,16
 4001224:	39c00404 	addi	r7,r7,16
 4001228:	193ffc15 	stw	r4,-16(r3)
 400122c:	393ffd17 	ldw	r4,-12(r7)
 4001230:	193ffd15 	stw	r4,-12(r3)
 4001234:	393ffe17 	ldw	r4,-8(r7)
 4001238:	193ffe15 	stw	r4,-8(r3)
 400123c:	393fff17 	ldw	r4,-4(r7)
 4001240:	193fff15 	stw	r4,-4(r3)
 4001244:	1a3ff51e 	bne	r3,r8,400121c <memmove+0x68>
 4001248:	49000044 	addi	r4,r9,1
 400124c:	2008913a 	slli	r4,r4,4
 4001250:	31c003cc 	andi	r7,r6,15
 4001254:	1107883a 	add	r3,r2,r4
 4001258:	290b883a 	add	r5,r5,r4
 400125c:	010000c4 	movi	r4,3
 4001260:	21c0142e 	bgeu	r4,r7,40012b4 <memmove+0x100>
 4001264:	39ffff04 	addi	r7,r7,-4
 4001268:	3814d0ba 	srli	r10,r7,2
 400126c:	1a400104 	addi	r9,r3,4
 4001270:	180d883a 	mov	r6,r3
 4001274:	5289883a 	add	r4,r10,r10
 4001278:	2109883a 	add	r4,r4,r4
 400127c:	4913883a 	add	r9,r9,r4
 4001280:	2809883a 	mov	r4,r5
 4001284:	22000017 	ldw	r8,0(r4)
 4001288:	31800104 	addi	r6,r6,4
 400128c:	21000104 	addi	r4,r4,4
 4001290:	323fff15 	stw	r8,-4(r6)
 4001294:	327ffb1e 	bne	r6,r9,4001284 <memmove+0xd0>
 4001298:	51000044 	addi	r4,r10,1
 400129c:	52bfff24 	muli	r10,r10,-4
 40012a0:	2109883a 	add	r4,r4,r4
 40012a4:	2109883a 	add	r4,r4,r4
 40012a8:	51cf883a 	add	r7,r10,r7
 40012ac:	290b883a 	add	r5,r5,r4
 40012b0:	1907883a 	add	r3,r3,r4
 40012b4:	38000626 	beq	r7,zero,40012d0 <memmove+0x11c>
 40012b8:	19cf883a 	add	r7,r3,r7
 40012bc:	29800003 	ldbu	r6,0(r5)
 40012c0:	18c00044 	addi	r3,r3,1
 40012c4:	29400044 	addi	r5,r5,1
 40012c8:	19bfffc5 	stb	r6,-1(r3)
 40012cc:	19fffb1e 	bne	r3,r7,40012bc <memmove+0x108>
 40012d0:	f800283a 	ret
 40012d4:	1007883a 	mov	r3,r2
 40012d8:	003ff606 	br	40012b4 <memmove+0x100>

040012dc <_realloc_r>:
 40012dc:	defff504 	addi	sp,sp,-44
 40012e0:	dd400615 	stw	r21,24(sp)
 40012e4:	dc800315 	stw	r18,12(sp)
 40012e8:	dc000115 	stw	r16,4(sp)
 40012ec:	dfc00a15 	stw	ra,40(sp)
 40012f0:	df000915 	stw	fp,36(sp)
 40012f4:	ddc00815 	stw	r23,32(sp)
 40012f8:	dd800715 	stw	r22,28(sp)
 40012fc:	dd000515 	stw	r20,20(sp)
 4001300:	dcc00415 	stw	r19,16(sp)
 4001304:	dc400215 	stw	r17,8(sp)
 4001308:	2821883a 	mov	r16,r5
 400130c:	202b883a 	mov	r21,r4
 4001310:	3025883a 	mov	r18,r6
 4001314:	28009626 	beq	r5,zero,4001570 <_realloc_r+0x294>
 4001318:	40032480 	call	4003248 <__malloc_lock>
 400131c:	80bfff17 	ldw	r2,-4(r16)
 4001320:	04ffff04 	movi	r19,-4
 4001324:	90c002c4 	addi	r3,r18,11
 4001328:	01000584 	movi	r4,22
 400132c:	85bffe04 	addi	r22,r16,-8
 4001330:	14e6703a 	and	r19,r2,r19
 4001334:	20c0372e 	bgeu	r4,r3,4001414 <_realloc_r+0x138>
 4001338:	047ffe04 	movi	r17,-8
 400133c:	1c62703a 	and	r17,r3,r17
 4001340:	8807883a 	mov	r3,r17
 4001344:	88005a16 	blt	r17,zero,40014b0 <_realloc_r+0x1d4>
 4001348:	8c805936 	bltu	r17,r18,40014b0 <_realloc_r+0x1d4>
 400134c:	98c0340e 	bge	r19,r3,4001420 <_realloc_r+0x144>
 4001350:	07010034 	movhi	fp,1024
 4001354:	e7187e04 	addi	fp,fp,25080
 4001358:	e1400217 	ldw	r5,8(fp)
 400135c:	b4c9883a 	add	r4,r22,r19
 4001360:	29009026 	beq	r5,r4,40015a4 <_realloc_r+0x2c8>
 4001364:	21800117 	ldw	r6,4(r4)
 4001368:	01ffff84 	movi	r7,-2
 400136c:	31ce703a 	and	r7,r6,r7
 4001370:	21cf883a 	add	r7,r4,r7
 4001374:	39c00117 	ldw	r7,4(r7)
 4001378:	39c0004c 	andi	r7,r7,1
 400137c:	38004326 	beq	r7,zero,400148c <_realloc_r+0x1b0>
 4001380:	000d883a 	mov	r6,zero
 4001384:	0009883a 	mov	r4,zero
 4001388:	1080004c 	andi	r2,r2,1
 400138c:	10005a1e 	bne	r2,zero,40014f8 <_realloc_r+0x21c>
 4001390:	85fffe17 	ldw	r23,-8(r16)
 4001394:	00bfff04 	movi	r2,-4
 4001398:	b5efc83a 	sub	r23,r22,r23
 400139c:	b9c00117 	ldw	r7,4(r23)
 40013a0:	388e703a 	and	r7,r7,r2
 40013a4:	3ccf883a 	add	r7,r7,r19
 40013a8:	20005226 	beq	r4,zero,40014f4 <_realloc_r+0x218>
 40013ac:	31e9883a 	add	r20,r6,r7
 40013b0:	2140c726 	beq	r4,r5,40016d0 <_realloc_r+0x3f4>
 40013b4:	a0c04f16 	blt	r20,r3,40014f4 <_realloc_r+0x218>
 40013b8:	20800317 	ldw	r2,12(r4)
 40013bc:	20c00217 	ldw	r3,8(r4)
 40013c0:	99bfff04 	addi	r6,r19,-4
 40013c4:	01000904 	movi	r4,36
 40013c8:	18800315 	stw	r2,12(r3)
 40013cc:	10c00215 	stw	r3,8(r2)
 40013d0:	b8c00217 	ldw	r3,8(r23)
 40013d4:	b8800317 	ldw	r2,12(r23)
 40013d8:	bc800204 	addi	r18,r23,8
 40013dc:	18800315 	stw	r2,12(r3)
 40013e0:	10c00215 	stw	r3,8(r2)
 40013e4:	2180ed36 	bltu	r4,r6,400179c <_realloc_r+0x4c0>
 40013e8:	008004c4 	movi	r2,19
 40013ec:	11809b2e 	bgeu	r2,r6,400165c <_realloc_r+0x380>
 40013f0:	80800017 	ldw	r2,0(r16)
 40013f4:	b8800215 	stw	r2,8(r23)
 40013f8:	80800117 	ldw	r2,4(r16)
 40013fc:	b8800315 	stw	r2,12(r23)
 4001400:	008006c4 	movi	r2,27
 4001404:	1180f936 	bltu	r2,r6,40017ec <_realloc_r+0x510>
 4001408:	b8800404 	addi	r2,r23,16
 400140c:	80c00204 	addi	r3,r16,8
 4001410:	00009406 	br	4001664 <_realloc_r+0x388>
 4001414:	00c00404 	movi	r3,16
 4001418:	1823883a 	mov	r17,r3
 400141c:	003fca06 	br	4001348 <_realloc_r+0x6c>
 4001420:	9829883a 	mov	r20,r19
 4001424:	a447c83a 	sub	r3,r20,r17
 4001428:	010003c4 	movi	r4,15
 400142c:	1080004c 	andi	r2,r2,1
 4001430:	20c02336 	bltu	r4,r3,40014c0 <_realloc_r+0x1e4>
 4001434:	1504b03a 	or	r2,r2,r20
 4001438:	b0800115 	stw	r2,4(r22)
 400143c:	b52d883a 	add	r22,r22,r20
 4001440:	b0800117 	ldw	r2,4(r22)
 4001444:	10800054 	ori	r2,r2,1
 4001448:	b0800115 	stw	r2,4(r22)
 400144c:	a809883a 	mov	r4,r21
 4001450:	40032680 	call	4003268 <__malloc_unlock>
 4001454:	8025883a 	mov	r18,r16
 4001458:	9005883a 	mov	r2,r18
 400145c:	dfc00a17 	ldw	ra,40(sp)
 4001460:	df000917 	ldw	fp,36(sp)
 4001464:	ddc00817 	ldw	r23,32(sp)
 4001468:	dd800717 	ldw	r22,28(sp)
 400146c:	dd400617 	ldw	r21,24(sp)
 4001470:	dd000517 	ldw	r20,20(sp)
 4001474:	dcc00417 	ldw	r19,16(sp)
 4001478:	dc800317 	ldw	r18,12(sp)
 400147c:	dc400217 	ldw	r17,8(sp)
 4001480:	dc000117 	ldw	r16,4(sp)
 4001484:	dec00b04 	addi	sp,sp,44
 4001488:	f800283a 	ret
 400148c:	01ffff04 	movi	r7,-4
 4001490:	31cc703a 	and	r6,r6,r7
 4001494:	34e9883a 	add	r20,r6,r19
 4001498:	a0ffbb16 	blt	r20,r3,4001388 <_realloc_r+0xac>
 400149c:	20c00317 	ldw	r3,12(r4)
 40014a0:	21000217 	ldw	r4,8(r4)
 40014a4:	20c00315 	stw	r3,12(r4)
 40014a8:	19000215 	stw	r4,8(r3)
 40014ac:	003fdd06 	br	4001424 <_realloc_r+0x148>
 40014b0:	00800304 	movi	r2,12
 40014b4:	a8800015 	stw	r2,0(r21)
 40014b8:	0025883a 	mov	r18,zero
 40014bc:	003fe606 	br	4001458 <_realloc_r+0x17c>
 40014c0:	1444b03a 	or	r2,r2,r17
 40014c4:	b0800115 	stw	r2,4(r22)
 40014c8:	b44b883a 	add	r5,r22,r17
 40014cc:	18800054 	ori	r2,r3,1
 40014d0:	28800115 	stw	r2,4(r5)
 40014d4:	28c7883a 	add	r3,r5,r3
 40014d8:	18800117 	ldw	r2,4(r3)
 40014dc:	a809883a 	mov	r4,r21
 40014e0:	29400204 	addi	r5,r5,8
 40014e4:	10800054 	ori	r2,r2,1
 40014e8:	18800115 	stw	r2,4(r3)
 40014ec:	40020dc0 	call	40020dc <_free_r>
 40014f0:	003fd606 	br	400144c <_realloc_r+0x170>
 40014f4:	38c0330e 	bge	r7,r3,40015c4 <_realloc_r+0x2e8>
 40014f8:	900b883a 	mov	r5,r18
 40014fc:	a809883a 	mov	r4,r21
 4001500:	40008400 	call	4000840 <_malloc_r>
 4001504:	1025883a 	mov	r18,r2
 4001508:	10001626 	beq	r2,zero,4001564 <_realloc_r+0x288>
 400150c:	80bfff17 	ldw	r2,-4(r16)
 4001510:	00ffff84 	movi	r3,-2
 4001514:	913ffe04 	addi	r4,r18,-8
 4001518:	10c6703a 	and	r3,r2,r3
 400151c:	b0c7883a 	add	r3,r22,r3
 4001520:	20c09926 	beq	r4,r3,4001788 <_realloc_r+0x4ac>
 4001524:	99bfff04 	addi	r6,r19,-4
 4001528:	00800904 	movi	r2,36
 400152c:	11806436 	bltu	r2,r6,40016c0 <_realloc_r+0x3e4>
 4001530:	00c004c4 	movi	r3,19
 4001534:	19804036 	bltu	r3,r6,4001638 <_realloc_r+0x35c>
 4001538:	9005883a 	mov	r2,r18
 400153c:	8007883a 	mov	r3,r16
 4001540:	19000017 	ldw	r4,0(r3)
 4001544:	11000015 	stw	r4,0(r2)
 4001548:	19000117 	ldw	r4,4(r3)
 400154c:	11000115 	stw	r4,4(r2)
 4001550:	18c00217 	ldw	r3,8(r3)
 4001554:	10c00215 	stw	r3,8(r2)
 4001558:	a809883a 	mov	r4,r21
 400155c:	800b883a 	mov	r5,r16
 4001560:	40020dc0 	call	40020dc <_free_r>
 4001564:	a809883a 	mov	r4,r21
 4001568:	40032680 	call	4003268 <__malloc_unlock>
 400156c:	003fba06 	br	4001458 <_realloc_r+0x17c>
 4001570:	300b883a 	mov	r5,r6
 4001574:	dfc00a17 	ldw	ra,40(sp)
 4001578:	df000917 	ldw	fp,36(sp)
 400157c:	ddc00817 	ldw	r23,32(sp)
 4001580:	dd800717 	ldw	r22,28(sp)
 4001584:	dd400617 	ldw	r21,24(sp)
 4001588:	dd000517 	ldw	r20,20(sp)
 400158c:	dcc00417 	ldw	r19,16(sp)
 4001590:	dc800317 	ldw	r18,12(sp)
 4001594:	dc400217 	ldw	r17,8(sp)
 4001598:	dc000117 	ldw	r16,4(sp)
 400159c:	dec00b04 	addi	sp,sp,44
 40015a0:	40008401 	jmpi	4000840 <_malloc_r>
 40015a4:	29800117 	ldw	r6,4(r5)
 40015a8:	013fff04 	movi	r4,-4
 40015ac:	89c00404 	addi	r7,r17,16
 40015b0:	310c703a 	and	r6,r6,r4
 40015b4:	34c9883a 	add	r4,r6,r19
 40015b8:	21c0340e 	bge	r4,r7,400168c <_realloc_r+0x3b0>
 40015bc:	2809883a 	mov	r4,r5
 40015c0:	003f7106 	br	4001388 <_realloc_r+0xac>
 40015c4:	b8800317 	ldw	r2,12(r23)
 40015c8:	b8c00217 	ldw	r3,8(r23)
 40015cc:	99bfff04 	addi	r6,r19,-4
 40015d0:	01000904 	movi	r4,36
 40015d4:	18800315 	stw	r2,12(r3)
 40015d8:	10c00215 	stw	r3,8(r2)
 40015dc:	bc800204 	addi	r18,r23,8
 40015e0:	21807836 	bltu	r4,r6,40017c4 <_realloc_r+0x4e8>
 40015e4:	008004c4 	movi	r2,19
 40015e8:	1180732e 	bgeu	r2,r6,40017b8 <_realloc_r+0x4dc>
 40015ec:	80800017 	ldw	r2,0(r16)
 40015f0:	b8800215 	stw	r2,8(r23)
 40015f4:	80800117 	ldw	r2,4(r16)
 40015f8:	b8800315 	stw	r2,12(r23)
 40015fc:	008006c4 	movi	r2,27
 4001600:	11808936 	bltu	r2,r6,4001828 <_realloc_r+0x54c>
 4001604:	b8800404 	addi	r2,r23,16
 4001608:	80c00204 	addi	r3,r16,8
 400160c:	19000017 	ldw	r4,0(r3)
 4001610:	9021883a 	mov	r16,r18
 4001614:	3829883a 	mov	r20,r7
 4001618:	11000015 	stw	r4,0(r2)
 400161c:	19000117 	ldw	r4,4(r3)
 4001620:	b82d883a 	mov	r22,r23
 4001624:	11000115 	stw	r4,4(r2)
 4001628:	18c00217 	ldw	r3,8(r3)
 400162c:	10c00215 	stw	r3,8(r2)
 4001630:	b8800117 	ldw	r2,4(r23)
 4001634:	003f7b06 	br	4001424 <_realloc_r+0x148>
 4001638:	80c00017 	ldw	r3,0(r16)
 400163c:	90c00015 	stw	r3,0(r18)
 4001640:	80c00117 	ldw	r3,4(r16)
 4001644:	90c00115 	stw	r3,4(r18)
 4001648:	00c006c4 	movi	r3,27
 400164c:	19804636 	bltu	r3,r6,4001768 <_realloc_r+0x48c>
 4001650:	90800204 	addi	r2,r18,8
 4001654:	80c00204 	addi	r3,r16,8
 4001658:	003fb906 	br	4001540 <_realloc_r+0x264>
 400165c:	9005883a 	mov	r2,r18
 4001660:	8007883a 	mov	r3,r16
 4001664:	19000017 	ldw	r4,0(r3)
 4001668:	9021883a 	mov	r16,r18
 400166c:	b82d883a 	mov	r22,r23
 4001670:	11000015 	stw	r4,0(r2)
 4001674:	19000117 	ldw	r4,4(r3)
 4001678:	11000115 	stw	r4,4(r2)
 400167c:	18c00217 	ldw	r3,8(r3)
 4001680:	10c00215 	stw	r3,8(r2)
 4001684:	b8800117 	ldw	r2,4(r23)
 4001688:	003f6606 	br	4001424 <_realloc_r+0x148>
 400168c:	2445c83a 	sub	r2,r4,r17
 4001690:	b46d883a 	add	r22,r22,r17
 4001694:	10800054 	ori	r2,r2,1
 4001698:	b0800115 	stw	r2,4(r22)
 400169c:	80bfff17 	ldw	r2,-4(r16)
 40016a0:	a809883a 	mov	r4,r21
 40016a4:	e5800215 	stw	r22,8(fp)
 40016a8:	1080004c 	andi	r2,r2,1
 40016ac:	88a2b03a 	or	r17,r17,r2
 40016b0:	847fff15 	stw	r17,-4(r16)
 40016b4:	40032680 	call	4003268 <__malloc_unlock>
 40016b8:	8025883a 	mov	r18,r16
 40016bc:	003f6606 	br	4001458 <_realloc_r+0x17c>
 40016c0:	9009883a 	mov	r4,r18
 40016c4:	800b883a 	mov	r5,r16
 40016c8:	40011b40 	call	40011b4 <memmove>
 40016cc:	003fa206 	br	4001558 <_realloc_r+0x27c>
 40016d0:	88800404 	addi	r2,r17,16
 40016d4:	a0bf8716 	blt	r20,r2,40014f4 <_realloc_r+0x218>
 40016d8:	b8800317 	ldw	r2,12(r23)
 40016dc:	b8c00217 	ldw	r3,8(r23)
 40016e0:	99bfff04 	addi	r6,r19,-4
 40016e4:	01000904 	movi	r4,36
 40016e8:	18800315 	stw	r2,12(r3)
 40016ec:	10c00215 	stw	r3,8(r2)
 40016f0:	bc800204 	addi	r18,r23,8
 40016f4:	21806536 	bltu	r4,r6,400188c <_realloc_r+0x5b0>
 40016f8:	008004c4 	movi	r2,19
 40016fc:	1180592e 	bgeu	r2,r6,4001864 <_realloc_r+0x588>
 4001700:	80800017 	ldw	r2,0(r16)
 4001704:	b8800215 	stw	r2,8(r23)
 4001708:	80800117 	ldw	r2,4(r16)
 400170c:	b8800315 	stw	r2,12(r23)
 4001710:	008006c4 	movi	r2,27
 4001714:	11806136 	bltu	r2,r6,400189c <_realloc_r+0x5c0>
 4001718:	b8800404 	addi	r2,r23,16
 400171c:	80c00204 	addi	r3,r16,8
 4001720:	19000017 	ldw	r4,0(r3)
 4001724:	11000015 	stw	r4,0(r2)
 4001728:	19000117 	ldw	r4,4(r3)
 400172c:	11000115 	stw	r4,4(r2)
 4001730:	18c00217 	ldw	r3,8(r3)
 4001734:	10c00215 	stw	r3,8(r2)
 4001738:	a447c83a 	sub	r3,r20,r17
 400173c:	bc45883a 	add	r2,r23,r17
 4001740:	18c00054 	ori	r3,r3,1
 4001744:	10c00115 	stw	r3,4(r2)
 4001748:	b8c00117 	ldw	r3,4(r23)
 400174c:	e0800215 	stw	r2,8(fp)
 4001750:	a809883a 	mov	r4,r21
 4001754:	1880004c 	andi	r2,r3,1
 4001758:	88a2b03a 	or	r17,r17,r2
 400175c:	bc400115 	stw	r17,4(r23)
 4001760:	40032680 	call	4003268 <__malloc_unlock>
 4001764:	003f3c06 	br	4001458 <_realloc_r+0x17c>
 4001768:	80c00217 	ldw	r3,8(r16)
 400176c:	90c00215 	stw	r3,8(r18)
 4001770:	80c00317 	ldw	r3,12(r16)
 4001774:	90c00315 	stw	r3,12(r18)
 4001778:	30802426 	beq	r6,r2,400180c <_realloc_r+0x530>
 400177c:	90800404 	addi	r2,r18,16
 4001780:	80c00404 	addi	r3,r16,16
 4001784:	003f6e06 	br	4001540 <_realloc_r+0x264>
 4001788:	953fff17 	ldw	r20,-4(r18)
 400178c:	00ffff04 	movi	r3,-4
 4001790:	a0e8703a 	and	r20,r20,r3
 4001794:	a4e9883a 	add	r20,r20,r19
 4001798:	003f2206 	br	4001424 <_realloc_r+0x148>
 400179c:	800b883a 	mov	r5,r16
 40017a0:	9009883a 	mov	r4,r18
 40017a4:	40011b40 	call	40011b4 <memmove>
 40017a8:	9021883a 	mov	r16,r18
 40017ac:	b8800117 	ldw	r2,4(r23)
 40017b0:	b82d883a 	mov	r22,r23
 40017b4:	003f1b06 	br	4001424 <_realloc_r+0x148>
 40017b8:	9005883a 	mov	r2,r18
 40017bc:	8007883a 	mov	r3,r16
 40017c0:	003f9206 	br	400160c <_realloc_r+0x330>
 40017c4:	800b883a 	mov	r5,r16
 40017c8:	9009883a 	mov	r4,r18
 40017cc:	d9c00015 	stw	r7,0(sp)
 40017d0:	40011b40 	call	40011b4 <memmove>
 40017d4:	d9c00017 	ldw	r7,0(sp)
 40017d8:	9021883a 	mov	r16,r18
 40017dc:	b8800117 	ldw	r2,4(r23)
 40017e0:	3829883a 	mov	r20,r7
 40017e4:	b82d883a 	mov	r22,r23
 40017e8:	003f0e06 	br	4001424 <_realloc_r+0x148>
 40017ec:	80800217 	ldw	r2,8(r16)
 40017f0:	b8800415 	stw	r2,16(r23)
 40017f4:	80800317 	ldw	r2,12(r16)
 40017f8:	b8800515 	stw	r2,20(r23)
 40017fc:	31001226 	beq	r6,r4,4001848 <_realloc_r+0x56c>
 4001800:	b8800604 	addi	r2,r23,24
 4001804:	80c00404 	addi	r3,r16,16
 4001808:	003f9606 	br	4001664 <_realloc_r+0x388>
 400180c:	81000417 	ldw	r4,16(r16)
 4001810:	90800604 	addi	r2,r18,24
 4001814:	80c00604 	addi	r3,r16,24
 4001818:	91000415 	stw	r4,16(r18)
 400181c:	81000517 	ldw	r4,20(r16)
 4001820:	91000515 	stw	r4,20(r18)
 4001824:	003f4606 	br	4001540 <_realloc_r+0x264>
 4001828:	80800217 	ldw	r2,8(r16)
 400182c:	b8800415 	stw	r2,16(r23)
 4001830:	80800317 	ldw	r2,12(r16)
 4001834:	b8800515 	stw	r2,20(r23)
 4001838:	31000d26 	beq	r6,r4,4001870 <_realloc_r+0x594>
 400183c:	b8800604 	addi	r2,r23,24
 4001840:	80c00404 	addi	r3,r16,16
 4001844:	003f7106 	br	400160c <_realloc_r+0x330>
 4001848:	81000417 	ldw	r4,16(r16)
 400184c:	b8800804 	addi	r2,r23,32
 4001850:	80c00604 	addi	r3,r16,24
 4001854:	b9000615 	stw	r4,24(r23)
 4001858:	81000517 	ldw	r4,20(r16)
 400185c:	b9000715 	stw	r4,28(r23)
 4001860:	003f8006 	br	4001664 <_realloc_r+0x388>
 4001864:	9005883a 	mov	r2,r18
 4001868:	8007883a 	mov	r3,r16
 400186c:	003fac06 	br	4001720 <_realloc_r+0x444>
 4001870:	81000417 	ldw	r4,16(r16)
 4001874:	b8800804 	addi	r2,r23,32
 4001878:	80c00604 	addi	r3,r16,24
 400187c:	b9000615 	stw	r4,24(r23)
 4001880:	81000517 	ldw	r4,20(r16)
 4001884:	b9000715 	stw	r4,28(r23)
 4001888:	003f6006 	br	400160c <_realloc_r+0x330>
 400188c:	9009883a 	mov	r4,r18
 4001890:	800b883a 	mov	r5,r16
 4001894:	40011b40 	call	40011b4 <memmove>
 4001898:	003fa706 	br	4001738 <_realloc_r+0x45c>
 400189c:	80800217 	ldw	r2,8(r16)
 40018a0:	b8800415 	stw	r2,16(r23)
 40018a4:	80800317 	ldw	r2,12(r16)
 40018a8:	b8800515 	stw	r2,20(r23)
 40018ac:	31000326 	beq	r6,r4,40018bc <_realloc_r+0x5e0>
 40018b0:	b8800604 	addi	r2,r23,24
 40018b4:	80c00404 	addi	r3,r16,16
 40018b8:	003f9906 	br	4001720 <_realloc_r+0x444>
 40018bc:	81000417 	ldw	r4,16(r16)
 40018c0:	b8800804 	addi	r2,r23,32
 40018c4:	80c00604 	addi	r3,r16,24
 40018c8:	b9000615 	stw	r4,24(r23)
 40018cc:	81000517 	ldw	r4,20(r16)
 40018d0:	b9000715 	stw	r4,28(r23)
 40018d4:	003f9206 	br	4001720 <_realloc_r+0x444>

040018d8 <_sbrk_r>:
 40018d8:	defffd04 	addi	sp,sp,-12
 40018dc:	dc400115 	stw	r17,4(sp)
 40018e0:	dc000015 	stw	r16,0(sp)
 40018e4:	2023883a 	mov	r17,r4
 40018e8:	04010074 	movhi	r16,1025
 40018ec:	84250704 	addi	r16,r16,-27620
 40018f0:	2809883a 	mov	r4,r5
 40018f4:	dfc00215 	stw	ra,8(sp)
 40018f8:	80000015 	stw	zero,0(r16)
 40018fc:	40034280 	call	4003428 <sbrk>
 4001900:	00ffffc4 	movi	r3,-1
 4001904:	10c00526 	beq	r2,r3,400191c <_sbrk_r+0x44>
 4001908:	dfc00217 	ldw	ra,8(sp)
 400190c:	dc400117 	ldw	r17,4(sp)
 4001910:	dc000017 	ldw	r16,0(sp)
 4001914:	dec00304 	addi	sp,sp,12
 4001918:	f800283a 	ret
 400191c:	80c00017 	ldw	r3,0(r16)
 4001920:	183ff926 	beq	r3,zero,4001908 <_sbrk_r+0x30>
 4001924:	88c00015 	stw	r3,0(r17)
 4001928:	dfc00217 	ldw	ra,8(sp)
 400192c:	dc400117 	ldw	r17,4(sp)
 4001930:	dc000017 	ldw	r16,0(sp)
 4001934:	dec00304 	addi	sp,sp,12
 4001938:	f800283a 	ret

0400193c <__swsetup_r>:
 400193c:	00810034 	movhi	r2,1024
 4001940:	109e3404 	addi	r2,r2,30928
 4001944:	10800017 	ldw	r2,0(r2)
 4001948:	defffd04 	addi	sp,sp,-12
 400194c:	dc400115 	stw	r17,4(sp)
 4001950:	dc000015 	stw	r16,0(sp)
 4001954:	dfc00215 	stw	ra,8(sp)
 4001958:	2023883a 	mov	r17,r4
 400195c:	2821883a 	mov	r16,r5
 4001960:	10000226 	beq	r2,zero,400196c <__swsetup_r+0x30>
 4001964:	10c00e17 	ldw	r3,56(r2)
 4001968:	18003d26 	beq	r3,zero,4001a60 <__swsetup_r+0x124>
 400196c:	8080030b 	ldhu	r2,12(r16)
 4001970:	10c0020c 	andi	r3,r2,8
 4001974:	18ffffcc 	andi	r3,r3,65535
 4001978:	18e0001c 	xori	r3,r3,32768
 400197c:	18e00004 	addi	r3,r3,-32768
 4001980:	18001226 	beq	r3,zero,40019cc <__swsetup_r+0x90>
 4001984:	80c00417 	ldw	r3,16(r16)
 4001988:	18001f26 	beq	r3,zero,4001a08 <__swsetup_r+0xcc>
 400198c:	1100004c 	andi	r4,r2,1
 4001990:	2000261e 	bne	r4,zero,4001a2c <__swsetup_r+0xf0>
 4001994:	1080008c 	andi	r2,r2,2
 4001998:	10bfffcc 	andi	r2,r2,65535
 400199c:	10a0001c 	xori	r2,r2,32768
 40019a0:	10a00004 	addi	r2,r2,-32768
 40019a4:	1000311e 	bne	r2,zero,4001a6c <__swsetup_r+0x130>
 40019a8:	80800517 	ldw	r2,20(r16)
 40019ac:	80800215 	stw	r2,8(r16)
 40019b0:	18002326 	beq	r3,zero,4001a40 <__swsetup_r+0x104>
 40019b4:	0005883a 	mov	r2,zero
 40019b8:	dfc00217 	ldw	ra,8(sp)
 40019bc:	dc400117 	ldw	r17,4(sp)
 40019c0:	dc000017 	ldw	r16,0(sp)
 40019c4:	dec00304 	addi	sp,sp,12
 40019c8:	f800283a 	ret
 40019cc:	10c0040c 	andi	r3,r2,16
 40019d0:	18ffffcc 	andi	r3,r3,65535
 40019d4:	18e0001c 	xori	r3,r3,32768
 40019d8:	18e00004 	addi	r3,r3,-32768
 40019dc:	18001e26 	beq	r3,zero,4001a58 <__swsetup_r+0x11c>
 40019e0:	10c0010c 	andi	r3,r2,4
 40019e4:	18ffffcc 	andi	r3,r3,65535
 40019e8:	18e0001c 	xori	r3,r3,32768
 40019ec:	18e00004 	addi	r3,r3,-32768
 40019f0:	1800211e 	bne	r3,zero,4001a78 <__swsetup_r+0x13c>
 40019f4:	80c00417 	ldw	r3,16(r16)
 40019f8:	11400214 	ori	r5,r2,8
 40019fc:	8140030d 	sth	r5,12(r16)
 4001a00:	2805883a 	mov	r2,r5
 4001a04:	183fe11e 	bne	r3,zero,400198c <__swsetup_r+0x50>
 4001a08:	1140a00c 	andi	r5,r2,640
 4001a0c:	01008004 	movi	r4,512
 4001a10:	293fde26 	beq	r5,r4,400198c <__swsetup_r+0x50>
 4001a14:	8809883a 	mov	r4,r17
 4001a18:	800b883a 	mov	r5,r16
 4001a1c:	400250c0 	call	400250c <__smakebuf_r>
 4001a20:	8080030b 	ldhu	r2,12(r16)
 4001a24:	80c00417 	ldw	r3,16(r16)
 4001a28:	003fd806 	br	400198c <__swsetup_r+0x50>
 4001a2c:	80800517 	ldw	r2,20(r16)
 4001a30:	80000215 	stw	zero,8(r16)
 4001a34:	0085c83a 	sub	r2,zero,r2
 4001a38:	80800615 	stw	r2,24(r16)
 4001a3c:	183fdd1e 	bne	r3,zero,40019b4 <__swsetup_r+0x78>
 4001a40:	8080030b 	ldhu	r2,12(r16)
 4001a44:	1080200c 	andi	r2,r2,128
 4001a48:	10bfffcc 	andi	r2,r2,65535
 4001a4c:	10a0001c 	xori	r2,r2,32768
 4001a50:	10a00004 	addi	r2,r2,-32768
 4001a54:	103fd826 	beq	r2,zero,40019b8 <__swsetup_r+0x7c>
 4001a58:	00bfffc4 	movi	r2,-1
 4001a5c:	003fd606 	br	40019b8 <__swsetup_r+0x7c>
 4001a60:	1009883a 	mov	r4,r2
 4001a64:	4001d580 	call	4001d58 <__sinit>
 4001a68:	003fc006 	br	400196c <__swsetup_r+0x30>
 4001a6c:	0005883a 	mov	r2,zero
 4001a70:	80800215 	stw	r2,8(r16)
 4001a74:	003fce06 	br	40019b0 <__swsetup_r+0x74>
 4001a78:	81400c17 	ldw	r5,48(r16)
 4001a7c:	28000626 	beq	r5,zero,4001a98 <__swsetup_r+0x15c>
 4001a80:	80c01004 	addi	r3,r16,64
 4001a84:	28c00326 	beq	r5,r3,4001a94 <__swsetup_r+0x158>
 4001a88:	8809883a 	mov	r4,r17
 4001a8c:	40020dc0 	call	40020dc <_free_r>
 4001a90:	8080030b 	ldhu	r2,12(r16)
 4001a94:	80000c15 	stw	zero,48(r16)
 4001a98:	80c00417 	ldw	r3,16(r16)
 4001a9c:	013ff6c4 	movi	r4,-37
 4001aa0:	2084703a 	and	r2,r4,r2
 4001aa4:	80000115 	stw	zero,4(r16)
 4001aa8:	80c00015 	stw	r3,0(r16)
 4001aac:	003fd206 	br	40019f8 <__swsetup_r+0xbc>

04001ab0 <_fflush_r>:
 4001ab0:	defffb04 	addi	sp,sp,-20
 4001ab4:	dcc00315 	stw	r19,12(sp)
 4001ab8:	dc400115 	stw	r17,4(sp)
 4001abc:	dfc00415 	stw	ra,16(sp)
 4001ac0:	dc800215 	stw	r18,8(sp)
 4001ac4:	dc000015 	stw	r16,0(sp)
 4001ac8:	2027883a 	mov	r19,r4
 4001acc:	2823883a 	mov	r17,r5
 4001ad0:	20000226 	beq	r4,zero,4001adc <_fflush_r+0x2c>
 4001ad4:	20800e17 	ldw	r2,56(r4)
 4001ad8:	10005726 	beq	r2,zero,4001c38 <_fflush_r+0x188>
 4001adc:	8880030b 	ldhu	r2,12(r17)
 4001ae0:	10c0020c 	andi	r3,r2,8
 4001ae4:	18ffffcc 	andi	r3,r3,65535
 4001ae8:	18e0001c 	xori	r3,r3,32768
 4001aec:	18e00004 	addi	r3,r3,-32768
 4001af0:	1800311e 	bne	r3,zero,4001bb8 <_fflush_r+0x108>
 4001af4:	89000117 	ldw	r4,4(r17)
 4001af8:	10c20014 	ori	r3,r2,2048
 4001afc:	88c0030d 	sth	r3,12(r17)
 4001b00:	180b883a 	mov	r5,r3
 4001b04:	0100520e 	bge	zero,r4,4001c50 <_fflush_r+0x1a0>
 4001b08:	88c00a17 	ldw	r3,40(r17)
 4001b0c:	18002226 	beq	r3,zero,4001b98 <_fflush_r+0xe8>
 4001b10:	1084000c 	andi	r2,r2,4096
 4001b14:	10bfffcc 	andi	r2,r2,65535
 4001b18:	10a0001c 	xori	r2,r2,32768
 4001b1c:	10a00004 	addi	r2,r2,-32768
 4001b20:	10004e26 	beq	r2,zero,4001c5c <_fflush_r+0x1ac>
 4001b24:	8c001417 	ldw	r16,80(r17)
 4001b28:	2940010c 	andi	r5,r5,4
 4001b2c:	297fffcc 	andi	r5,r5,65535
 4001b30:	2960001c 	xori	r5,r5,32768
 4001b34:	29600004 	addi	r5,r5,-32768
 4001b38:	28000626 	beq	r5,zero,4001b54 <_fflush_r+0xa4>
 4001b3c:	89000117 	ldw	r4,4(r17)
 4001b40:	88800c17 	ldw	r2,48(r17)
 4001b44:	8121c83a 	sub	r16,r16,r4
 4001b48:	10000226 	beq	r2,zero,4001b54 <_fflush_r+0xa4>
 4001b4c:	88800f17 	ldw	r2,60(r17)
 4001b50:	80a1c83a 	sub	r16,r16,r2
 4001b54:	89400717 	ldw	r5,28(r17)
 4001b58:	9809883a 	mov	r4,r19
 4001b5c:	800d883a 	mov	r6,r16
 4001b60:	000f883a 	mov	r7,zero
 4001b64:	183ee83a 	callr	r3
 4001b68:	8080281e 	bne	r16,r2,4001c0c <_fflush_r+0x15c>
 4001b6c:	8880030b 	ldhu	r2,12(r17)
 4001b70:	88c00417 	ldw	r3,16(r17)
 4001b74:	88000115 	stw	zero,4(r17)
 4001b78:	113dffcc 	andi	r4,r2,63487
 4001b7c:	1084000c 	andi	r2,r2,4096
 4001b80:	10bfffcc 	andi	r2,r2,65535
 4001b84:	10a0001c 	xori	r2,r2,32768
 4001b88:	8900030d 	sth	r4,12(r17)
 4001b8c:	88c00015 	stw	r3,0(r17)
 4001b90:	10a00004 	addi	r2,r2,-32768
 4001b94:	10002c1e 	bne	r2,zero,4001c48 <_fflush_r+0x198>
 4001b98:	0005883a 	mov	r2,zero
 4001b9c:	dfc00417 	ldw	ra,16(sp)
 4001ba0:	dcc00317 	ldw	r19,12(sp)
 4001ba4:	dc800217 	ldw	r18,8(sp)
 4001ba8:	dc400117 	ldw	r17,4(sp)
 4001bac:	dc000017 	ldw	r16,0(sp)
 4001bb0:	dec00504 	addi	sp,sp,20
 4001bb4:	f800283a 	ret
 4001bb8:	8c800417 	ldw	r18,16(r17)
 4001bbc:	903ff626 	beq	r18,zero,4001b98 <_fflush_r+0xe8>
 4001bc0:	8c000017 	ldw	r16,0(r17)
 4001bc4:	108000cc 	andi	r2,r2,3
 4001bc8:	8c800015 	stw	r18,0(r17)
 4001bcc:	84a1c83a 	sub	r16,r16,r18
 4001bd0:	10001b1e 	bne	r2,zero,4001c40 <_fflush_r+0x190>
 4001bd4:	88800517 	ldw	r2,20(r17)
 4001bd8:	88800215 	stw	r2,8(r17)
 4001bdc:	04000316 	blt	zero,r16,4001bec <_fflush_r+0x13c>
 4001be0:	003fed06 	br	4001b98 <_fflush_r+0xe8>
 4001be4:	90a5883a 	add	r18,r18,r2
 4001be8:	043feb0e 	bge	zero,r16,4001b98 <_fflush_r+0xe8>
 4001bec:	88800917 	ldw	r2,36(r17)
 4001bf0:	89400717 	ldw	r5,28(r17)
 4001bf4:	800f883a 	mov	r7,r16
 4001bf8:	900d883a 	mov	r6,r18
 4001bfc:	9809883a 	mov	r4,r19
 4001c00:	103ee83a 	callr	r2
 4001c04:	80a1c83a 	sub	r16,r16,r2
 4001c08:	00bff616 	blt	zero,r2,4001be4 <_fflush_r+0x134>
 4001c0c:	88c0030b 	ldhu	r3,12(r17)
 4001c10:	00bfffc4 	movi	r2,-1
 4001c14:	18c01014 	ori	r3,r3,64
 4001c18:	88c0030d 	sth	r3,12(r17)
 4001c1c:	dfc00417 	ldw	ra,16(sp)
 4001c20:	dcc00317 	ldw	r19,12(sp)
 4001c24:	dc800217 	ldw	r18,8(sp)
 4001c28:	dc400117 	ldw	r17,4(sp)
 4001c2c:	dc000017 	ldw	r16,0(sp)
 4001c30:	dec00504 	addi	sp,sp,20
 4001c34:	f800283a 	ret
 4001c38:	4001d580 	call	4001d58 <__sinit>
 4001c3c:	003fa706 	br	4001adc <_fflush_r+0x2c>
 4001c40:	0005883a 	mov	r2,zero
 4001c44:	003fe406 	br	4001bd8 <_fflush_r+0x128>
 4001c48:	8c001415 	stw	r16,80(r17)
 4001c4c:	003fd206 	br	4001b98 <_fflush_r+0xe8>
 4001c50:	88c00f17 	ldw	r3,60(r17)
 4001c54:	00ffac16 	blt	zero,r3,4001b08 <_fflush_r+0x58>
 4001c58:	003fcf06 	br	4001b98 <_fflush_r+0xe8>
 4001c5c:	89400717 	ldw	r5,28(r17)
 4001c60:	9809883a 	mov	r4,r19
 4001c64:	000d883a 	mov	r6,zero
 4001c68:	01c00044 	movi	r7,1
 4001c6c:	183ee83a 	callr	r3
 4001c70:	1021883a 	mov	r16,r2
 4001c74:	00bfffc4 	movi	r2,-1
 4001c78:	80800326 	beq	r16,r2,4001c88 <_fflush_r+0x1d8>
 4001c7c:	8940030b 	ldhu	r5,12(r17)
 4001c80:	88c00a17 	ldw	r3,40(r17)
 4001c84:	003fa806 	br	4001b28 <_fflush_r+0x78>
 4001c88:	98c00017 	ldw	r3,0(r19)
 4001c8c:	00800744 	movi	r2,29
 4001c90:	18bfde1e 	bne	r3,r2,4001c0c <_fflush_r+0x15c>
 4001c94:	003fc006 	br	4001b98 <_fflush_r+0xe8>

04001c98 <fflush>:
 4001c98:	200b883a 	mov	r5,r4
 4001c9c:	20000426 	beq	r4,zero,4001cb0 <fflush+0x18>
 4001ca0:	00810034 	movhi	r2,1024
 4001ca4:	109e3404 	addi	r2,r2,30928
 4001ca8:	11000017 	ldw	r4,0(r2)
 4001cac:	4001ab01 	jmpi	4001ab0 <_fflush_r>
 4001cb0:	00810034 	movhi	r2,1024
 4001cb4:	109e3304 	addi	r2,r2,30924
 4001cb8:	11000017 	ldw	r4,0(r2)
 4001cbc:	01410034 	movhi	r5,1024
 4001cc0:	2946ac04 	addi	r5,r5,6832
 4001cc4:	40024541 	jmpi	4002454 <_fwalk_reent>

04001cc8 <__fp_lock>:
 4001cc8:	0005883a 	mov	r2,zero
 4001ccc:	f800283a 	ret

04001cd0 <__fp_unlock>:
 4001cd0:	0005883a 	mov	r2,zero
 4001cd4:	f800283a 	ret

04001cd8 <_cleanup_r>:
 4001cd8:	01410034 	movhi	r5,1024
 4001cdc:	294ab704 	addi	r5,r5,10972
 4001ce0:	40023ac1 	jmpi	40023ac <_fwalk>

04001ce4 <__sfmoreglue>:
 4001ce4:	defffc04 	addi	sp,sp,-16
 4001ce8:	dc400115 	stw	r17,4(sp)
 4001cec:	2c401724 	muli	r17,r5,92
 4001cf0:	dc800215 	stw	r18,8(sp)
 4001cf4:	2825883a 	mov	r18,r5
 4001cf8:	89400304 	addi	r5,r17,12
 4001cfc:	dc000015 	stw	r16,0(sp)
 4001d00:	dfc00315 	stw	ra,12(sp)
 4001d04:	40008400 	call	4000840 <_malloc_r>
 4001d08:	1021883a 	mov	r16,r2
 4001d0c:	10000726 	beq	r2,zero,4001d2c <__sfmoreglue+0x48>
 4001d10:	11000304 	addi	r4,r2,12
 4001d14:	10000015 	stw	zero,0(r2)
 4001d18:	14800115 	stw	r18,4(r2)
 4001d1c:	11000215 	stw	r4,8(r2)
 4001d20:	000b883a 	mov	r5,zero
 4001d24:	880d883a 	mov	r6,r17
 4001d28:	40026b40 	call	40026b4 <memset>
 4001d2c:	8005883a 	mov	r2,r16
 4001d30:	dfc00317 	ldw	ra,12(sp)
 4001d34:	dc800217 	ldw	r18,8(sp)
 4001d38:	dc400117 	ldw	r17,4(sp)
 4001d3c:	dc000017 	ldw	r16,0(sp)
 4001d40:	dec00404 	addi	sp,sp,16
 4001d44:	f800283a 	ret

04001d48 <_cleanup>:
 4001d48:	00810034 	movhi	r2,1024
 4001d4c:	109e3304 	addi	r2,r2,30924
 4001d50:	11000017 	ldw	r4,0(r2)
 4001d54:	4001cd81 	jmpi	4001cd8 <_cleanup_r>

04001d58 <__sinit>:
 4001d58:	20800e17 	ldw	r2,56(r4)
 4001d5c:	1000401e 	bne	r2,zero,4001e60 <__sinit+0x108>
 4001d60:	21400117 	ldw	r5,4(r4)
 4001d64:	01810034 	movhi	r6,1024
 4001d68:	31873604 	addi	r6,r6,7384
 4001d6c:	20c00217 	ldw	r3,8(r4)
 4001d70:	21800f15 	stw	r6,60(r4)
 4001d74:	2080bb04 	addi	r2,r4,748
 4001d78:	02400044 	movi	r9,1
 4001d7c:	018000c4 	movi	r6,3
 4001d80:	2180b915 	stw	r6,740(r4)
 4001d84:	2080ba15 	stw	r2,744(r4)
 4001d88:	22400e15 	stw	r9,56(r4)
 4001d8c:	20800317 	ldw	r2,12(r4)
 4001d90:	2000b815 	stw	zero,736(r4)
 4001d94:	02010034 	movhi	r8,1024
 4001d98:	4209e404 	addi	r8,r8,10128
 4001d9c:	01c10034 	movhi	r7,1024
 4001da0:	39c9f904 	addi	r7,r7,10212
 4001da4:	01810034 	movhi	r6,1024
 4001da8:	318a1b04 	addi	r6,r6,10348
 4001dac:	01010034 	movhi	r4,1024
 4001db0:	210a3204 	addi	r4,r4,10440
 4001db4:	02800104 	movi	r10,4
 4001db8:	28000015 	stw	zero,0(r5)
 4001dbc:	28000115 	stw	zero,4(r5)
 4001dc0:	28000215 	stw	zero,8(r5)
 4001dc4:	2a80030d 	sth	r10,12(r5)
 4001dc8:	2800038d 	sth	zero,14(r5)
 4001dcc:	28000415 	stw	zero,16(r5)
 4001dd0:	28000515 	stw	zero,20(r5)
 4001dd4:	28000615 	stw	zero,24(r5)
 4001dd8:	29400715 	stw	r5,28(r5)
 4001ddc:	2a000815 	stw	r8,32(r5)
 4001de0:	29c00915 	stw	r7,36(r5)
 4001de4:	29800a15 	stw	r6,40(r5)
 4001de8:	29000b15 	stw	r4,44(r5)
 4001dec:	01400284 	movi	r5,10
 4001df0:	18000015 	stw	zero,0(r3)
 4001df4:	18000115 	stw	zero,4(r3)
 4001df8:	18000215 	stw	zero,8(r3)
 4001dfc:	1940030d 	sth	r5,12(r3)
 4001e00:	1a40038d 	sth	r9,14(r3)
 4001e04:	18000415 	stw	zero,16(r3)
 4001e08:	18000515 	stw	zero,20(r3)
 4001e0c:	18000615 	stw	zero,24(r3)
 4001e10:	18c00715 	stw	r3,28(r3)
 4001e14:	1a000815 	stw	r8,32(r3)
 4001e18:	19c00915 	stw	r7,36(r3)
 4001e1c:	19800a15 	stw	r6,40(r3)
 4001e20:	19000b15 	stw	r4,44(r3)
 4001e24:	00c00484 	movi	r3,18
 4001e28:	10c0030d 	sth	r3,12(r2)
 4001e2c:	00c00084 	movi	r3,2
 4001e30:	10000015 	stw	zero,0(r2)
 4001e34:	10000115 	stw	zero,4(r2)
 4001e38:	10000215 	stw	zero,8(r2)
 4001e3c:	10c0038d 	sth	r3,14(r2)
 4001e40:	10000415 	stw	zero,16(r2)
 4001e44:	10000515 	stw	zero,20(r2)
 4001e48:	10000615 	stw	zero,24(r2)
 4001e4c:	10800715 	stw	r2,28(r2)
 4001e50:	12000815 	stw	r8,32(r2)
 4001e54:	11c00915 	stw	r7,36(r2)
 4001e58:	11800a15 	stw	r6,40(r2)
 4001e5c:	11000b15 	stw	r4,44(r2)
 4001e60:	f800283a 	ret

04001e64 <__sfp>:
 4001e64:	defffc04 	addi	sp,sp,-16
 4001e68:	00810034 	movhi	r2,1024
 4001e6c:	109e3304 	addi	r2,r2,30924
 4001e70:	dc400115 	stw	r17,4(sp)
 4001e74:	14400017 	ldw	r17,0(r2)
 4001e78:	dc800215 	stw	r18,8(sp)
 4001e7c:	dfc00315 	stw	ra,12(sp)
 4001e80:	88800e17 	ldw	r2,56(r17)
 4001e84:	dc000015 	stw	r16,0(sp)
 4001e88:	2025883a 	mov	r18,r4
 4001e8c:	10002826 	beq	r2,zero,4001f30 <__sfp+0xcc>
 4001e90:	8c40b804 	addi	r17,r17,736
 4001e94:	043fffc4 	movi	r16,-1
 4001e98:	89400117 	ldw	r5,4(r17)
 4001e9c:	88800217 	ldw	r2,8(r17)
 4001ea0:	297fffc4 	addi	r5,r5,-1
 4001ea4:	28000a16 	blt	r5,zero,4001ed0 <__sfp+0x6c>
 4001ea8:	10c0030f 	ldh	r3,12(r2)
 4001eac:	18000c26 	beq	r3,zero,4001ee0 <__sfp+0x7c>
 4001eb0:	10c01a04 	addi	r3,r2,104
 4001eb4:	00000206 	br	4001ec0 <__sfp+0x5c>
 4001eb8:	19bfe90f 	ldh	r6,-92(r3)
 4001ebc:	30000826 	beq	r6,zero,4001ee0 <__sfp+0x7c>
 4001ec0:	297fffc4 	addi	r5,r5,-1
 4001ec4:	18bffd04 	addi	r2,r3,-12
 4001ec8:	18c01704 	addi	r3,r3,92
 4001ecc:	2c3ffa1e 	bne	r5,r16,4001eb8 <__sfp+0x54>
 4001ed0:	88800017 	ldw	r2,0(r17)
 4001ed4:	10001926 	beq	r2,zero,4001f3c <__sfp+0xd8>
 4001ed8:	1023883a 	mov	r17,r2
 4001edc:	003fee06 	br	4001e98 <__sfp+0x34>
 4001ee0:	00ffffc4 	movi	r3,-1
 4001ee4:	10c0038d 	sth	r3,14(r2)
 4001ee8:	00c00044 	movi	r3,1
 4001eec:	10c0030d 	sth	r3,12(r2)
 4001ef0:	10000015 	stw	zero,0(r2)
 4001ef4:	10000215 	stw	zero,8(r2)
 4001ef8:	10000115 	stw	zero,4(r2)
 4001efc:	10000415 	stw	zero,16(r2)
 4001f00:	10000515 	stw	zero,20(r2)
 4001f04:	10000615 	stw	zero,24(r2)
 4001f08:	10000c15 	stw	zero,48(r2)
 4001f0c:	10000d15 	stw	zero,52(r2)
 4001f10:	10001115 	stw	zero,68(r2)
 4001f14:	10001215 	stw	zero,72(r2)
 4001f18:	dfc00317 	ldw	ra,12(sp)
 4001f1c:	dc800217 	ldw	r18,8(sp)
 4001f20:	dc400117 	ldw	r17,4(sp)
 4001f24:	dc000017 	ldw	r16,0(sp)
 4001f28:	dec00404 	addi	sp,sp,16
 4001f2c:	f800283a 	ret
 4001f30:	8809883a 	mov	r4,r17
 4001f34:	4001d580 	call	4001d58 <__sinit>
 4001f38:	003fd506 	br	4001e90 <__sfp+0x2c>
 4001f3c:	9009883a 	mov	r4,r18
 4001f40:	01400104 	movi	r5,4
 4001f44:	4001ce40 	call	4001ce4 <__sfmoreglue>
 4001f48:	88800015 	stw	r2,0(r17)
 4001f4c:	103fe21e 	bne	r2,zero,4001ed8 <__sfp+0x74>
 4001f50:	00800304 	movi	r2,12
 4001f54:	90800015 	stw	r2,0(r18)
 4001f58:	0005883a 	mov	r2,zero
 4001f5c:	003fee06 	br	4001f18 <__sfp+0xb4>

04001f60 <__sfp_lock_acquire>:
 4001f60:	f800283a 	ret

04001f64 <__sfp_lock_release>:
 4001f64:	f800283a 	ret

04001f68 <__sinit_lock_acquire>:
 4001f68:	f800283a 	ret

04001f6c <__sinit_lock_release>:
 4001f6c:	f800283a 	ret

04001f70 <__fp_lock_all>:
 4001f70:	00810034 	movhi	r2,1024
 4001f74:	109e3404 	addi	r2,r2,30928
 4001f78:	11000017 	ldw	r4,0(r2)
 4001f7c:	01410034 	movhi	r5,1024
 4001f80:	29473204 	addi	r5,r5,7368
 4001f84:	40023ac1 	jmpi	40023ac <_fwalk>

04001f88 <__fp_unlock_all>:
 4001f88:	00810034 	movhi	r2,1024
 4001f8c:	109e3404 	addi	r2,r2,30928
 4001f90:	11000017 	ldw	r4,0(r2)
 4001f94:	01410034 	movhi	r5,1024
 4001f98:	29473404 	addi	r5,r5,7376
 4001f9c:	40023ac1 	jmpi	40023ac <_fwalk>

04001fa0 <_malloc_trim_r>:
 4001fa0:	defffb04 	addi	sp,sp,-20
 4001fa4:	dcc00315 	stw	r19,12(sp)
 4001fa8:	dc800215 	stw	r18,8(sp)
 4001fac:	dc400115 	stw	r17,4(sp)
 4001fb0:	dc000015 	stw	r16,0(sp)
 4001fb4:	2827883a 	mov	r19,r5
 4001fb8:	dfc00415 	stw	ra,16(sp)
 4001fbc:	04410034 	movhi	r17,1024
 4001fc0:	8c587e04 	addi	r17,r17,25080
 4001fc4:	2021883a 	mov	r16,r4
 4001fc8:	40032480 	call	4003248 <__malloc_lock>
 4001fcc:	88800217 	ldw	r2,8(r17)
 4001fd0:	14800117 	ldw	r18,4(r2)
 4001fd4:	00bfff04 	movi	r2,-4
 4001fd8:	90a4703a 	and	r18,r18,r2
 4001fdc:	9083fbc4 	addi	r2,r18,4079
 4001fe0:	14e7c83a 	sub	r19,r2,r19
 4001fe4:	9826d33a 	srli	r19,r19,12
 4001fe8:	0083ffc4 	movi	r2,4095
 4001fec:	9cffffc4 	addi	r19,r19,-1
 4001ff0:	9826933a 	slli	r19,r19,12
 4001ff4:	14c0060e 	bge	r2,r19,4002010 <_malloc_trim_r+0x70>
 4001ff8:	8009883a 	mov	r4,r16
 4001ffc:	000b883a 	mov	r5,zero
 4002000:	40018d80 	call	40018d8 <_sbrk_r>
 4002004:	88c00217 	ldw	r3,8(r17)
 4002008:	1c87883a 	add	r3,r3,r18
 400200c:	10c00a26 	beq	r2,r3,4002038 <_malloc_trim_r+0x98>
 4002010:	8009883a 	mov	r4,r16
 4002014:	40032680 	call	4003268 <__malloc_unlock>
 4002018:	0005883a 	mov	r2,zero
 400201c:	dfc00417 	ldw	ra,16(sp)
 4002020:	dcc00317 	ldw	r19,12(sp)
 4002024:	dc800217 	ldw	r18,8(sp)
 4002028:	dc400117 	ldw	r17,4(sp)
 400202c:	dc000017 	ldw	r16,0(sp)
 4002030:	dec00504 	addi	sp,sp,20
 4002034:	f800283a 	ret
 4002038:	8009883a 	mov	r4,r16
 400203c:	04cbc83a 	sub	r5,zero,r19
 4002040:	40018d80 	call	40018d8 <_sbrk_r>
 4002044:	00ffffc4 	movi	r3,-1
 4002048:	10c01326 	beq	r2,r3,4002098 <_malloc_trim_r+0xf8>
 400204c:	00810074 	movhi	r2,1025
 4002050:	10a50e04 	addi	r2,r2,-27592
 4002054:	11000017 	ldw	r4,0(r2)
 4002058:	88c00217 	ldw	r3,8(r17)
 400205c:	94e5c83a 	sub	r18,r18,r19
 4002060:	94800054 	ori	r18,r18,1
 4002064:	24e7c83a 	sub	r19,r4,r19
 4002068:	1c800115 	stw	r18,4(r3)
 400206c:	8009883a 	mov	r4,r16
 4002070:	14c00015 	stw	r19,0(r2)
 4002074:	40032680 	call	4003268 <__malloc_unlock>
 4002078:	00800044 	movi	r2,1
 400207c:	dfc00417 	ldw	ra,16(sp)
 4002080:	dcc00317 	ldw	r19,12(sp)
 4002084:	dc800217 	ldw	r18,8(sp)
 4002088:	dc400117 	ldw	r17,4(sp)
 400208c:	dc000017 	ldw	r16,0(sp)
 4002090:	dec00504 	addi	sp,sp,20
 4002094:	f800283a 	ret
 4002098:	8009883a 	mov	r4,r16
 400209c:	000b883a 	mov	r5,zero
 40020a0:	40018d80 	call	40018d8 <_sbrk_r>
 40020a4:	88c00217 	ldw	r3,8(r17)
 40020a8:	014003c4 	movi	r5,15
 40020ac:	10c9c83a 	sub	r4,r2,r3
 40020b0:	293fd70e 	bge	r5,r4,4002010 <_malloc_trim_r+0x70>
 40020b4:	01410034 	movhi	r5,1024
 40020b8:	295e3504 	addi	r5,r5,30932
 40020bc:	29400017 	ldw	r5,0(r5)
 40020c0:	21000054 	ori	r4,r4,1
 40020c4:	19000115 	stw	r4,4(r3)
 40020c8:	1145c83a 	sub	r2,r2,r5
 40020cc:	01410074 	movhi	r5,1025
 40020d0:	29650e04 	addi	r5,r5,-27592
 40020d4:	28800015 	stw	r2,0(r5)
 40020d8:	003fcd06 	br	4002010 <_malloc_trim_r+0x70>

040020dc <_free_r>:
 40020dc:	defffd04 	addi	sp,sp,-12
 40020e0:	dc400115 	stw	r17,4(sp)
 40020e4:	dc000015 	stw	r16,0(sp)
 40020e8:	dfc00215 	stw	ra,8(sp)
 40020ec:	2821883a 	mov	r16,r5
 40020f0:	2023883a 	mov	r17,r4
 40020f4:	28004b26 	beq	r5,zero,4002224 <_free_r+0x148>
 40020f8:	40032480 	call	4003248 <__malloc_lock>
 40020fc:	823fff17 	ldw	r8,-4(r16)
 4002100:	00bfff84 	movi	r2,-2
 4002104:	81bffe04 	addi	r6,r16,-8
 4002108:	4084703a 	and	r2,r8,r2
 400210c:	3087883a 	add	r3,r6,r2
 4002110:	01410034 	movhi	r5,1024
 4002114:	29587e04 	addi	r5,r5,25080
 4002118:	1a400117 	ldw	r9,4(r3)
 400211c:	29000217 	ldw	r4,8(r5)
 4002120:	01ffff04 	movi	r7,-4
 4002124:	49ce703a 	and	r7,r9,r7
 4002128:	20c06526 	beq	r4,r3,40022c0 <_free_r+0x1e4>
 400212c:	19c00115 	stw	r7,4(r3)
 4002130:	4200004c 	andi	r8,r8,1
 4002134:	40003026 	beq	r8,zero,40021f8 <_free_r+0x11c>
 4002138:	0009883a 	mov	r4,zero
 400213c:	19d1883a 	add	r8,r3,r7
 4002140:	42000117 	ldw	r8,4(r8)
 4002144:	4200004c 	andi	r8,r8,1
 4002148:	4000061e 	bne	r8,zero,4002164 <_free_r+0x88>
 400214c:	11c5883a 	add	r2,r2,r7
 4002150:	19c00217 	ldw	r7,8(r3)
 4002154:	20004e26 	beq	r4,zero,4002290 <_free_r+0x1b4>
 4002158:	18c00317 	ldw	r3,12(r3)
 400215c:	38c00315 	stw	r3,12(r7)
 4002160:	19c00215 	stw	r7,8(r3)
 4002164:	11c00054 	ori	r7,r2,1
 4002168:	3087883a 	add	r3,r6,r2
 400216c:	31c00115 	stw	r7,4(r6)
 4002170:	18800015 	stw	r2,0(r3)
 4002174:	20001a1e 	bne	r4,zero,40021e0 <_free_r+0x104>
 4002178:	00c07fc4 	movi	r3,511
 400217c:	18802e2e 	bgeu	r3,r2,4002238 <_free_r+0x15c>
 4002180:	1006d27a 	srli	r3,r2,9
 4002184:	01000104 	movi	r4,4
 4002188:	20c06636 	bltu	r4,r3,4002324 <_free_r+0x248>
 400218c:	1008d1ba 	srli	r4,r2,6
 4002190:	21000e04 	addi	r4,r4,56
 4002194:	210f883a 	add	r7,r4,r4
 4002198:	39cf883a 	add	r7,r7,r7
 400219c:	39cf883a 	add	r7,r7,r7
 40021a0:	29cf883a 	add	r7,r5,r7
 40021a4:	38c00217 	ldw	r3,8(r7)
 40021a8:	01410034 	movhi	r5,1024
 40021ac:	29587e04 	addi	r5,r5,25080
 40021b0:	19c06126 	beq	r3,r7,4002338 <_free_r+0x25c>
 40021b4:	013fff04 	movi	r4,-4
 40021b8:	19400117 	ldw	r5,4(r3)
 40021bc:	290a703a 	and	r5,r5,r4
 40021c0:	1140022e 	bgeu	r2,r5,40021cc <_free_r+0xf0>
 40021c4:	18c00217 	ldw	r3,8(r3)
 40021c8:	38fffb1e 	bne	r7,r3,40021b8 <_free_r+0xdc>
 40021cc:	18800317 	ldw	r2,12(r3)
 40021d0:	30800315 	stw	r2,12(r6)
 40021d4:	30c00215 	stw	r3,8(r6)
 40021d8:	11800215 	stw	r6,8(r2)
 40021dc:	19800315 	stw	r6,12(r3)
 40021e0:	8809883a 	mov	r4,r17
 40021e4:	dfc00217 	ldw	ra,8(sp)
 40021e8:	dc400117 	ldw	r17,4(sp)
 40021ec:	dc000017 	ldw	r16,0(sp)
 40021f0:	dec00304 	addi	sp,sp,12
 40021f4:	40032681 	jmpi	4003268 <__malloc_unlock>
 40021f8:	813ffe17 	ldw	r4,-8(r16)
 40021fc:	2a400204 	addi	r9,r5,8
 4002200:	310dc83a 	sub	r6,r6,r4
 4002204:	32000217 	ldw	r8,8(r6)
 4002208:	1105883a 	add	r2,r2,r4
 400220c:	42404326 	beq	r8,r9,400231c <_free_r+0x240>
 4002210:	32400317 	ldw	r9,12(r6)
 4002214:	0009883a 	mov	r4,zero
 4002218:	42400315 	stw	r9,12(r8)
 400221c:	4a000215 	stw	r8,8(r9)
 4002220:	003fc606 	br	400213c <_free_r+0x60>
 4002224:	dfc00217 	ldw	ra,8(sp)
 4002228:	dc400117 	ldw	r17,4(sp)
 400222c:	dc000017 	ldw	r16,0(sp)
 4002230:	dec00304 	addi	sp,sp,12
 4002234:	f800283a 	ret
 4002238:	1004d0fa 	srli	r2,r2,3
 400223c:	02000044 	movi	r8,1
 4002240:	29c00117 	ldw	r7,4(r5)
 4002244:	1087883a 	add	r3,r2,r2
 4002248:	18c7883a 	add	r3,r3,r3
 400224c:	1005d0ba 	srai	r2,r2,2
 4002250:	18c7883a 	add	r3,r3,r3
 4002254:	28c7883a 	add	r3,r5,r3
 4002258:	19000217 	ldw	r4,8(r3)
 400225c:	4084983a 	sll	r2,r8,r2
 4002260:	30c00315 	stw	r3,12(r6)
 4002264:	31000215 	stw	r4,8(r6)
 4002268:	11c4b03a 	or	r2,r2,r7
 400226c:	21800315 	stw	r6,12(r4)
 4002270:	8809883a 	mov	r4,r17
 4002274:	28800115 	stw	r2,4(r5)
 4002278:	19800215 	stw	r6,8(r3)
 400227c:	dfc00217 	ldw	ra,8(sp)
 4002280:	dc400117 	ldw	r17,4(sp)
 4002284:	dc000017 	ldw	r16,0(sp)
 4002288:	dec00304 	addi	sp,sp,12
 400228c:	40032681 	jmpi	4003268 <__malloc_unlock>
 4002290:	02010034 	movhi	r8,1024
 4002294:	42188004 	addi	r8,r8,25088
 4002298:	3a3faf1e 	bne	r7,r8,4002158 <_free_r+0x7c>
 400229c:	29800515 	stw	r6,20(r5)
 40022a0:	29800415 	stw	r6,16(r5)
 40022a4:	11000054 	ori	r4,r2,1
 40022a8:	3087883a 	add	r3,r6,r2
 40022ac:	31c00315 	stw	r7,12(r6)
 40022b0:	31c00215 	stw	r7,8(r6)
 40022b4:	31000115 	stw	r4,4(r6)
 40022b8:	18800015 	stw	r2,0(r3)
 40022bc:	003fc806 	br	40021e0 <_free_r+0x104>
 40022c0:	4200004c 	andi	r8,r8,1
 40022c4:	3885883a 	add	r2,r7,r2
 40022c8:	4000071e 	bne	r8,zero,40022e8 <_free_r+0x20c>
 40022cc:	81fffe17 	ldw	r7,-8(r16)
 40022d0:	31cdc83a 	sub	r6,r6,r7
 40022d4:	30c00317 	ldw	r3,12(r6)
 40022d8:	31000217 	ldw	r4,8(r6)
 40022dc:	11c5883a 	add	r2,r2,r7
 40022e0:	20c00315 	stw	r3,12(r4)
 40022e4:	19000215 	stw	r4,8(r3)
 40022e8:	00c10034 	movhi	r3,1024
 40022ec:	18de3604 	addi	r3,r3,30936
 40022f0:	18c00017 	ldw	r3,0(r3)
 40022f4:	11000054 	ori	r4,r2,1
 40022f8:	31000115 	stw	r4,4(r6)
 40022fc:	29800215 	stw	r6,8(r5)
 4002300:	10ffb736 	bltu	r2,r3,40021e0 <_free_r+0x104>
 4002304:	00810074 	movhi	r2,1025
 4002308:	10a50604 	addi	r2,r2,-27624
 400230c:	11400017 	ldw	r5,0(r2)
 4002310:	8809883a 	mov	r4,r17
 4002314:	4001fa00 	call	4001fa0 <_malloc_trim_r>
 4002318:	003fb106 	br	40021e0 <_free_r+0x104>
 400231c:	01000044 	movi	r4,1
 4002320:	003f8606 	br	400213c <_free_r+0x60>
 4002324:	01000504 	movi	r4,20
 4002328:	20c00b36 	bltu	r4,r3,4002358 <_free_r+0x27c>
 400232c:	190016c4 	addi	r4,r3,91
 4002330:	210f883a 	add	r7,r4,r4
 4002334:	003f9806 	br	4002198 <_free_r+0xbc>
 4002338:	2009d0ba 	srai	r4,r4,2
 400233c:	00800044 	movi	r2,1
 4002340:	29c00117 	ldw	r7,4(r5)
 4002344:	1108983a 	sll	r4,r2,r4
 4002348:	1805883a 	mov	r2,r3
 400234c:	21c8b03a 	or	r4,r4,r7
 4002350:	29000115 	stw	r4,4(r5)
 4002354:	003f9e06 	br	40021d0 <_free_r+0xf4>
 4002358:	01001504 	movi	r4,84
 400235c:	20c00436 	bltu	r4,r3,4002370 <_free_r+0x294>
 4002360:	1008d33a 	srli	r4,r2,12
 4002364:	21001b84 	addi	r4,r4,110
 4002368:	210f883a 	add	r7,r4,r4
 400236c:	003f8a06 	br	4002198 <_free_r+0xbc>
 4002370:	01005504 	movi	r4,340
 4002374:	20c00436 	bltu	r4,r3,4002388 <_free_r+0x2ac>
 4002378:	1008d3fa 	srli	r4,r2,15
 400237c:	21001dc4 	addi	r4,r4,119
 4002380:	210f883a 	add	r7,r4,r4
 4002384:	003f8406 	br	4002198 <_free_r+0xbc>
 4002388:	01015504 	movi	r4,1364
 400238c:	20c00436 	bltu	r4,r3,40023a0 <_free_r+0x2c4>
 4002390:	1008d4ba 	srli	r4,r2,18
 4002394:	21001f04 	addi	r4,r4,124
 4002398:	210f883a 	add	r7,r4,r4
 400239c:	003f7e06 	br	4002198 <_free_r+0xbc>
 40023a0:	01c03f04 	movi	r7,252
 40023a4:	01001f84 	movi	r4,126
 40023a8:	003f7b06 	br	4002198 <_free_r+0xbc>

040023ac <_fwalk>:
 40023ac:	defff904 	addi	sp,sp,-28
 40023b0:	dcc00315 	stw	r19,12(sp)
 40023b4:	24c0b804 	addi	r19,r4,736
 40023b8:	dd400515 	stw	r21,20(sp)
 40023bc:	dd000415 	stw	r20,16(sp)
 40023c0:	dfc00615 	stw	ra,24(sp)
 40023c4:	dc800215 	stw	r18,8(sp)
 40023c8:	dc400115 	stw	r17,4(sp)
 40023cc:	dc000015 	stw	r16,0(sp)
 40023d0:	282b883a 	mov	r21,r5
 40023d4:	0029883a 	mov	r20,zero
 40023d8:	4001f600 	call	4001f60 <__sfp_lock_acquire>
 40023dc:	98001226 	beq	r19,zero,4002428 <_fwalk+0x7c>
 40023e0:	04bfffc4 	movi	r18,-1
 40023e4:	9c400117 	ldw	r17,4(r19)
 40023e8:	9c000217 	ldw	r16,8(r19)
 40023ec:	8c7fffc4 	addi	r17,r17,-1
 40023f0:	88000b16 	blt	r17,zero,4002420 <_fwalk+0x74>
 40023f4:	84000304 	addi	r16,r16,12
 40023f8:	80c0000f 	ldh	r3,0(r16)
 40023fc:	8c7fffc4 	addi	r17,r17,-1
 4002400:	813ffd04 	addi	r4,r16,-12
 4002404:	18000426 	beq	r3,zero,4002418 <_fwalk+0x6c>
 4002408:	80c0008f 	ldh	r3,2(r16)
 400240c:	1c800226 	beq	r3,r18,4002418 <_fwalk+0x6c>
 4002410:	a83ee83a 	callr	r21
 4002414:	a0a8b03a 	or	r20,r20,r2
 4002418:	84001704 	addi	r16,r16,92
 400241c:	8cbff61e 	bne	r17,r18,40023f8 <_fwalk+0x4c>
 4002420:	9cc00017 	ldw	r19,0(r19)
 4002424:	983fef1e 	bne	r19,zero,40023e4 <_fwalk+0x38>
 4002428:	4001f640 	call	4001f64 <__sfp_lock_release>
 400242c:	a005883a 	mov	r2,r20
 4002430:	dfc00617 	ldw	ra,24(sp)
 4002434:	dd400517 	ldw	r21,20(sp)
 4002438:	dd000417 	ldw	r20,16(sp)
 400243c:	dcc00317 	ldw	r19,12(sp)
 4002440:	dc800217 	ldw	r18,8(sp)
 4002444:	dc400117 	ldw	r17,4(sp)
 4002448:	dc000017 	ldw	r16,0(sp)
 400244c:	dec00704 	addi	sp,sp,28
 4002450:	f800283a 	ret

04002454 <_fwalk_reent>:
 4002454:	defff804 	addi	sp,sp,-32
 4002458:	dcc00315 	stw	r19,12(sp)
 400245c:	24c0b804 	addi	r19,r4,736
 4002460:	dd800615 	stw	r22,24(sp)
 4002464:	dd400515 	stw	r21,20(sp)
 4002468:	dd000415 	stw	r20,16(sp)
 400246c:	dfc00715 	stw	ra,28(sp)
 4002470:	dc800215 	stw	r18,8(sp)
 4002474:	dc400115 	stw	r17,4(sp)
 4002478:	dc000015 	stw	r16,0(sp)
 400247c:	2029883a 	mov	r20,r4
 4002480:	282b883a 	mov	r21,r5
 4002484:	002d883a 	mov	r22,zero
 4002488:	4001f600 	call	4001f60 <__sfp_lock_acquire>
 400248c:	98001326 	beq	r19,zero,40024dc <_fwalk_reent+0x88>
 4002490:	04bfffc4 	movi	r18,-1
 4002494:	9c400117 	ldw	r17,4(r19)
 4002498:	9c000217 	ldw	r16,8(r19)
 400249c:	8c7fffc4 	addi	r17,r17,-1
 40024a0:	88000c16 	blt	r17,zero,40024d4 <_fwalk_reent+0x80>
 40024a4:	84000304 	addi	r16,r16,12
 40024a8:	80c0000f 	ldh	r3,0(r16)
 40024ac:	8c7fffc4 	addi	r17,r17,-1
 40024b0:	817ffd04 	addi	r5,r16,-12
 40024b4:	18000526 	beq	r3,zero,40024cc <_fwalk_reent+0x78>
 40024b8:	80c0008f 	ldh	r3,2(r16)
 40024bc:	a009883a 	mov	r4,r20
 40024c0:	1c800226 	beq	r3,r18,40024cc <_fwalk_reent+0x78>
 40024c4:	a83ee83a 	callr	r21
 40024c8:	b0acb03a 	or	r22,r22,r2
 40024cc:	84001704 	addi	r16,r16,92
 40024d0:	8cbff51e 	bne	r17,r18,40024a8 <_fwalk_reent+0x54>
 40024d4:	9cc00017 	ldw	r19,0(r19)
 40024d8:	983fee1e 	bne	r19,zero,4002494 <_fwalk_reent+0x40>
 40024dc:	4001f640 	call	4001f64 <__sfp_lock_release>
 40024e0:	b005883a 	mov	r2,r22
 40024e4:	dfc00717 	ldw	ra,28(sp)
 40024e8:	dd800617 	ldw	r22,24(sp)
 40024ec:	dd400517 	ldw	r21,20(sp)
 40024f0:	dd000417 	ldw	r20,16(sp)
 40024f4:	dcc00317 	ldw	r19,12(sp)
 40024f8:	dc800217 	ldw	r18,8(sp)
 40024fc:	dc400117 	ldw	r17,4(sp)
 4002500:	dc000017 	ldw	r16,0(sp)
 4002504:	dec00804 	addi	sp,sp,32
 4002508:	f800283a 	ret

0400250c <__smakebuf_r>:
 400250c:	2880030b 	ldhu	r2,12(r5)
 4002510:	deffed04 	addi	sp,sp,-76
 4002514:	dc401015 	stw	r17,64(sp)
 4002518:	10c0008c 	andi	r3,r2,2
 400251c:	18ffffcc 	andi	r3,r3,65535
 4002520:	18e0001c 	xori	r3,r3,32768
 4002524:	dc000f15 	stw	r16,60(sp)
 4002528:	dfc01215 	stw	ra,72(sp)
 400252c:	dc801115 	stw	r18,68(sp)
 4002530:	18e00004 	addi	r3,r3,-32768
 4002534:	2821883a 	mov	r16,r5
 4002538:	2023883a 	mov	r17,r4
 400253c:	1800381e 	bne	r3,zero,4002620 <__smakebuf_r+0x114>
 4002540:	2940038f 	ldh	r5,14(r5)
 4002544:	28002d16 	blt	r5,zero,40025fc <__smakebuf_r+0xf0>
 4002548:	d80d883a 	mov	r6,sp
 400254c:	4002af00 	call	4002af0 <_fstat_r>
 4002550:	10002916 	blt	r2,zero,40025f8 <__smakebuf_r+0xec>
 4002554:	d8800117 	ldw	r2,4(sp)
 4002558:	00e00014 	movui	r3,32768
 400255c:	10bc000c 	andi	r2,r2,61440
 4002560:	10c03c26 	beq	r2,r3,4002654 <__smakebuf_r+0x148>
 4002564:	80c0030b 	ldhu	r3,12(r16)
 4002568:	18c20014 	ori	r3,r3,2048
 400256c:	80c0030d 	sth	r3,12(r16)
 4002570:	00c80004 	movi	r3,8192
 4002574:	10c00c1e 	bne	r2,r3,40025a8 <__smakebuf_r+0x9c>
 4002578:	8140038f 	ldh	r5,14(r16)
 400257c:	8809883a 	mov	r4,r17
 4002580:	4002b580 	call	4002b58 <_isatty_r>
 4002584:	10000826 	beq	r2,zero,40025a8 <__smakebuf_r+0x9c>
 4002588:	80c0030b 	ldhu	r3,12(r16)
 400258c:	808010c4 	addi	r2,r16,67
 4002590:	80800015 	stw	r2,0(r16)
 4002594:	18c00054 	ori	r3,r3,1
 4002598:	80800415 	stw	r2,16(r16)
 400259c:	00800044 	movi	r2,1
 40025a0:	80c0030d 	sth	r3,12(r16)
 40025a4:	80800515 	stw	r2,20(r16)
 40025a8:	04810004 	movi	r18,1024
 40025ac:	8809883a 	mov	r4,r17
 40025b0:	900b883a 	mov	r5,r18
 40025b4:	40008400 	call	4000840 <_malloc_r>
 40025b8:	10003026 	beq	r2,zero,400267c <__smakebuf_r+0x170>
 40025bc:	80c0030b 	ldhu	r3,12(r16)
 40025c0:	01010034 	movhi	r4,1024
 40025c4:	21073604 	addi	r4,r4,7384
 40025c8:	89000f15 	stw	r4,60(r17)
 40025cc:	18c02014 	ori	r3,r3,128
 40025d0:	80c0030d 	sth	r3,12(r16)
 40025d4:	80800015 	stw	r2,0(r16)
 40025d8:	80800415 	stw	r2,16(r16)
 40025dc:	84800515 	stw	r18,20(r16)
 40025e0:	dfc01217 	ldw	ra,72(sp)
 40025e4:	dc801117 	ldw	r18,68(sp)
 40025e8:	dc401017 	ldw	r17,64(sp)
 40025ec:	dc000f17 	ldw	r16,60(sp)
 40025f0:	dec01304 	addi	sp,sp,76
 40025f4:	f800283a 	ret
 40025f8:	8080030b 	ldhu	r2,12(r16)
 40025fc:	10c0200c 	andi	r3,r2,128
 4002600:	18ffffcc 	andi	r3,r3,65535
 4002604:	18e0001c 	xori	r3,r3,32768
 4002608:	18e00004 	addi	r3,r3,-32768
 400260c:	18000f1e 	bne	r3,zero,400264c <__smakebuf_r+0x140>
 4002610:	04810004 	movi	r18,1024
 4002614:	10820014 	ori	r2,r2,2048
 4002618:	8080030d 	sth	r2,12(r16)
 400261c:	003fe306 	br	40025ac <__smakebuf_r+0xa0>
 4002620:	288010c4 	addi	r2,r5,67
 4002624:	28800015 	stw	r2,0(r5)
 4002628:	28800415 	stw	r2,16(r5)
 400262c:	00800044 	movi	r2,1
 4002630:	28800515 	stw	r2,20(r5)
 4002634:	dfc01217 	ldw	ra,72(sp)
 4002638:	dc801117 	ldw	r18,68(sp)
 400263c:	dc401017 	ldw	r17,64(sp)
 4002640:	dc000f17 	ldw	r16,60(sp)
 4002644:	dec01304 	addi	sp,sp,76
 4002648:	f800283a 	ret
 400264c:	04801004 	movi	r18,64
 4002650:	003ff006 	br	4002614 <__smakebuf_r+0x108>
 4002654:	81000a17 	ldw	r4,40(r16)
 4002658:	00c10034 	movhi	r3,1024
 400265c:	18ca1b04 	addi	r3,r3,10348
 4002660:	20ffc01e 	bne	r4,r3,4002564 <__smakebuf_r+0x58>
 4002664:	8080030b 	ldhu	r2,12(r16)
 4002668:	00c10004 	movi	r3,1024
 400266c:	80c01315 	stw	r3,76(r16)
 4002670:	10c4b03a 	or	r2,r2,r3
 4002674:	8080030d 	sth	r2,12(r16)
 4002678:	003fcb06 	br	40025a8 <__smakebuf_r+0x9c>
 400267c:	8080030b 	ldhu	r2,12(r16)
 4002680:	10c0800c 	andi	r3,r2,512
 4002684:	18ffffcc 	andi	r3,r3,65535
 4002688:	18e0001c 	xori	r3,r3,32768
 400268c:	18e00004 	addi	r3,r3,-32768
 4002690:	183fd31e 	bne	r3,zero,40025e0 <__smakebuf_r+0xd4>
 4002694:	10800094 	ori	r2,r2,2
 4002698:	80c010c4 	addi	r3,r16,67
 400269c:	8080030d 	sth	r2,12(r16)
 40026a0:	00800044 	movi	r2,1
 40026a4:	80c00015 	stw	r3,0(r16)
 40026a8:	80c00415 	stw	r3,16(r16)
 40026ac:	80800515 	stw	r2,20(r16)
 40026b0:	003fcb06 	br	40025e0 <__smakebuf_r+0xd4>

040026b4 <memset>:
 40026b4:	00c000c4 	movi	r3,3
 40026b8:	2005883a 	mov	r2,r4
 40026bc:	29403fcc 	andi	r5,r5,255
 40026c0:	19802d2e 	bgeu	r3,r6,4002778 <memset+0xc4>
 40026c4:	20c6703a 	and	r3,r4,r3
 40026c8:	18002e1e 	bne	r3,zero,4002784 <memset+0xd0>
 40026cc:	2806923a 	slli	r3,r5,8
 40026d0:	010003c4 	movi	r4,15
 40026d4:	3011883a 	mov	r8,r6
 40026d8:	1946b03a 	or	r3,r3,r5
 40026dc:	180e943a 	slli	r7,r3,16
 40026e0:	38ceb03a 	or	r7,r7,r3
 40026e4:	1007883a 	mov	r3,r2
 40026e8:	21800f2e 	bgeu	r4,r6,4002728 <memset+0x74>
 40026ec:	19c00015 	stw	r7,0(r3)
 40026f0:	19c00115 	stw	r7,4(r3)
 40026f4:	19c00215 	stw	r7,8(r3)
 40026f8:	19c00315 	stw	r7,12(r3)
 40026fc:	423ffc04 	addi	r8,r8,-16
 4002700:	18c00404 	addi	r3,r3,16
 4002704:	223ff936 	bltu	r4,r8,40026ec <memset+0x38>
 4002708:	30fffc04 	addi	r3,r6,-16
 400270c:	1806d13a 	srli	r3,r3,4
 4002710:	318003cc 	andi	r6,r6,15
 4002714:	010000c4 	movi	r4,3
 4002718:	18c00044 	addi	r3,r3,1
 400271c:	1806913a 	slli	r3,r3,4
 4002720:	10c7883a 	add	r3,r2,r3
 4002724:	21800e2e 	bgeu	r4,r6,4002760 <memset+0xac>
 4002728:	1813883a 	mov	r9,r3
 400272c:	3011883a 	mov	r8,r6
 4002730:	010000c4 	movi	r4,3
 4002734:	49c00015 	stw	r7,0(r9)
 4002738:	423fff04 	addi	r8,r8,-4
 400273c:	4a400104 	addi	r9,r9,4
 4002740:	223ffc36 	bltu	r4,r8,4002734 <memset+0x80>
 4002744:	313fff04 	addi	r4,r6,-4
 4002748:	2008d0ba 	srli	r4,r4,2
 400274c:	318000cc 	andi	r6,r6,3
 4002750:	21000044 	addi	r4,r4,1
 4002754:	2109883a 	add	r4,r4,r4
 4002758:	2109883a 	add	r4,r4,r4
 400275c:	1907883a 	add	r3,r3,r4
 4002760:	30000a26 	beq	r6,zero,400278c <memset+0xd8>
 4002764:	198d883a 	add	r6,r3,r6
 4002768:	19400005 	stb	r5,0(r3)
 400276c:	18c00044 	addi	r3,r3,1
 4002770:	19bffd1e 	bne	r3,r6,4002768 <memset+0xb4>
 4002774:	f800283a 	ret
 4002778:	2007883a 	mov	r3,r4
 400277c:	303ff91e 	bne	r6,zero,4002764 <memset+0xb0>
 4002780:	00000206 	br	400278c <memset+0xd8>
 4002784:	2007883a 	mov	r3,r4
 4002788:	003ff606 	br	4002764 <memset+0xb0>
 400278c:	f800283a 	ret

04002790 <__sread>:
 4002790:	defffe04 	addi	sp,sp,-8
 4002794:	dc000015 	stw	r16,0(sp)
 4002798:	2821883a 	mov	r16,r5
 400279c:	2940038f 	ldh	r5,14(r5)
 40027a0:	dfc00115 	stw	ra,4(sp)
 40027a4:	4002c280 	call	4002c28 <_read_r>
 40027a8:	10000716 	blt	r2,zero,40027c8 <__sread+0x38>
 40027ac:	80c01417 	ldw	r3,80(r16)
 40027b0:	1887883a 	add	r3,r3,r2
 40027b4:	80c01415 	stw	r3,80(r16)
 40027b8:	dfc00117 	ldw	ra,4(sp)
 40027bc:	dc000017 	ldw	r16,0(sp)
 40027c0:	dec00204 	addi	sp,sp,8
 40027c4:	f800283a 	ret
 40027c8:	80c0030b 	ldhu	r3,12(r16)
 40027cc:	18fbffcc 	andi	r3,r3,61439
 40027d0:	80c0030d 	sth	r3,12(r16)
 40027d4:	dfc00117 	ldw	ra,4(sp)
 40027d8:	dc000017 	ldw	r16,0(sp)
 40027dc:	dec00204 	addi	sp,sp,8
 40027e0:	f800283a 	ret

040027e4 <__swrite>:
 40027e4:	2880030b 	ldhu	r2,12(r5)
 40027e8:	defffb04 	addi	sp,sp,-20
 40027ec:	dcc00315 	stw	r19,12(sp)
 40027f0:	10c0400c 	andi	r3,r2,256
 40027f4:	18ffffcc 	andi	r3,r3,65535
 40027f8:	18e0001c 	xori	r3,r3,32768
 40027fc:	dc800215 	stw	r18,8(sp)
 4002800:	dc400115 	stw	r17,4(sp)
 4002804:	dc000015 	stw	r16,0(sp)
 4002808:	dfc00415 	stw	ra,16(sp)
 400280c:	18e00004 	addi	r3,r3,-32768
 4002810:	2821883a 	mov	r16,r5
 4002814:	2027883a 	mov	r19,r4
 4002818:	3025883a 	mov	r18,r6
 400281c:	3823883a 	mov	r17,r7
 4002820:	18000526 	beq	r3,zero,4002838 <__swrite+0x54>
 4002824:	2940038f 	ldh	r5,14(r5)
 4002828:	000d883a 	mov	r6,zero
 400282c:	01c00084 	movi	r7,2
 4002830:	4002bbc0 	call	4002bbc <_lseek_r>
 4002834:	8080030b 	ldhu	r2,12(r16)
 4002838:	8140038f 	ldh	r5,14(r16)
 400283c:	10bbffcc 	andi	r2,r2,61439
 4002840:	9809883a 	mov	r4,r19
 4002844:	900d883a 	mov	r6,r18
 4002848:	880f883a 	mov	r7,r17
 400284c:	8080030d 	sth	r2,12(r16)
 4002850:	dfc00417 	ldw	ra,16(sp)
 4002854:	dcc00317 	ldw	r19,12(sp)
 4002858:	dc800217 	ldw	r18,8(sp)
 400285c:	dc400117 	ldw	r17,4(sp)
 4002860:	dc000017 	ldw	r16,0(sp)
 4002864:	dec00504 	addi	sp,sp,20
 4002868:	40028d01 	jmpi	40028d0 <_write_r>

0400286c <__sseek>:
 400286c:	defffe04 	addi	sp,sp,-8
 4002870:	dc000015 	stw	r16,0(sp)
 4002874:	2821883a 	mov	r16,r5
 4002878:	2940038f 	ldh	r5,14(r5)
 400287c:	dfc00115 	stw	ra,4(sp)
 4002880:	4002bbc0 	call	4002bbc <_lseek_r>
 4002884:	00ffffc4 	movi	r3,-1
 4002888:	10c00826 	beq	r2,r3,40028ac <__sseek+0x40>
 400288c:	80c0030b 	ldhu	r3,12(r16)
 4002890:	80801415 	stw	r2,80(r16)
 4002894:	18c40014 	ori	r3,r3,4096
 4002898:	80c0030d 	sth	r3,12(r16)
 400289c:	dfc00117 	ldw	ra,4(sp)
 40028a0:	dc000017 	ldw	r16,0(sp)
 40028a4:	dec00204 	addi	sp,sp,8
 40028a8:	f800283a 	ret
 40028ac:	80c0030b 	ldhu	r3,12(r16)
 40028b0:	18fbffcc 	andi	r3,r3,61439
 40028b4:	80c0030d 	sth	r3,12(r16)
 40028b8:	dfc00117 	ldw	ra,4(sp)
 40028bc:	dc000017 	ldw	r16,0(sp)
 40028c0:	dec00204 	addi	sp,sp,8
 40028c4:	f800283a 	ret

040028c8 <__sclose>:
 40028c8:	2940038f 	ldh	r5,14(r5)
 40028cc:	400293c1 	jmpi	400293c <_close_r>

040028d0 <_write_r>:
 40028d0:	defffd04 	addi	sp,sp,-12
 40028d4:	dc400115 	stw	r17,4(sp)
 40028d8:	dc000015 	stw	r16,0(sp)
 40028dc:	2023883a 	mov	r17,r4
 40028e0:	04010074 	movhi	r16,1025
 40028e4:	84250704 	addi	r16,r16,-27620
 40028e8:	2809883a 	mov	r4,r5
 40028ec:	300b883a 	mov	r5,r6
 40028f0:	380d883a 	mov	r6,r7
 40028f4:	dfc00215 	stw	ra,8(sp)
 40028f8:	80000015 	stw	zero,0(r16)
 40028fc:	40035280 	call	4003528 <write>
 4002900:	00ffffc4 	movi	r3,-1
 4002904:	10c00526 	beq	r2,r3,400291c <_write_r+0x4c>
 4002908:	dfc00217 	ldw	ra,8(sp)
 400290c:	dc400117 	ldw	r17,4(sp)
 4002910:	dc000017 	ldw	r16,0(sp)
 4002914:	dec00304 	addi	sp,sp,12
 4002918:	f800283a 	ret
 400291c:	80c00017 	ldw	r3,0(r16)
 4002920:	183ff926 	beq	r3,zero,4002908 <_write_r+0x38>
 4002924:	88c00015 	stw	r3,0(r17)
 4002928:	dfc00217 	ldw	ra,8(sp)
 400292c:	dc400117 	ldw	r17,4(sp)
 4002930:	dc000017 	ldw	r16,0(sp)
 4002934:	dec00304 	addi	sp,sp,12
 4002938:	f800283a 	ret

0400293c <_close_r>:
 400293c:	defffd04 	addi	sp,sp,-12
 4002940:	dc400115 	stw	r17,4(sp)
 4002944:	dc000015 	stw	r16,0(sp)
 4002948:	2023883a 	mov	r17,r4
 400294c:	04010074 	movhi	r16,1025
 4002950:	84250704 	addi	r16,r16,-27620
 4002954:	2809883a 	mov	r4,r5
 4002958:	dfc00215 	stw	ra,8(sp)
 400295c:	80000015 	stw	zero,0(r16)
 4002960:	4002ce40 	call	4002ce4 <close>
 4002964:	00ffffc4 	movi	r3,-1
 4002968:	10c00526 	beq	r2,r3,4002980 <_close_r+0x44>
 400296c:	dfc00217 	ldw	ra,8(sp)
 4002970:	dc400117 	ldw	r17,4(sp)
 4002974:	dc000017 	ldw	r16,0(sp)
 4002978:	dec00304 	addi	sp,sp,12
 400297c:	f800283a 	ret
 4002980:	80c00017 	ldw	r3,0(r16)
 4002984:	183ff926 	beq	r3,zero,400296c <_close_r+0x30>
 4002988:	88c00015 	stw	r3,0(r17)
 400298c:	dfc00217 	ldw	ra,8(sp)
 4002990:	dc400117 	ldw	r17,4(sp)
 4002994:	dc000017 	ldw	r16,0(sp)
 4002998:	dec00304 	addi	sp,sp,12
 400299c:	f800283a 	ret

040029a0 <_fclose_r>:
 40029a0:	defffc04 	addi	sp,sp,-16
 40029a4:	dc400115 	stw	r17,4(sp)
 40029a8:	dc000015 	stw	r16,0(sp)
 40029ac:	dfc00315 	stw	ra,12(sp)
 40029b0:	dc800215 	stw	r18,8(sp)
 40029b4:	2821883a 	mov	r16,r5
 40029b8:	2023883a 	mov	r17,r4
 40029bc:	28003426 	beq	r5,zero,4002a90 <_fclose_r+0xf0>
 40029c0:	4001f600 	call	4001f60 <__sfp_lock_acquire>
 40029c4:	88000226 	beq	r17,zero,40029d0 <_fclose_r+0x30>
 40029c8:	88800e17 	ldw	r2,56(r17)
 40029cc:	10003826 	beq	r2,zero,4002ab0 <_fclose_r+0x110>
 40029d0:	8080030f 	ldh	r2,12(r16)
 40029d4:	10002526 	beq	r2,zero,4002a6c <_fclose_r+0xcc>
 40029d8:	8809883a 	mov	r4,r17
 40029dc:	800b883a 	mov	r5,r16
 40029e0:	4001ab00 	call	4001ab0 <_fflush_r>
 40029e4:	1025883a 	mov	r18,r2
 40029e8:	80800b17 	ldw	r2,44(r16)
 40029ec:	10000426 	beq	r2,zero,4002a00 <_fclose_r+0x60>
 40029f0:	81400717 	ldw	r5,28(r16)
 40029f4:	8809883a 	mov	r4,r17
 40029f8:	103ee83a 	callr	r2
 40029fc:	10003516 	blt	r2,zero,4002ad4 <_fclose_r+0x134>
 4002a00:	8080030b 	ldhu	r2,12(r16)
 4002a04:	1080200c 	andi	r2,r2,128
 4002a08:	10bfffcc 	andi	r2,r2,65535
 4002a0c:	10a0001c 	xori	r2,r2,32768
 4002a10:	10a00004 	addi	r2,r2,-32768
 4002a14:	10002b1e 	bne	r2,zero,4002ac4 <_fclose_r+0x124>
 4002a18:	81400c17 	ldw	r5,48(r16)
 4002a1c:	28000526 	beq	r5,zero,4002a34 <_fclose_r+0x94>
 4002a20:	80801004 	addi	r2,r16,64
 4002a24:	28800226 	beq	r5,r2,4002a30 <_fclose_r+0x90>
 4002a28:	8809883a 	mov	r4,r17
 4002a2c:	40020dc0 	call	40020dc <_free_r>
 4002a30:	80000c15 	stw	zero,48(r16)
 4002a34:	81401117 	ldw	r5,68(r16)
 4002a38:	28000326 	beq	r5,zero,4002a48 <_fclose_r+0xa8>
 4002a3c:	8809883a 	mov	r4,r17
 4002a40:	40020dc0 	call	40020dc <_free_r>
 4002a44:	80001115 	stw	zero,68(r16)
 4002a48:	8000030d 	sth	zero,12(r16)
 4002a4c:	4001f640 	call	4001f64 <__sfp_lock_release>
 4002a50:	9005883a 	mov	r2,r18
 4002a54:	dfc00317 	ldw	ra,12(sp)
 4002a58:	dc800217 	ldw	r18,8(sp)
 4002a5c:	dc400117 	ldw	r17,4(sp)
 4002a60:	dc000017 	ldw	r16,0(sp)
 4002a64:	dec00404 	addi	sp,sp,16
 4002a68:	f800283a 	ret
 4002a6c:	4001f640 	call	4001f64 <__sfp_lock_release>
 4002a70:	0025883a 	mov	r18,zero
 4002a74:	9005883a 	mov	r2,r18
 4002a78:	dfc00317 	ldw	ra,12(sp)
 4002a7c:	dc800217 	ldw	r18,8(sp)
 4002a80:	dc400117 	ldw	r17,4(sp)
 4002a84:	dc000017 	ldw	r16,0(sp)
 4002a88:	dec00404 	addi	sp,sp,16
 4002a8c:	f800283a 	ret
 4002a90:	0025883a 	mov	r18,zero
 4002a94:	9005883a 	mov	r2,r18
 4002a98:	dfc00317 	ldw	ra,12(sp)
 4002a9c:	dc800217 	ldw	r18,8(sp)
 4002aa0:	dc400117 	ldw	r17,4(sp)
 4002aa4:	dc000017 	ldw	r16,0(sp)
 4002aa8:	dec00404 	addi	sp,sp,16
 4002aac:	f800283a 	ret
 4002ab0:	8809883a 	mov	r4,r17
 4002ab4:	4001d580 	call	4001d58 <__sinit>
 4002ab8:	8080030f 	ldh	r2,12(r16)
 4002abc:	103fc61e 	bne	r2,zero,40029d8 <_fclose_r+0x38>
 4002ac0:	003fea06 	br	4002a6c <_fclose_r+0xcc>
 4002ac4:	81400417 	ldw	r5,16(r16)
 4002ac8:	8809883a 	mov	r4,r17
 4002acc:	40020dc0 	call	40020dc <_free_r>
 4002ad0:	003fd106 	br	4002a18 <_fclose_r+0x78>
 4002ad4:	04bfffc4 	movi	r18,-1
 4002ad8:	003fc906 	br	4002a00 <_fclose_r+0x60>

04002adc <fclose>:
 4002adc:	00810034 	movhi	r2,1024
 4002ae0:	109e3404 	addi	r2,r2,30928
 4002ae4:	200b883a 	mov	r5,r4
 4002ae8:	11000017 	ldw	r4,0(r2)
 4002aec:	40029a01 	jmpi	40029a0 <_fclose_r>

04002af0 <_fstat_r>:
 4002af0:	defffd04 	addi	sp,sp,-12
 4002af4:	dc400115 	stw	r17,4(sp)
 4002af8:	dc000015 	stw	r16,0(sp)
 4002afc:	2023883a 	mov	r17,r4
 4002b00:	04010074 	movhi	r16,1025
 4002b04:	84250704 	addi	r16,r16,-27620
 4002b08:	2809883a 	mov	r4,r5
 4002b0c:	300b883a 	mov	r5,r6
 4002b10:	dfc00215 	stw	ra,8(sp)
 4002b14:	80000015 	stw	zero,0(r16)
 4002b18:	4002e280 	call	4002e28 <fstat>
 4002b1c:	00ffffc4 	movi	r3,-1
 4002b20:	10c00526 	beq	r2,r3,4002b38 <_fstat_r+0x48>
 4002b24:	dfc00217 	ldw	ra,8(sp)
 4002b28:	dc400117 	ldw	r17,4(sp)
 4002b2c:	dc000017 	ldw	r16,0(sp)
 4002b30:	dec00304 	addi	sp,sp,12
 4002b34:	f800283a 	ret
 4002b38:	80c00017 	ldw	r3,0(r16)
 4002b3c:	183ff926 	beq	r3,zero,4002b24 <_fstat_r+0x34>
 4002b40:	88c00015 	stw	r3,0(r17)
 4002b44:	dfc00217 	ldw	ra,8(sp)
 4002b48:	dc400117 	ldw	r17,4(sp)
 4002b4c:	dc000017 	ldw	r16,0(sp)
 4002b50:	dec00304 	addi	sp,sp,12
 4002b54:	f800283a 	ret

04002b58 <_isatty_r>:
 4002b58:	defffd04 	addi	sp,sp,-12
 4002b5c:	dc400115 	stw	r17,4(sp)
 4002b60:	dc000015 	stw	r16,0(sp)
 4002b64:	2023883a 	mov	r17,r4
 4002b68:	04010074 	movhi	r16,1025
 4002b6c:	84250704 	addi	r16,r16,-27620
 4002b70:	2809883a 	mov	r4,r5
 4002b74:	dfc00215 	stw	ra,8(sp)
 4002b78:	80000015 	stw	zero,0(r16)
 4002b7c:	4002f240 	call	4002f24 <isatty>
 4002b80:	00ffffc4 	movi	r3,-1
 4002b84:	10c00526 	beq	r2,r3,4002b9c <_isatty_r+0x44>
 4002b88:	dfc00217 	ldw	ra,8(sp)
 4002b8c:	dc400117 	ldw	r17,4(sp)
 4002b90:	dc000017 	ldw	r16,0(sp)
 4002b94:	dec00304 	addi	sp,sp,12
 4002b98:	f800283a 	ret
 4002b9c:	80c00017 	ldw	r3,0(r16)
 4002ba0:	183ff926 	beq	r3,zero,4002b88 <_isatty_r+0x30>
 4002ba4:	88c00015 	stw	r3,0(r17)
 4002ba8:	dfc00217 	ldw	ra,8(sp)
 4002bac:	dc400117 	ldw	r17,4(sp)
 4002bb0:	dc000017 	ldw	r16,0(sp)
 4002bb4:	dec00304 	addi	sp,sp,12
 4002bb8:	f800283a 	ret

04002bbc <_lseek_r>:
 4002bbc:	defffd04 	addi	sp,sp,-12
 4002bc0:	dc400115 	stw	r17,4(sp)
 4002bc4:	dc000015 	stw	r16,0(sp)
 4002bc8:	2023883a 	mov	r17,r4
 4002bcc:	04010074 	movhi	r16,1025
 4002bd0:	84250704 	addi	r16,r16,-27620
 4002bd4:	2809883a 	mov	r4,r5
 4002bd8:	300b883a 	mov	r5,r6
 4002bdc:	380d883a 	mov	r6,r7
 4002be0:	dfc00215 	stw	ra,8(sp)
 4002be4:	80000015 	stw	zero,0(r16)
 4002be8:	40031000 	call	4003100 <lseek>
 4002bec:	00ffffc4 	movi	r3,-1
 4002bf0:	10c00526 	beq	r2,r3,4002c08 <_lseek_r+0x4c>
 4002bf4:	dfc00217 	ldw	ra,8(sp)
 4002bf8:	dc400117 	ldw	r17,4(sp)
 4002bfc:	dc000017 	ldw	r16,0(sp)
 4002c00:	dec00304 	addi	sp,sp,12
 4002c04:	f800283a 	ret
 4002c08:	80c00017 	ldw	r3,0(r16)
 4002c0c:	183ff926 	beq	r3,zero,4002bf4 <_lseek_r+0x38>
 4002c10:	88c00015 	stw	r3,0(r17)
 4002c14:	dfc00217 	ldw	ra,8(sp)
 4002c18:	dc400117 	ldw	r17,4(sp)
 4002c1c:	dc000017 	ldw	r16,0(sp)
 4002c20:	dec00304 	addi	sp,sp,12
 4002c24:	f800283a 	ret

04002c28 <_read_r>:
 4002c28:	defffd04 	addi	sp,sp,-12
 4002c2c:	dc400115 	stw	r17,4(sp)
 4002c30:	dc000015 	stw	r16,0(sp)
 4002c34:	2023883a 	mov	r17,r4
 4002c38:	04010074 	movhi	r16,1025
 4002c3c:	84250704 	addi	r16,r16,-27620
 4002c40:	2809883a 	mov	r4,r5
 4002c44:	300b883a 	mov	r5,r6
 4002c48:	380d883a 	mov	r6,r7
 4002c4c:	dfc00215 	stw	ra,8(sp)
 4002c50:	80000015 	stw	zero,0(r16)
 4002c54:	40032d80 	call	40032d8 <read>
 4002c58:	00ffffc4 	movi	r3,-1
 4002c5c:	10c00526 	beq	r2,r3,4002c74 <_read_r+0x4c>
 4002c60:	dfc00217 	ldw	ra,8(sp)
 4002c64:	dc400117 	ldw	r17,4(sp)
 4002c68:	dc000017 	ldw	r16,0(sp)
 4002c6c:	dec00304 	addi	sp,sp,12
 4002c70:	f800283a 	ret
 4002c74:	80c00017 	ldw	r3,0(r16)
 4002c78:	183ff926 	beq	r3,zero,4002c60 <_read_r+0x38>
 4002c7c:	88c00015 	stw	r3,0(r17)
 4002c80:	dfc00217 	ldw	ra,8(sp)
 4002c84:	dc400117 	ldw	r17,4(sp)
 4002c88:	dc000017 	ldw	r16,0(sp)
 4002c8c:	dec00304 	addi	sp,sp,12
 4002c90:	f800283a 	ret

04002c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002c94:	defffe04 	addi	sp,sp,-8
 4002c98:	dfc00115 	stw	ra,4(sp)
 4002c9c:	df000015 	stw	fp,0(sp)
 4002ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002ca4:	00810034 	movhi	r2,1024
 4002ca8:	109e3c04 	addi	r2,r2,30960
 4002cac:	10800017 	ldw	r2,0(r2)
 4002cb0:	10000526 	beq	r2,zero,4002cc8 <alt_get_errno+0x34>
 4002cb4:	00810034 	movhi	r2,1024
 4002cb8:	109e3c04 	addi	r2,r2,30960
 4002cbc:	10800017 	ldw	r2,0(r2)
 4002cc0:	103ee83a 	callr	r2
 4002cc4:	00000206 	br	4002cd0 <alt_get_errno+0x3c>
 4002cc8:	00810074 	movhi	r2,1025
 4002ccc:	10a50704 	addi	r2,r2,-27620
}
 4002cd0:	e037883a 	mov	sp,fp
 4002cd4:	dfc00117 	ldw	ra,4(sp)
 4002cd8:	df000017 	ldw	fp,0(sp)
 4002cdc:	dec00204 	addi	sp,sp,8
 4002ce0:	f800283a 	ret

04002ce4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4002ce4:	defffb04 	addi	sp,sp,-20
 4002ce8:	dfc00415 	stw	ra,16(sp)
 4002cec:	df000315 	stw	fp,12(sp)
 4002cf0:	df000304 	addi	fp,sp,12
 4002cf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4002cf8:	e0bfff17 	ldw	r2,-4(fp)
 4002cfc:	10000616 	blt	r2,zero,4002d18 <close+0x34>
 4002d00:	e0bfff17 	ldw	r2,-4(fp)
 4002d04:	10c00324 	muli	r3,r2,12
 4002d08:	00810034 	movhi	r2,1024
 4002d0c:	10998a04 	addi	r2,r2,26152
 4002d10:	1885883a 	add	r2,r3,r2
 4002d14:	00000106 	br	4002d1c <close+0x38>
 4002d18:	0005883a 	mov	r2,zero
 4002d1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4002d20:	e0bffd17 	ldw	r2,-12(fp)
 4002d24:	10001826 	beq	r2,zero,4002d88 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4002d28:	e0bffd17 	ldw	r2,-12(fp)
 4002d2c:	10800017 	ldw	r2,0(r2)
 4002d30:	10800417 	ldw	r2,16(r2)
 4002d34:	10000626 	beq	r2,zero,4002d50 <close+0x6c>
 4002d38:	e0bffd17 	ldw	r2,-12(fp)
 4002d3c:	10800017 	ldw	r2,0(r2)
 4002d40:	10800417 	ldw	r2,16(r2)
 4002d44:	e13ffd17 	ldw	r4,-12(fp)
 4002d48:	103ee83a 	callr	r2
 4002d4c:	00000106 	br	4002d54 <close+0x70>
 4002d50:	0005883a 	mov	r2,zero
 4002d54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4002d58:	e13fff17 	ldw	r4,-4(fp)
 4002d5c:	40033c80 	call	40033c8 <alt_release_fd>
    if (rval < 0)
 4002d60:	e0bffe17 	ldw	r2,-8(fp)
 4002d64:	1000060e 	bge	r2,zero,4002d80 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 4002d68:	4002c940 	call	4002c94 <alt_get_errno>
 4002d6c:	e0fffe17 	ldw	r3,-8(fp)
 4002d70:	00c7c83a 	sub	r3,zero,r3
 4002d74:	10c00015 	stw	r3,0(r2)
      return -1;
 4002d78:	00bfffc4 	movi	r2,-1
 4002d7c:	00000606 	br	4002d98 <close+0xb4>
    }
    return 0;
 4002d80:	0005883a 	mov	r2,zero
 4002d84:	00000406 	br	4002d98 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002d88:	4002c940 	call	4002c94 <alt_get_errno>
 4002d8c:	00c01444 	movi	r3,81
 4002d90:	10c00015 	stw	r3,0(r2)
    return -1;
 4002d94:	00bfffc4 	movi	r2,-1
  }
}
 4002d98:	e037883a 	mov	sp,fp
 4002d9c:	dfc00117 	ldw	ra,4(sp)
 4002da0:	df000017 	ldw	fp,0(sp)
 4002da4:	dec00204 	addi	sp,sp,8
 4002da8:	f800283a 	ret

04002dac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4002dac:	defffc04 	addi	sp,sp,-16
 4002db0:	df000315 	stw	fp,12(sp)
 4002db4:	df000304 	addi	fp,sp,12
 4002db8:	e13ffd15 	stw	r4,-12(fp)
 4002dbc:	e17ffe15 	stw	r5,-8(fp)
 4002dc0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4002dc4:	e0bfff17 	ldw	r2,-4(fp)
}
 4002dc8:	e037883a 	mov	sp,fp
 4002dcc:	df000017 	ldw	fp,0(sp)
 4002dd0:	dec00104 	addi	sp,sp,4
 4002dd4:	f800283a 	ret

04002dd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002dd8:	defffe04 	addi	sp,sp,-8
 4002ddc:	dfc00115 	stw	ra,4(sp)
 4002de0:	df000015 	stw	fp,0(sp)
 4002de4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002de8:	00810034 	movhi	r2,1024
 4002dec:	109e3c04 	addi	r2,r2,30960
 4002df0:	10800017 	ldw	r2,0(r2)
 4002df4:	10000526 	beq	r2,zero,4002e0c <alt_get_errno+0x34>
 4002df8:	00810034 	movhi	r2,1024
 4002dfc:	109e3c04 	addi	r2,r2,30960
 4002e00:	10800017 	ldw	r2,0(r2)
 4002e04:	103ee83a 	callr	r2
 4002e08:	00000206 	br	4002e14 <alt_get_errno+0x3c>
 4002e0c:	00810074 	movhi	r2,1025
 4002e10:	10a50704 	addi	r2,r2,-27620
}
 4002e14:	e037883a 	mov	sp,fp
 4002e18:	dfc00117 	ldw	ra,4(sp)
 4002e1c:	df000017 	ldw	fp,0(sp)
 4002e20:	dec00204 	addi	sp,sp,8
 4002e24:	f800283a 	ret

04002e28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4002e28:	defffb04 	addi	sp,sp,-20
 4002e2c:	dfc00415 	stw	ra,16(sp)
 4002e30:	df000315 	stw	fp,12(sp)
 4002e34:	df000304 	addi	fp,sp,12
 4002e38:	e13ffe15 	stw	r4,-8(fp)
 4002e3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002e40:	e0bffe17 	ldw	r2,-8(fp)
 4002e44:	10000616 	blt	r2,zero,4002e60 <fstat+0x38>
 4002e48:	e0bffe17 	ldw	r2,-8(fp)
 4002e4c:	10c00324 	muli	r3,r2,12
 4002e50:	00810034 	movhi	r2,1024
 4002e54:	10998a04 	addi	r2,r2,26152
 4002e58:	1885883a 	add	r2,r3,r2
 4002e5c:	00000106 	br	4002e64 <fstat+0x3c>
 4002e60:	0005883a 	mov	r2,zero
 4002e64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4002e68:	e0bffd17 	ldw	r2,-12(fp)
 4002e6c:	10001026 	beq	r2,zero,4002eb0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4002e70:	e0bffd17 	ldw	r2,-12(fp)
 4002e74:	10800017 	ldw	r2,0(r2)
 4002e78:	10800817 	ldw	r2,32(r2)
 4002e7c:	10000726 	beq	r2,zero,4002e9c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4002e80:	e0bffd17 	ldw	r2,-12(fp)
 4002e84:	10800017 	ldw	r2,0(r2)
 4002e88:	10800817 	ldw	r2,32(r2)
 4002e8c:	e13ffd17 	ldw	r4,-12(fp)
 4002e90:	e17fff17 	ldw	r5,-4(fp)
 4002e94:	103ee83a 	callr	r2
 4002e98:	00000906 	br	4002ec0 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4002e9c:	e0bfff17 	ldw	r2,-4(fp)
 4002ea0:	00c80004 	movi	r3,8192
 4002ea4:	10c00115 	stw	r3,4(r2)
      return 0;
 4002ea8:	0005883a 	mov	r2,zero
 4002eac:	00000406 	br	4002ec0 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002eb0:	4002dd80 	call	4002dd8 <alt_get_errno>
 4002eb4:	00c01444 	movi	r3,81
 4002eb8:	10c00015 	stw	r3,0(r2)
    return -1;
 4002ebc:	00bfffc4 	movi	r2,-1
  }
}
 4002ec0:	e037883a 	mov	sp,fp
 4002ec4:	dfc00117 	ldw	ra,4(sp)
 4002ec8:	df000017 	ldw	fp,0(sp)
 4002ecc:	dec00204 	addi	sp,sp,8
 4002ed0:	f800283a 	ret

04002ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002ed4:	defffe04 	addi	sp,sp,-8
 4002ed8:	dfc00115 	stw	ra,4(sp)
 4002edc:	df000015 	stw	fp,0(sp)
 4002ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002ee4:	00810034 	movhi	r2,1024
 4002ee8:	109e3c04 	addi	r2,r2,30960
 4002eec:	10800017 	ldw	r2,0(r2)
 4002ef0:	10000526 	beq	r2,zero,4002f08 <alt_get_errno+0x34>
 4002ef4:	00810034 	movhi	r2,1024
 4002ef8:	109e3c04 	addi	r2,r2,30960
 4002efc:	10800017 	ldw	r2,0(r2)
 4002f00:	103ee83a 	callr	r2
 4002f04:	00000206 	br	4002f10 <alt_get_errno+0x3c>
 4002f08:	00810074 	movhi	r2,1025
 4002f0c:	10a50704 	addi	r2,r2,-27620
}
 4002f10:	e037883a 	mov	sp,fp
 4002f14:	dfc00117 	ldw	ra,4(sp)
 4002f18:	df000017 	ldw	fp,0(sp)
 4002f1c:	dec00204 	addi	sp,sp,8
 4002f20:	f800283a 	ret

04002f24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4002f24:	deffed04 	addi	sp,sp,-76
 4002f28:	dfc01215 	stw	ra,72(sp)
 4002f2c:	df001115 	stw	fp,68(sp)
 4002f30:	df001104 	addi	fp,sp,68
 4002f34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4002f38:	e0bfff17 	ldw	r2,-4(fp)
 4002f3c:	10000616 	blt	r2,zero,4002f58 <isatty+0x34>
 4002f40:	e0bfff17 	ldw	r2,-4(fp)
 4002f44:	10c00324 	muli	r3,r2,12
 4002f48:	00810034 	movhi	r2,1024
 4002f4c:	10998a04 	addi	r2,r2,26152
 4002f50:	1885883a 	add	r2,r3,r2
 4002f54:	00000106 	br	4002f5c <isatty+0x38>
 4002f58:	0005883a 	mov	r2,zero
 4002f5c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4002f60:	e0bfef17 	ldw	r2,-68(fp)
 4002f64:	10000e26 	beq	r2,zero,4002fa0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4002f68:	e0bfef17 	ldw	r2,-68(fp)
 4002f6c:	10800017 	ldw	r2,0(r2)
 4002f70:	10800817 	ldw	r2,32(r2)
 4002f74:	1000021e 	bne	r2,zero,4002f80 <isatty+0x5c>
    {
      return 1;
 4002f78:	00800044 	movi	r2,1
 4002f7c:	00000c06 	br	4002fb0 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4002f80:	e0bff004 	addi	r2,fp,-64
 4002f84:	e13fff17 	ldw	r4,-4(fp)
 4002f88:	100b883a 	mov	r5,r2
 4002f8c:	4002e280 	call	4002e28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4002f90:	e0bff117 	ldw	r2,-60(fp)
 4002f94:	10880020 	cmpeqi	r2,r2,8192
 4002f98:	10803fcc 	andi	r2,r2,255
 4002f9c:	00000406 	br	4002fb0 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002fa0:	4002ed40 	call	4002ed4 <alt_get_errno>
 4002fa4:	00c01444 	movi	r3,81
 4002fa8:	10c00015 	stw	r3,0(r2)
    return 0;
 4002fac:	0005883a 	mov	r2,zero
  }
}
 4002fb0:	e037883a 	mov	sp,fp
 4002fb4:	dfc00117 	ldw	ra,4(sp)
 4002fb8:	df000017 	ldw	fp,0(sp)
 4002fbc:	dec00204 	addi	sp,sp,8
 4002fc0:	f800283a 	ret

04002fc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4002fc4:	defffc04 	addi	sp,sp,-16
 4002fc8:	df000315 	stw	fp,12(sp)
 4002fcc:	df000304 	addi	fp,sp,12
 4002fd0:	e13ffd15 	stw	r4,-12(fp)
 4002fd4:	e17ffe15 	stw	r5,-8(fp)
 4002fd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4002fdc:	e0fffe17 	ldw	r3,-8(fp)
 4002fe0:	e0bffd17 	ldw	r2,-12(fp)
 4002fe4:	18800e26 	beq	r3,r2,4003020 <alt_load_section+0x5c>
  {
    while( to != end )
 4002fe8:	00000a06 	br	4003014 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4002fec:	e0bffd17 	ldw	r2,-12(fp)
 4002ff0:	10c00017 	ldw	r3,0(r2)
 4002ff4:	e0bffe17 	ldw	r2,-8(fp)
 4002ff8:	10c00015 	stw	r3,0(r2)
 4002ffc:	e0bffe17 	ldw	r2,-8(fp)
 4003000:	10800104 	addi	r2,r2,4
 4003004:	e0bffe15 	stw	r2,-8(fp)
 4003008:	e0bffd17 	ldw	r2,-12(fp)
 400300c:	10800104 	addi	r2,r2,4
 4003010:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4003014:	e0fffe17 	ldw	r3,-8(fp)
 4003018:	e0bfff17 	ldw	r2,-4(fp)
 400301c:	18bff31e 	bne	r3,r2,4002fec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4003020:	e037883a 	mov	sp,fp
 4003024:	df000017 	ldw	fp,0(sp)
 4003028:	dec00104 	addi	sp,sp,4
 400302c:	f800283a 	ret

04003030 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4003030:	defffe04 	addi	sp,sp,-8
 4003034:	dfc00115 	stw	ra,4(sp)
 4003038:	df000015 	stw	fp,0(sp)
 400303c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4003040:	01010034 	movhi	r4,1024
 4003044:	211e4104 	addi	r4,r4,30980
 4003048:	01410034 	movhi	r5,1024
 400304c:	29577e04 	addi	r5,r5,24056
 4003050:	01810034 	movhi	r6,1024
 4003054:	319e4104 	addi	r6,r6,30980
 4003058:	4002fc40 	call	4002fc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400305c:	01010034 	movhi	r4,1024
 4003060:	21000804 	addi	r4,r4,32
 4003064:	01410034 	movhi	r5,1024
 4003068:	29400804 	addi	r5,r5,32
 400306c:	01810034 	movhi	r6,1024
 4003070:	31806e04 	addi	r6,r6,440
 4003074:	4002fc40 	call	4002fc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4003078:	01010034 	movhi	r4,1024
 400307c:	21176904 	addi	r4,r4,23972
 4003080:	01410034 	movhi	r5,1024
 4003084:	29576904 	addi	r5,r5,23972
 4003088:	01810034 	movhi	r6,1024
 400308c:	31977e04 	addi	r6,r6,24056
 4003090:	4002fc40 	call	4002fc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4003094:	4004ca40 	call	4004ca4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003098:	4004e900 	call	4004e90 <alt_icache_flush_all>
}
 400309c:	e037883a 	mov	sp,fp
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	df000017 	ldw	fp,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret

040030b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40030b0:	defffe04 	addi	sp,sp,-8
 40030b4:	dfc00115 	stw	ra,4(sp)
 40030b8:	df000015 	stw	fp,0(sp)
 40030bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40030c0:	00810034 	movhi	r2,1024
 40030c4:	109e3c04 	addi	r2,r2,30960
 40030c8:	10800017 	ldw	r2,0(r2)
 40030cc:	10000526 	beq	r2,zero,40030e4 <alt_get_errno+0x34>
 40030d0:	00810034 	movhi	r2,1024
 40030d4:	109e3c04 	addi	r2,r2,30960
 40030d8:	10800017 	ldw	r2,0(r2)
 40030dc:	103ee83a 	callr	r2
 40030e0:	00000206 	br	40030ec <alt_get_errno+0x3c>
 40030e4:	00810074 	movhi	r2,1025
 40030e8:	10a50704 	addi	r2,r2,-27620
}
 40030ec:	e037883a 	mov	sp,fp
 40030f0:	dfc00117 	ldw	ra,4(sp)
 40030f4:	df000017 	ldw	fp,0(sp)
 40030f8:	dec00204 	addi	sp,sp,8
 40030fc:	f800283a 	ret

04003100 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4003100:	defff904 	addi	sp,sp,-28
 4003104:	dfc00615 	stw	ra,24(sp)
 4003108:	df000515 	stw	fp,20(sp)
 400310c:	df000504 	addi	fp,sp,20
 4003110:	e13ffd15 	stw	r4,-12(fp)
 4003114:	e17ffe15 	stw	r5,-8(fp)
 4003118:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400311c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003120:	e0bffd17 	ldw	r2,-12(fp)
 4003124:	10000616 	blt	r2,zero,4003140 <lseek+0x40>
 4003128:	e0bffd17 	ldw	r2,-12(fp)
 400312c:	10c00324 	muli	r3,r2,12
 4003130:	00810034 	movhi	r2,1024
 4003134:	10998a04 	addi	r2,r2,26152
 4003138:	1885883a 	add	r2,r3,r2
 400313c:	00000106 	br	4003144 <lseek+0x44>
 4003140:	0005883a 	mov	r2,zero
 4003144:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4003148:	e0bffc17 	ldw	r2,-16(fp)
 400314c:	10001026 	beq	r2,zero,4003190 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4003150:	e0bffc17 	ldw	r2,-16(fp)
 4003154:	10800017 	ldw	r2,0(r2)
 4003158:	10800717 	ldw	r2,28(r2)
 400315c:	10000926 	beq	r2,zero,4003184 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003160:	e0bffc17 	ldw	r2,-16(fp)
 4003164:	10800017 	ldw	r2,0(r2)
 4003168:	10800717 	ldw	r2,28(r2)
 400316c:	e13ffc17 	ldw	r4,-16(fp)
 4003170:	e17ffe17 	ldw	r5,-8(fp)
 4003174:	e1bfff17 	ldw	r6,-4(fp)
 4003178:	103ee83a 	callr	r2
 400317c:	e0bffb15 	stw	r2,-20(fp)
 4003180:	00000506 	br	4003198 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4003184:	00bfde84 	movi	r2,-134
 4003188:	e0bffb15 	stw	r2,-20(fp)
 400318c:	00000206 	br	4003198 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003190:	00bfebc4 	movi	r2,-81
 4003194:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4003198:	e0bffb17 	ldw	r2,-20(fp)
 400319c:	1000060e 	bge	r2,zero,40031b8 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 40031a0:	40030b00 	call	40030b0 <alt_get_errno>
 40031a4:	e0fffb17 	ldw	r3,-20(fp)
 40031a8:	00c7c83a 	sub	r3,zero,r3
 40031ac:	10c00015 	stw	r3,0(r2)
    rc = -1;
 40031b0:	00bfffc4 	movi	r2,-1
 40031b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40031b8:	e0bffb17 	ldw	r2,-20(fp)
}
 40031bc:	e037883a 	mov	sp,fp
 40031c0:	dfc00117 	ldw	ra,4(sp)
 40031c4:	df000017 	ldw	fp,0(sp)
 40031c8:	dec00204 	addi	sp,sp,8
 40031cc:	f800283a 	ret

040031d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40031d0:	defffd04 	addi	sp,sp,-12
 40031d4:	dfc00215 	stw	ra,8(sp)
 40031d8:	df000115 	stw	fp,4(sp)
 40031dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40031e0:	0009883a 	mov	r4,zero
 40031e4:	400364c0 	call	400364c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40031e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40031ec:	40036800 	call	4003680 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40031f0:	01010034 	movhi	r4,1024
 40031f4:	21177304 	addi	r4,r4,24012
 40031f8:	01410034 	movhi	r5,1024
 40031fc:	29577304 	addi	r5,r5,24012
 4003200:	01810034 	movhi	r6,1024
 4003204:	31977304 	addi	r6,r6,24012
 4003208:	40052480 	call	4005248 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400320c:	4004dd80 	call	4004dd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003210:	01010034 	movhi	r4,1024
 4003214:	21138d04 	addi	r4,r4,20020
 4003218:	40059d00 	call	40059d0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400321c:	d126d517 	ldw	r4,-25772(gp)
 4003220:	d0e6d617 	ldw	r3,-25768(gp)
 4003224:	d0a6d717 	ldw	r2,-25764(gp)
 4003228:	180b883a 	mov	r5,r3
 400322c:	100d883a 	mov	r6,r2
 4003230:	40002040 	call	4000204 <main>
 4003234:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4003238:	01000044 	movi	r4,1
 400323c:	4002ce40 	call	4002ce4 <close>
  exit (result);
 4003240:	e13fff17 	ldw	r4,-4(fp)
 4003244:	40059e40 	call	40059e4 <exit>

04003248 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4003248:	defffe04 	addi	sp,sp,-8
 400324c:	df000115 	stw	fp,4(sp)
 4003250:	df000104 	addi	fp,sp,4
 4003254:	e13fff15 	stw	r4,-4(fp)
}
 4003258:	e037883a 	mov	sp,fp
 400325c:	df000017 	ldw	fp,0(sp)
 4003260:	dec00104 	addi	sp,sp,4
 4003264:	f800283a 	ret

04003268 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003268:	defffe04 	addi	sp,sp,-8
 400326c:	df000115 	stw	fp,4(sp)
 4003270:	df000104 	addi	fp,sp,4
 4003274:	e13fff15 	stw	r4,-4(fp)
}
 4003278:	e037883a 	mov	sp,fp
 400327c:	df000017 	ldw	fp,0(sp)
 4003280:	dec00104 	addi	sp,sp,4
 4003284:	f800283a 	ret

04003288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003288:	defffe04 	addi	sp,sp,-8
 400328c:	dfc00115 	stw	ra,4(sp)
 4003290:	df000015 	stw	fp,0(sp)
 4003294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003298:	00810034 	movhi	r2,1024
 400329c:	109e3c04 	addi	r2,r2,30960
 40032a0:	10800017 	ldw	r2,0(r2)
 40032a4:	10000526 	beq	r2,zero,40032bc <alt_get_errno+0x34>
 40032a8:	00810034 	movhi	r2,1024
 40032ac:	109e3c04 	addi	r2,r2,30960
 40032b0:	10800017 	ldw	r2,0(r2)
 40032b4:	103ee83a 	callr	r2
 40032b8:	00000206 	br	40032c4 <alt_get_errno+0x3c>
 40032bc:	00810074 	movhi	r2,1025
 40032c0:	10a50704 	addi	r2,r2,-27620
}
 40032c4:	e037883a 	mov	sp,fp
 40032c8:	dfc00117 	ldw	ra,4(sp)
 40032cc:	df000017 	ldw	fp,0(sp)
 40032d0:	dec00204 	addi	sp,sp,8
 40032d4:	f800283a 	ret

040032d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40032d8:	defff904 	addi	sp,sp,-28
 40032dc:	dfc00615 	stw	ra,24(sp)
 40032e0:	df000515 	stw	fp,20(sp)
 40032e4:	df000504 	addi	fp,sp,20
 40032e8:	e13ffd15 	stw	r4,-12(fp)
 40032ec:	e17ffe15 	stw	r5,-8(fp)
 40032f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40032f4:	e0bffd17 	ldw	r2,-12(fp)
 40032f8:	10000616 	blt	r2,zero,4003314 <read+0x3c>
 40032fc:	e0bffd17 	ldw	r2,-12(fp)
 4003300:	10c00324 	muli	r3,r2,12
 4003304:	00810034 	movhi	r2,1024
 4003308:	10998a04 	addi	r2,r2,26152
 400330c:	1885883a 	add	r2,r3,r2
 4003310:	00000106 	br	4003318 <read+0x40>
 4003314:	0005883a 	mov	r2,zero
 4003318:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400331c:	e0bffb17 	ldw	r2,-20(fp)
 4003320:	10002026 	beq	r2,zero,40033a4 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003324:	e0bffb17 	ldw	r2,-20(fp)
 4003328:	10800217 	ldw	r2,8(r2)
 400332c:	108000cc 	andi	r2,r2,3
 4003330:	10800060 	cmpeqi	r2,r2,1
 4003334:	1000171e 	bne	r2,zero,4003394 <read+0xbc>
        (fd->dev->read))
 4003338:	e0bffb17 	ldw	r2,-20(fp)
 400333c:	10800017 	ldw	r2,0(r2)
 4003340:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4003344:	10001326 	beq	r2,zero,4003394 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003348:	e0bffb17 	ldw	r2,-20(fp)
 400334c:	10800017 	ldw	r2,0(r2)
 4003350:	10c00517 	ldw	r3,20(r2)
 4003354:	e0bfff17 	ldw	r2,-4(fp)
 4003358:	e13ffb17 	ldw	r4,-20(fp)
 400335c:	e17ffe17 	ldw	r5,-8(fp)
 4003360:	100d883a 	mov	r6,r2
 4003364:	183ee83a 	callr	r3
 4003368:	e0bffc15 	stw	r2,-16(fp)
 400336c:	e0bffc17 	ldw	r2,-16(fp)
 4003370:	1000060e 	bge	r2,zero,400338c <read+0xb4>
        {
          ALT_ERRNO = -rval;
 4003374:	40032880 	call	4003288 <alt_get_errno>
 4003378:	e0fffc17 	ldw	r3,-16(fp)
 400337c:	00c7c83a 	sub	r3,zero,r3
 4003380:	10c00015 	stw	r3,0(r2)
          return -1;
 4003384:	00bfffc4 	movi	r2,-1
 4003388:	00000a06 	br	40033b4 <read+0xdc>
        }
        return rval;
 400338c:	e0bffc17 	ldw	r2,-16(fp)
 4003390:	00000806 	br	40033b4 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4003394:	40032880 	call	4003288 <alt_get_errno>
 4003398:	00c00344 	movi	r3,13
 400339c:	10c00015 	stw	r3,0(r2)
 40033a0:	00000306 	br	40033b0 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40033a4:	40032880 	call	4003288 <alt_get_errno>
 40033a8:	00c01444 	movi	r3,81
 40033ac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 40033b0:	00bfffc4 	movi	r2,-1
}
 40033b4:	e037883a 	mov	sp,fp
 40033b8:	dfc00117 	ldw	ra,4(sp)
 40033bc:	df000017 	ldw	fp,0(sp)
 40033c0:	dec00204 	addi	sp,sp,8
 40033c4:	f800283a 	ret

040033c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40033c8:	defffe04 	addi	sp,sp,-8
 40033cc:	df000115 	stw	fp,4(sp)
 40033d0:	df000104 	addi	fp,sp,4
 40033d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40033d8:	e0bfff17 	ldw	r2,-4(fp)
 40033dc:	108000d0 	cmplti	r2,r2,3
 40033e0:	10000d1e 	bne	r2,zero,4003418 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40033e4:	00c10034 	movhi	r3,1024
 40033e8:	18d98a04 	addi	r3,r3,26152
 40033ec:	e0bfff17 	ldw	r2,-4(fp)
 40033f0:	10800324 	muli	r2,r2,12
 40033f4:	1885883a 	add	r2,r3,r2
 40033f8:	10800204 	addi	r2,r2,8
 40033fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4003400:	00c10034 	movhi	r3,1024
 4003404:	18d98a04 	addi	r3,r3,26152
 4003408:	e0bfff17 	ldw	r2,-4(fp)
 400340c:	10800324 	muli	r2,r2,12
 4003410:	1885883a 	add	r2,r3,r2
 4003414:	10000015 	stw	zero,0(r2)
  }
}
 4003418:	e037883a 	mov	sp,fp
 400341c:	df000017 	ldw	fp,0(sp)
 4003420:	dec00104 	addi	sp,sp,4
 4003424:	f800283a 	ret

04003428 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4003428:	defff904 	addi	sp,sp,-28
 400342c:	df000615 	stw	fp,24(sp)
 4003430:	df000604 	addi	fp,sp,24
 4003434:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003438:	0005303a 	rdctl	r2,status
 400343c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003440:	e0fffc17 	ldw	r3,-16(fp)
 4003444:	00bfff84 	movi	r2,-2
 4003448:	1884703a 	and	r2,r3,r2
 400344c:	1001703a 	wrctl	status,r2
  
  return context;
 4003450:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4003454:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4003458:	d0a00a17 	ldw	r2,-32728(gp)
 400345c:	10c000c4 	addi	r3,r2,3
 4003460:	00bfff04 	movi	r2,-4
 4003464:	1884703a 	and	r2,r3,r2
 4003468:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400346c:	d0e00a17 	ldw	r3,-32728(gp)
 4003470:	e0bfff17 	ldw	r2,-4(fp)
 4003474:	1885883a 	add	r2,r3,r2
 4003478:	00c20034 	movhi	r3,2048
 400347c:	18c00004 	addi	r3,r3,0
 4003480:	1880062e 	bgeu	r3,r2,400349c <sbrk+0x74>
 4003484:	e0bffa17 	ldw	r2,-24(fp)
 4003488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400348c:	e0bffd17 	ldw	r2,-12(fp)
 4003490:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003494:	00bfffc4 	movi	r2,-1
 4003498:	00000b06 	br	40034c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400349c:	d0a00a17 	ldw	r2,-32728(gp)
 40034a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 40034a4:	d0e00a17 	ldw	r3,-32728(gp)
 40034a8:	e0bfff17 	ldw	r2,-4(fp)
 40034ac:	1885883a 	add	r2,r3,r2
 40034b0:	d0a00a15 	stw	r2,-32728(gp)
 40034b4:	e0bffa17 	ldw	r2,-24(fp)
 40034b8:	e0bffe15 	stw	r2,-8(fp)
 40034bc:	e0bffe17 	ldw	r2,-8(fp)
 40034c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40034c4:	e0bffb17 	ldw	r2,-20(fp)
} 
 40034c8:	e037883a 	mov	sp,fp
 40034cc:	df000017 	ldw	fp,0(sp)
 40034d0:	dec00104 	addi	sp,sp,4
 40034d4:	f800283a 	ret

040034d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40034d8:	defffe04 	addi	sp,sp,-8
 40034dc:	dfc00115 	stw	ra,4(sp)
 40034e0:	df000015 	stw	fp,0(sp)
 40034e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40034e8:	00810034 	movhi	r2,1024
 40034ec:	109e3c04 	addi	r2,r2,30960
 40034f0:	10800017 	ldw	r2,0(r2)
 40034f4:	10000526 	beq	r2,zero,400350c <alt_get_errno+0x34>
 40034f8:	00810034 	movhi	r2,1024
 40034fc:	109e3c04 	addi	r2,r2,30960
 4003500:	10800017 	ldw	r2,0(r2)
 4003504:	103ee83a 	callr	r2
 4003508:	00000206 	br	4003514 <alt_get_errno+0x3c>
 400350c:	00810074 	movhi	r2,1025
 4003510:	10a50704 	addi	r2,r2,-27620
}
 4003514:	e037883a 	mov	sp,fp
 4003518:	dfc00117 	ldw	ra,4(sp)
 400351c:	df000017 	ldw	fp,0(sp)
 4003520:	dec00204 	addi	sp,sp,8
 4003524:	f800283a 	ret

04003528 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4003528:	defff904 	addi	sp,sp,-28
 400352c:	dfc00615 	stw	ra,24(sp)
 4003530:	df000515 	stw	fp,20(sp)
 4003534:	df000504 	addi	fp,sp,20
 4003538:	e13ffd15 	stw	r4,-12(fp)
 400353c:	e17ffe15 	stw	r5,-8(fp)
 4003540:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003544:	e0bffd17 	ldw	r2,-12(fp)
 4003548:	10000616 	blt	r2,zero,4003564 <write+0x3c>
 400354c:	e0bffd17 	ldw	r2,-12(fp)
 4003550:	10c00324 	muli	r3,r2,12
 4003554:	00810034 	movhi	r2,1024
 4003558:	10998a04 	addi	r2,r2,26152
 400355c:	1885883a 	add	r2,r3,r2
 4003560:	00000106 	br	4003568 <write+0x40>
 4003564:	0005883a 	mov	r2,zero
 4003568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400356c:	e0bffb17 	ldw	r2,-20(fp)
 4003570:	10001f26 	beq	r2,zero,40035f0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4003574:	e0bffb17 	ldw	r2,-20(fp)
 4003578:	10800217 	ldw	r2,8(r2)
 400357c:	108000cc 	andi	r2,r2,3
 4003580:	10001726 	beq	r2,zero,40035e0 <write+0xb8>
 4003584:	e0bffb17 	ldw	r2,-20(fp)
 4003588:	10800017 	ldw	r2,0(r2)
 400358c:	10800617 	ldw	r2,24(r2)
 4003590:	10001326 	beq	r2,zero,40035e0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003594:	e0bffb17 	ldw	r2,-20(fp)
 4003598:	10800017 	ldw	r2,0(r2)
 400359c:	10c00617 	ldw	r3,24(r2)
 40035a0:	e0bfff17 	ldw	r2,-4(fp)
 40035a4:	e13ffb17 	ldw	r4,-20(fp)
 40035a8:	e17ffe17 	ldw	r5,-8(fp)
 40035ac:	100d883a 	mov	r6,r2
 40035b0:	183ee83a 	callr	r3
 40035b4:	e0bffc15 	stw	r2,-16(fp)
 40035b8:	e0bffc17 	ldw	r2,-16(fp)
 40035bc:	1000060e 	bge	r2,zero,40035d8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 40035c0:	40034d80 	call	40034d8 <alt_get_errno>
 40035c4:	e0fffc17 	ldw	r3,-16(fp)
 40035c8:	00c7c83a 	sub	r3,zero,r3
 40035cc:	10c00015 	stw	r3,0(r2)
        return -1;
 40035d0:	00bfffc4 	movi	r2,-1
 40035d4:	00000a06 	br	4003600 <write+0xd8>
      }
      return rval;
 40035d8:	e0bffc17 	ldw	r2,-16(fp)
 40035dc:	00000806 	br	4003600 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40035e0:	40034d80 	call	40034d8 <alt_get_errno>
 40035e4:	00c00344 	movi	r3,13
 40035e8:	10c00015 	stw	r3,0(r2)
 40035ec:	00000306 	br	40035fc <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40035f0:	40034d80 	call	40034d8 <alt_get_errno>
 40035f4:	00c01444 	movi	r3,81
 40035f8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 40035fc:	00bfffc4 	movi	r2,-1
}
 4003600:	e037883a 	mov	sp,fp
 4003604:	dfc00117 	ldw	ra,4(sp)
 4003608:	df000017 	ldw	fp,0(sp)
 400360c:	dec00204 	addi	sp,sp,8
 4003610:	f800283a 	ret

04003614 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003614:	defffd04 	addi	sp,sp,-12
 4003618:	dfc00215 	stw	ra,8(sp)
 400361c:	df000115 	stw	fp,4(sp)
 4003620:	df000104 	addi	fp,sp,4
 4003624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4003628:	e13fff17 	ldw	r4,-4(fp)
 400362c:	01410034 	movhi	r5,1024
 4003630:	295e3904 	addi	r5,r5,30948
 4003634:	4004d380 	call	4004d38 <alt_dev_llist_insert>
}
 4003638:	e037883a 	mov	sp,fp
 400363c:	dfc00117 	ldw	ra,4(sp)
 4003640:	df000017 	ldw	fp,0(sp)
 4003644:	dec00204 	addi	sp,sp,8
 4003648:	f800283a 	ret

0400364c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400364c:	defffd04 	addi	sp,sp,-12
 4003650:	dfc00215 	stw	ra,8(sp)
 4003654:	df000115 	stw	fp,4(sp)
 4003658:	df000104 	addi	fp,sp,4
 400365c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4003660:	40056cc0 	call	40056cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003664:	00800044 	movi	r2,1
 4003668:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400366c:	e037883a 	mov	sp,fp
 4003670:	dfc00117 	ldw	ra,4(sp)
 4003674:	df000017 	ldw	fp,0(sp)
 4003678:	dec00204 	addi	sp,sp,8
 400367c:	f800283a 	ret

04003680 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003680:	defffe04 	addi	sp,sp,-8
 4003684:	dfc00115 	stw	ra,4(sp)
 4003688:	df000015 	stw	fp,0(sp)
 400368c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_10MS, timer_10ms);
 4003690:	01020034 	movhi	r4,2048
 4003694:	21041004 	addi	r4,r4,4160
 4003698:	000b883a 	mov	r5,zero
 400369c:	000d883a 	mov	r6,zero
 40036a0:	01c01904 	movi	r7,100
 40036a4:	40041d80 	call	40041d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40036a8:	01010034 	movhi	r4,1024
 40036ac:	2119f404 	addi	r4,r4,26576
 40036b0:	000b883a 	mov	r5,zero
 40036b4:	01800044 	movi	r6,1
 40036b8:	40038640 	call	4003864 <altera_avalon_jtag_uart_init>
 40036bc:	01010034 	movhi	r4,1024
 40036c0:	2119ea04 	addi	r4,r4,26536
 40036c4:	40036140 	call	4003614 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
 40036c8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 40036cc:	01010034 	movhi	r4,1024
 40036d0:	211e0c04 	addi	r4,r4,30768
 40036d4:	000b883a 	mov	r5,zero
 40036d8:	01800084 	movi	r6,2
 40036dc:	40043700 	call	4004370 <altera_avalon_uart_init>
 40036e0:	01010034 	movhi	r4,1024
 40036e4:	211e0204 	addi	r4,r4,30728
 40036e8:	40036140 	call	4003614 <alt_dev_reg>
}
 40036ec:	e037883a 	mov	sp,fp
 40036f0:	dfc00117 	ldw	ra,4(sp)
 40036f4:	df000017 	ldw	fp,0(sp)
 40036f8:	dec00204 	addi	sp,sp,8
 40036fc:	f800283a 	ret

04003700 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4003700:	defffa04 	addi	sp,sp,-24
 4003704:	dfc00515 	stw	ra,20(sp)
 4003708:	df000415 	stw	fp,16(sp)
 400370c:	df000404 	addi	fp,sp,16
 4003710:	e13ffd15 	stw	r4,-12(fp)
 4003714:	e17ffe15 	stw	r5,-8(fp)
 4003718:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400371c:	e0bffd17 	ldw	r2,-12(fp)
 4003720:	10800017 	ldw	r2,0(r2)
 4003724:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4003728:	e0bffc17 	ldw	r2,-16(fp)
 400372c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4003730:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4003734:	10800217 	ldw	r2,8(r2)
 4003738:	1809883a 	mov	r4,r3
 400373c:	e17ffe17 	ldw	r5,-8(fp)
 4003740:	e1bfff17 	ldw	r6,-4(fp)
 4003744:	100f883a 	mov	r7,r2
 4003748:	4003d280 	call	4003d28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400374c:	e037883a 	mov	sp,fp
 4003750:	dfc00117 	ldw	ra,4(sp)
 4003754:	df000017 	ldw	fp,0(sp)
 4003758:	dec00204 	addi	sp,sp,8
 400375c:	f800283a 	ret

04003760 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4003760:	defffa04 	addi	sp,sp,-24
 4003764:	dfc00515 	stw	ra,20(sp)
 4003768:	df000415 	stw	fp,16(sp)
 400376c:	df000404 	addi	fp,sp,16
 4003770:	e13ffd15 	stw	r4,-12(fp)
 4003774:	e17ffe15 	stw	r5,-8(fp)
 4003778:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400377c:	e0bffd17 	ldw	r2,-12(fp)
 4003780:	10800017 	ldw	r2,0(r2)
 4003784:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4003788:	e0bffc17 	ldw	r2,-16(fp)
 400378c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4003790:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4003794:	10800217 	ldw	r2,8(r2)
 4003798:	1809883a 	mov	r4,r3
 400379c:	e17ffe17 	ldw	r5,-8(fp)
 40037a0:	e1bfff17 	ldw	r6,-4(fp)
 40037a4:	100f883a 	mov	r7,r2
 40037a8:	4003f400 	call	4003f40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40037ac:	e037883a 	mov	sp,fp
 40037b0:	dfc00117 	ldw	ra,4(sp)
 40037b4:	df000017 	ldw	fp,0(sp)
 40037b8:	dec00204 	addi	sp,sp,8
 40037bc:	f800283a 	ret

040037c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40037c0:	defffc04 	addi	sp,sp,-16
 40037c4:	dfc00315 	stw	ra,12(sp)
 40037c8:	df000215 	stw	fp,8(sp)
 40037cc:	df000204 	addi	fp,sp,8
 40037d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40037d4:	e0bfff17 	ldw	r2,-4(fp)
 40037d8:	10800017 	ldw	r2,0(r2)
 40037dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40037e0:	e0bffe17 	ldw	r2,-8(fp)
 40037e4:	10c00a04 	addi	r3,r2,40
 40037e8:	e0bfff17 	ldw	r2,-4(fp)
 40037ec:	10800217 	ldw	r2,8(r2)
 40037f0:	1809883a 	mov	r4,r3
 40037f4:	100b883a 	mov	r5,r2
 40037f8:	4003bcc0 	call	4003bcc <altera_avalon_jtag_uart_close>
}
 40037fc:	e037883a 	mov	sp,fp
 4003800:	dfc00117 	ldw	ra,4(sp)
 4003804:	df000017 	ldw	fp,0(sp)
 4003808:	dec00204 	addi	sp,sp,8
 400380c:	f800283a 	ret

04003810 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4003810:	defffa04 	addi	sp,sp,-24
 4003814:	dfc00515 	stw	ra,20(sp)
 4003818:	df000415 	stw	fp,16(sp)
 400381c:	df000404 	addi	fp,sp,16
 4003820:	e13ffd15 	stw	r4,-12(fp)
 4003824:	e17ffe15 	stw	r5,-8(fp)
 4003828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400382c:	e0bffd17 	ldw	r2,-12(fp)
 4003830:	10800017 	ldw	r2,0(r2)
 4003834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4003838:	e0bffc17 	ldw	r2,-16(fp)
 400383c:	10800a04 	addi	r2,r2,40
 4003840:	1009883a 	mov	r4,r2
 4003844:	e17ffe17 	ldw	r5,-8(fp)
 4003848:	e1bfff17 	ldw	r6,-4(fp)
 400384c:	4003c340 	call	4003c34 <altera_avalon_jtag_uart_ioctl>
}
 4003850:	e037883a 	mov	sp,fp
 4003854:	dfc00117 	ldw	ra,4(sp)
 4003858:	df000017 	ldw	fp,0(sp)
 400385c:	dec00204 	addi	sp,sp,8
 4003860:	f800283a 	ret

04003864 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4003864:	defffa04 	addi	sp,sp,-24
 4003868:	dfc00515 	stw	ra,20(sp)
 400386c:	df000415 	stw	fp,16(sp)
 4003870:	df000404 	addi	fp,sp,16
 4003874:	e13ffd15 	stw	r4,-12(fp)
 4003878:	e17ffe15 	stw	r5,-8(fp)
 400387c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003880:	e0bffd17 	ldw	r2,-12(fp)
 4003884:	00c00044 	movi	r3,1
 4003888:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400388c:	e0bffd17 	ldw	r2,-12(fp)
 4003890:	10800017 	ldw	r2,0(r2)
 4003894:	10800104 	addi	r2,r2,4
 4003898:	e0fffd17 	ldw	r3,-12(fp)
 400389c:	18c00817 	ldw	r3,32(r3)
 40038a0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40038a4:	e0fffe17 	ldw	r3,-8(fp)
 40038a8:	e0bfff17 	ldw	r2,-4(fp)
 40038ac:	d8000015 	stw	zero,0(sp)
 40038b0:	1809883a 	mov	r4,r3
 40038b4:	100b883a 	mov	r5,r2
 40038b8:	01810034 	movhi	r6,1024
 40038bc:	318e4904 	addi	r6,r6,14628
 40038c0:	e1fffd17 	ldw	r7,-12(fp)
 40038c4:	4004ec00 	call	4004ec0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40038c8:	e0bffd17 	ldw	r2,-12(fp)
 40038cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40038d0:	e0bffd17 	ldw	r2,-12(fp)
 40038d4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40038d8:	00810074 	movhi	r2,1025
 40038dc:	10a50c04 	addi	r2,r2,-27600
 40038e0:	10800017 	ldw	r2,0(r2)
 40038e4:	1809883a 	mov	r4,r3
 40038e8:	100b883a 	mov	r5,r2
 40038ec:	01810034 	movhi	r6,1024
 40038f0:	318eca04 	addi	r6,r6,15144
 40038f4:	e1fffd17 	ldw	r7,-12(fp)
 40038f8:	4004b640 	call	4004b64 <alt_alarm_start>
 40038fc:	1000040e 	bge	r2,zero,4003910 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4003900:	e0bffd17 	ldw	r2,-12(fp)
 4003904:	00e00034 	movhi	r3,32768
 4003908:	18ffffc4 	addi	r3,r3,-1
 400390c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4003910:	e037883a 	mov	sp,fp
 4003914:	dfc00117 	ldw	ra,4(sp)
 4003918:	df000017 	ldw	fp,0(sp)
 400391c:	dec00204 	addi	sp,sp,8
 4003920:	f800283a 	ret

04003924 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4003924:	defff804 	addi	sp,sp,-32
 4003928:	df000715 	stw	fp,28(sp)
 400392c:	df000704 	addi	fp,sp,28
 4003930:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4003934:	e0bfff17 	ldw	r2,-4(fp)
 4003938:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400393c:	e0bffb17 	ldw	r2,-20(fp)
 4003940:	10800017 	ldw	r2,0(r2)
 4003944:	e0bffc15 	stw	r2,-16(fp)
 4003948:	00000106 	br	4003950 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 400394c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003950:	e0bffc17 	ldw	r2,-16(fp)
 4003954:	10800104 	addi	r2,r2,4
 4003958:	10800037 	ldwio	r2,0(r2)
 400395c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4003960:	e0bffd17 	ldw	r2,-12(fp)
 4003964:	1080c00c 	andi	r2,r2,768
 4003968:	10006a26 	beq	r2,zero,4003b14 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400396c:	e0bffd17 	ldw	r2,-12(fp)
 4003970:	1080400c 	andi	r2,r2,256
 4003974:	10003326 	beq	r2,zero,4003a44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4003978:	00800074 	movhi	r2,1
 400397c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003980:	e0bffb17 	ldw	r2,-20(fp)
 4003984:	10800a17 	ldw	r2,40(r2)
 4003988:	10800044 	addi	r2,r2,1
 400398c:	1081ffcc 	andi	r2,r2,2047
 4003990:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4003994:	e0bffb17 	ldw	r2,-20(fp)
 4003998:	10c00b17 	ldw	r3,44(r2)
 400399c:	e0bffe17 	ldw	r2,-8(fp)
 40039a0:	18801426 	beq	r3,r2,40039f4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40039a4:	e0bffc17 	ldw	r2,-16(fp)
 40039a8:	10800037 	ldwio	r2,0(r2)
 40039ac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40039b0:	e0bff917 	ldw	r2,-28(fp)
 40039b4:	10a0000c 	andi	r2,r2,32768
 40039b8:	10001026 	beq	r2,zero,40039fc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40039bc:	e0bffb17 	ldw	r2,-20(fp)
 40039c0:	10800a17 	ldw	r2,40(r2)
 40039c4:	e0fff917 	ldw	r3,-28(fp)
 40039c8:	e13ffb17 	ldw	r4,-20(fp)
 40039cc:	2085883a 	add	r2,r4,r2
 40039d0:	10800e04 	addi	r2,r2,56
 40039d4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40039d8:	e0bffb17 	ldw	r2,-20(fp)
 40039dc:	10800a17 	ldw	r2,40(r2)
 40039e0:	10800044 	addi	r2,r2,1
 40039e4:	10c1ffcc 	andi	r3,r2,2047
 40039e8:	e0bffb17 	ldw	r2,-20(fp)
 40039ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40039f0:	003fe306 	br	4003980 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40039f4:	0001883a 	nop
 40039f8:	00000106 	br	4003a00 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40039fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4003a00:	e0bff917 	ldw	r2,-28(fp)
 4003a04:	10bfffec 	andhi	r2,r2,65535
 4003a08:	10000e26 	beq	r2,zero,4003a44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003a0c:	e0bffb17 	ldw	r2,-20(fp)
 4003a10:	10c00817 	ldw	r3,32(r2)
 4003a14:	00bfff84 	movi	r2,-2
 4003a18:	1886703a 	and	r3,r3,r2
 4003a1c:	e0bffb17 	ldw	r2,-20(fp)
 4003a20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4003a24:	e0bffc17 	ldw	r2,-16(fp)
 4003a28:	10800104 	addi	r2,r2,4
 4003a2c:	e0fffb17 	ldw	r3,-20(fp)
 4003a30:	18c00817 	ldw	r3,32(r3)
 4003a34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003a38:	e0bffc17 	ldw	r2,-16(fp)
 4003a3c:	10800104 	addi	r2,r2,4
 4003a40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4003a44:	e0bffd17 	ldw	r2,-12(fp)
 4003a48:	1080800c 	andi	r2,r2,512
 4003a4c:	103fbf26 	beq	r2,zero,400394c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4003a50:	e0bffd17 	ldw	r2,-12(fp)
 4003a54:	1004d43a 	srli	r2,r2,16
 4003a58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003a5c:	00001406 	br	4003ab0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4003a60:	e0bffc17 	ldw	r2,-16(fp)
 4003a64:	e0fffb17 	ldw	r3,-20(fp)
 4003a68:	18c00d17 	ldw	r3,52(r3)
 4003a6c:	e13ffb17 	ldw	r4,-20(fp)
 4003a70:	20c7883a 	add	r3,r4,r3
 4003a74:	18c20e04 	addi	r3,r3,2104
 4003a78:	18c00003 	ldbu	r3,0(r3)
 4003a7c:	18c03fcc 	andi	r3,r3,255
 4003a80:	18c0201c 	xori	r3,r3,128
 4003a84:	18ffe004 	addi	r3,r3,-128
 4003a88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003a8c:	e0bffb17 	ldw	r2,-20(fp)
 4003a90:	10800d17 	ldw	r2,52(r2)
 4003a94:	10800044 	addi	r2,r2,1
 4003a98:	10c1ffcc 	andi	r3,r2,2047
 4003a9c:	e0bffb17 	ldw	r2,-20(fp)
 4003aa0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4003aa4:	e0bffa17 	ldw	r2,-24(fp)
 4003aa8:	10bfffc4 	addi	r2,r2,-1
 4003aac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003ab0:	e0bffa17 	ldw	r2,-24(fp)
 4003ab4:	10000526 	beq	r2,zero,4003acc <altera_avalon_jtag_uart_irq+0x1a8>
 4003ab8:	e0bffb17 	ldw	r2,-20(fp)
 4003abc:	10c00d17 	ldw	r3,52(r2)
 4003ac0:	e0bffb17 	ldw	r2,-20(fp)
 4003ac4:	10800c17 	ldw	r2,48(r2)
 4003ac8:	18bfe51e 	bne	r3,r2,4003a60 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4003acc:	e0bffa17 	ldw	r2,-24(fp)
 4003ad0:	103f9e26 	beq	r2,zero,400394c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4003ad4:	e0bffb17 	ldw	r2,-20(fp)
 4003ad8:	10c00817 	ldw	r3,32(r2)
 4003adc:	00bfff44 	movi	r2,-3
 4003ae0:	1886703a 	and	r3,r3,r2
 4003ae4:	e0bffb17 	ldw	r2,-20(fp)
 4003ae8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003aec:	e0bffb17 	ldw	r2,-20(fp)
 4003af0:	10800017 	ldw	r2,0(r2)
 4003af4:	10800104 	addi	r2,r2,4
 4003af8:	e0fffb17 	ldw	r3,-20(fp)
 4003afc:	18c00817 	ldw	r3,32(r3)
 4003b00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003b04:	e0bffc17 	ldw	r2,-16(fp)
 4003b08:	10800104 	addi	r2,r2,4
 4003b0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4003b10:	003f8e06 	br	400394c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4003b14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4003b18:	e037883a 	mov	sp,fp
 4003b1c:	df000017 	ldw	fp,0(sp)
 4003b20:	dec00104 	addi	sp,sp,4
 4003b24:	f800283a 	ret

04003b28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4003b28:	defffc04 	addi	sp,sp,-16
 4003b2c:	df000315 	stw	fp,12(sp)
 4003b30:	df000304 	addi	fp,sp,12
 4003b34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4003b38:	e0bfff17 	ldw	r2,-4(fp)
 4003b3c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4003b40:	e0bffd17 	ldw	r2,-12(fp)
 4003b44:	10800017 	ldw	r2,0(r2)
 4003b48:	10800104 	addi	r2,r2,4
 4003b4c:	10800037 	ldwio	r2,0(r2)
 4003b50:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4003b54:	e0bffe17 	ldw	r2,-8(fp)
 4003b58:	1081000c 	andi	r2,r2,1024
 4003b5c:	10000a26 	beq	r2,zero,4003b88 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4003b60:	e0bffd17 	ldw	r2,-12(fp)
 4003b64:	10800017 	ldw	r2,0(r2)
 4003b68:	10800104 	addi	r2,r2,4
 4003b6c:	e0fffd17 	ldw	r3,-12(fp)
 4003b70:	18c00817 	ldw	r3,32(r3)
 4003b74:	18c10014 	ori	r3,r3,1024
 4003b78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4003b7c:	e0bffd17 	ldw	r2,-12(fp)
 4003b80:	10000915 	stw	zero,36(r2)
 4003b84:	00000a06 	br	4003bb0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4003b88:	e0bffd17 	ldw	r2,-12(fp)
 4003b8c:	10800917 	ldw	r2,36(r2)
 4003b90:	00e00034 	movhi	r3,32768
 4003b94:	18ffff04 	addi	r3,r3,-4
 4003b98:	18800536 	bltu	r3,r2,4003bb0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 4003b9c:	e0bffd17 	ldw	r2,-12(fp)
 4003ba0:	10800917 	ldw	r2,36(r2)
 4003ba4:	10c00044 	addi	r3,r2,1
 4003ba8:	e0bffd17 	ldw	r2,-12(fp)
 4003bac:	10c00915 	stw	r3,36(r2)
 4003bb0:	00810074 	movhi	r2,1025
 4003bb4:	10a50c04 	addi	r2,r2,-27600
 4003bb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4003bbc:	e037883a 	mov	sp,fp
 4003bc0:	df000017 	ldw	fp,0(sp)
 4003bc4:	dec00104 	addi	sp,sp,4
 4003bc8:	f800283a 	ret

04003bcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4003bcc:	defffd04 	addi	sp,sp,-12
 4003bd0:	df000215 	stw	fp,8(sp)
 4003bd4:	df000204 	addi	fp,sp,8
 4003bd8:	e13ffe15 	stw	r4,-8(fp)
 4003bdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003be0:	00000506 	br	4003bf8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4003be4:	e0bfff17 	ldw	r2,-4(fp)
 4003be8:	1090000c 	andi	r2,r2,16384
 4003bec:	10000226 	beq	r2,zero,4003bf8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4003bf0:	00bffd44 	movi	r2,-11
 4003bf4:	00000b06 	br	4003c24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003bf8:	e0bffe17 	ldw	r2,-8(fp)
 4003bfc:	10c00d17 	ldw	r3,52(r2)
 4003c00:	e0bffe17 	ldw	r2,-8(fp)
 4003c04:	10800c17 	ldw	r2,48(r2)
 4003c08:	18800526 	beq	r3,r2,4003c20 <altera_avalon_jtag_uart_close+0x54>
 4003c0c:	e0bffe17 	ldw	r2,-8(fp)
 4003c10:	10c00917 	ldw	r3,36(r2)
 4003c14:	e0bffe17 	ldw	r2,-8(fp)
 4003c18:	10800117 	ldw	r2,4(r2)
 4003c1c:	18bff136 	bltu	r3,r2,4003be4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4003c20:	0005883a 	mov	r2,zero
}
 4003c24:	e037883a 	mov	sp,fp
 4003c28:	df000017 	ldw	fp,0(sp)
 4003c2c:	dec00104 	addi	sp,sp,4
 4003c30:	f800283a 	ret

04003c34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4003c34:	defffa04 	addi	sp,sp,-24
 4003c38:	df000515 	stw	fp,20(sp)
 4003c3c:	df000504 	addi	fp,sp,20
 4003c40:	e13ffd15 	stw	r4,-12(fp)
 4003c44:	e17ffe15 	stw	r5,-8(fp)
 4003c48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4003c4c:	00bff9c4 	movi	r2,-25
 4003c50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4003c54:	e0bffe17 	ldw	r2,-8(fp)
 4003c58:	10da8060 	cmpeqi	r3,r2,27137
 4003c5c:	1800031e 	bne	r3,zero,4003c6c <altera_avalon_jtag_uart_ioctl+0x38>
 4003c60:	109a80a0 	cmpeqi	r2,r2,27138
 4003c64:	1000181e 	bne	r2,zero,4003cc8 <altera_avalon_jtag_uart_ioctl+0x94>
 4003c68:	00002606 	br	4003d04 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4003c6c:	e0bffd17 	ldw	r2,-12(fp)
 4003c70:	10c00117 	ldw	r3,4(r2)
 4003c74:	00a00034 	movhi	r2,32768
 4003c78:	10bfffc4 	addi	r2,r2,-1
 4003c7c:	18802226 	beq	r3,r2,4003d08 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 4003c80:	e0bfff17 	ldw	r2,-4(fp)
 4003c84:	10800017 	ldw	r2,0(r2)
 4003c88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4003c8c:	e0bffc17 	ldw	r2,-16(fp)
 4003c90:	10800090 	cmplti	r2,r2,2
 4003c94:	1000061e 	bne	r2,zero,4003cb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 4003c98:	e0fffc17 	ldw	r3,-16(fp)
 4003c9c:	00a00034 	movhi	r2,32768
 4003ca0:	10bfffc4 	addi	r2,r2,-1
 4003ca4:	18800226 	beq	r3,r2,4003cb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 4003ca8:	e0bffc17 	ldw	r2,-16(fp)
 4003cac:	00000206 	br	4003cb8 <altera_avalon_jtag_uart_ioctl+0x84>
 4003cb0:	00a00034 	movhi	r2,32768
 4003cb4:	10bfff84 	addi	r2,r2,-2
 4003cb8:	e0fffd17 	ldw	r3,-12(fp)
 4003cbc:	18800115 	stw	r2,4(r3)
      rc = 0;
 4003cc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4003cc4:	00001006 	br	4003d08 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4003cc8:	e0bffd17 	ldw	r2,-12(fp)
 4003ccc:	10c00117 	ldw	r3,4(r2)
 4003cd0:	00a00034 	movhi	r2,32768
 4003cd4:	10bfffc4 	addi	r2,r2,-1
 4003cd8:	18800d26 	beq	r3,r2,4003d10 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4003cdc:	e0bffd17 	ldw	r2,-12(fp)
 4003ce0:	10c00917 	ldw	r3,36(r2)
 4003ce4:	e0bffd17 	ldw	r2,-12(fp)
 4003ce8:	10800117 	ldw	r2,4(r2)
 4003cec:	1885803a 	cmpltu	r2,r3,r2
 4003cf0:	10c03fcc 	andi	r3,r2,255
 4003cf4:	e0bfff17 	ldw	r2,-4(fp)
 4003cf8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4003cfc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4003d00:	00000306 	br	4003d10 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 4003d04:	00000306 	br	4003d14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4003d08:	0001883a 	nop
 4003d0c:	00000106 	br	4003d14 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4003d10:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4003d14:	e0bffb17 	ldw	r2,-20(fp)
}
 4003d18:	e037883a 	mov	sp,fp
 4003d1c:	df000017 	ldw	fp,0(sp)
 4003d20:	dec00104 	addi	sp,sp,4
 4003d24:	f800283a 	ret

04003d28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4003d28:	defff304 	addi	sp,sp,-52
 4003d2c:	dfc00c15 	stw	ra,48(sp)
 4003d30:	df000b15 	stw	fp,44(sp)
 4003d34:	df000b04 	addi	fp,sp,44
 4003d38:	e13ffc15 	stw	r4,-16(fp)
 4003d3c:	e17ffd15 	stw	r5,-12(fp)
 4003d40:	e1bffe15 	stw	r6,-8(fp)
 4003d44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4003d48:	e0bffd17 	ldw	r2,-12(fp)
 4003d4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4003d50:	00004706 	br	4003e70 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4003d54:	e0bffc17 	ldw	r2,-16(fp)
 4003d58:	10800a17 	ldw	r2,40(r2)
 4003d5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4003d60:	e0bffc17 	ldw	r2,-16(fp)
 4003d64:	10800b17 	ldw	r2,44(r2)
 4003d68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4003d6c:	e0fff717 	ldw	r3,-36(fp)
 4003d70:	e0bff817 	ldw	r2,-32(fp)
 4003d74:	18800536 	bltu	r3,r2,4003d8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4003d78:	e0fff717 	ldw	r3,-36(fp)
 4003d7c:	e0bff817 	ldw	r2,-32(fp)
 4003d80:	1885c83a 	sub	r2,r3,r2
 4003d84:	e0bff615 	stw	r2,-40(fp)
 4003d88:	00000406 	br	4003d9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4003d8c:	00c20004 	movi	r3,2048
 4003d90:	e0bff817 	ldw	r2,-32(fp)
 4003d94:	1885c83a 	sub	r2,r3,r2
 4003d98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4003d9c:	e0bff617 	ldw	r2,-40(fp)
 4003da0:	10001e26 	beq	r2,zero,4003e1c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4003da4:	e0fffe17 	ldw	r3,-8(fp)
 4003da8:	e0bff617 	ldw	r2,-40(fp)
 4003dac:	1880022e 	bgeu	r3,r2,4003db8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4003db0:	e0bffe17 	ldw	r2,-8(fp)
 4003db4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4003db8:	e0bff817 	ldw	r2,-32(fp)
 4003dbc:	10800e04 	addi	r2,r2,56
 4003dc0:	e0fffc17 	ldw	r3,-16(fp)
 4003dc4:	1885883a 	add	r2,r3,r2
 4003dc8:	e13ff517 	ldw	r4,-44(fp)
 4003dcc:	100b883a 	mov	r5,r2
 4003dd0:	e1bff617 	ldw	r6,-40(fp)
 4003dd4:	40010bc0 	call	40010bc <memcpy>
      ptr   += n;
 4003dd8:	e0fff517 	ldw	r3,-44(fp)
 4003ddc:	e0bff617 	ldw	r2,-40(fp)
 4003de0:	1885883a 	add	r2,r3,r2
 4003de4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4003de8:	e0fffe17 	ldw	r3,-8(fp)
 4003dec:	e0bff617 	ldw	r2,-40(fp)
 4003df0:	1885c83a 	sub	r2,r3,r2
 4003df4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003df8:	e0fff817 	ldw	r3,-32(fp)
 4003dfc:	e0bff617 	ldw	r2,-40(fp)
 4003e00:	1885883a 	add	r2,r3,r2
 4003e04:	10c1ffcc 	andi	r3,r2,2047
 4003e08:	e0bffc17 	ldw	r2,-16(fp)
 4003e0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4003e10:	e0bffe17 	ldw	r2,-8(fp)
 4003e14:	00bfcf16 	blt	zero,r2,4003d54 <altera_avalon_jtag_uart_read+0x2c>
 4003e18:	00000106 	br	4003e20 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4003e1c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4003e20:	e0fff517 	ldw	r3,-44(fp)
 4003e24:	e0bffd17 	ldw	r2,-12(fp)
 4003e28:	1880141e 	bne	r3,r2,4003e7c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4003e2c:	e0bfff17 	ldw	r2,-4(fp)
 4003e30:	1090000c 	andi	r2,r2,16384
 4003e34:	1000131e 	bne	r2,zero,4003e84 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4003e38:	0001883a 	nop
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10c00a17 	ldw	r3,40(r2)
 4003e44:	e0bff717 	ldw	r2,-36(fp)
 4003e48:	1880051e 	bne	r3,r2,4003e60 <altera_avalon_jtag_uart_read+0x138>
 4003e4c:	e0bffc17 	ldw	r2,-16(fp)
 4003e50:	10c00917 	ldw	r3,36(r2)
 4003e54:	e0bffc17 	ldw	r2,-16(fp)
 4003e58:	10800117 	ldw	r2,4(r2)
 4003e5c:	18bff736 	bltu	r3,r2,4003e3c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4003e60:	e0bffc17 	ldw	r2,-16(fp)
 4003e64:	10c00a17 	ldw	r3,40(r2)
 4003e68:	e0bff717 	ldw	r2,-36(fp)
 4003e6c:	18800726 	beq	r3,r2,4003e8c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4003e70:	e0bffe17 	ldw	r2,-8(fp)
 4003e74:	00bfb716 	blt	zero,r2,4003d54 <altera_avalon_jtag_uart_read+0x2c>
 4003e78:	00000506 	br	4003e90 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4003e7c:	0001883a 	nop
 4003e80:	00000306 	br	4003e90 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4003e84:	0001883a 	nop
 4003e88:	00000106 	br	4003e90 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4003e8c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4003e90:	e0fff517 	ldw	r3,-44(fp)
 4003e94:	e0bffd17 	ldw	r2,-12(fp)
 4003e98:	18801726 	beq	r3,r2,4003ef8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003e9c:	0005303a 	rdctl	r2,status
 4003ea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003ea4:	e0fffa17 	ldw	r3,-24(fp)
 4003ea8:	00bfff84 	movi	r2,-2
 4003eac:	1884703a 	and	r2,r3,r2
 4003eb0:	1001703a 	wrctl	status,r2
  
  return context;
 4003eb4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4003eb8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003ebc:	e0bffc17 	ldw	r2,-16(fp)
 4003ec0:	10800817 	ldw	r2,32(r2)
 4003ec4:	10c00054 	ori	r3,r2,1
 4003ec8:	e0bffc17 	ldw	r2,-16(fp)
 4003ecc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003ed0:	e0bffc17 	ldw	r2,-16(fp)
 4003ed4:	10800017 	ldw	r2,0(r2)
 4003ed8:	10800104 	addi	r2,r2,4
 4003edc:	e0fffc17 	ldw	r3,-16(fp)
 4003ee0:	18c00817 	ldw	r3,32(r3)
 4003ee4:	10c00035 	stwio	r3,0(r2)
 4003ee8:	e0bff917 	ldw	r2,-28(fp)
 4003eec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003ef0:	e0bffb17 	ldw	r2,-20(fp)
 4003ef4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4003ef8:	e0fff517 	ldw	r3,-44(fp)
 4003efc:	e0bffd17 	ldw	r2,-12(fp)
 4003f00:	18800426 	beq	r3,r2,4003f14 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 4003f04:	e0fff517 	ldw	r3,-44(fp)
 4003f08:	e0bffd17 	ldw	r2,-12(fp)
 4003f0c:	1885c83a 	sub	r2,r3,r2
 4003f10:	00000606 	br	4003f2c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 4003f14:	e0bfff17 	ldw	r2,-4(fp)
 4003f18:	1090000c 	andi	r2,r2,16384
 4003f1c:	10000226 	beq	r2,zero,4003f28 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 4003f20:	00bffd44 	movi	r2,-11
 4003f24:	00000106 	br	4003f2c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 4003f28:	00bffec4 	movi	r2,-5
}
 4003f2c:	e037883a 	mov	sp,fp
 4003f30:	dfc00117 	ldw	ra,4(sp)
 4003f34:	df000017 	ldw	fp,0(sp)
 4003f38:	dec00204 	addi	sp,sp,8
 4003f3c:	f800283a 	ret

04003f40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4003f40:	defff304 	addi	sp,sp,-52
 4003f44:	dfc00c15 	stw	ra,48(sp)
 4003f48:	df000b15 	stw	fp,44(sp)
 4003f4c:	df000b04 	addi	fp,sp,44
 4003f50:	e13ffc15 	stw	r4,-16(fp)
 4003f54:	e17ffd15 	stw	r5,-12(fp)
 4003f58:	e1bffe15 	stw	r6,-8(fp)
 4003f5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4003f60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4003f64:	e0bffd17 	ldw	r2,-12(fp)
 4003f68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4003f6c:	00003706 	br	400404c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4003f70:	e0bffc17 	ldw	r2,-16(fp)
 4003f74:	10800c17 	ldw	r2,48(r2)
 4003f78:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 4003f7c:	e0bffc17 	ldw	r2,-16(fp)
 4003f80:	10800d17 	ldw	r2,52(r2)
 4003f84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4003f88:	e0fff817 	ldw	r3,-32(fp)
 4003f8c:	e0bff517 	ldw	r2,-44(fp)
 4003f90:	1880062e 	bgeu	r3,r2,4003fac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4003f94:	e0fff517 	ldw	r3,-44(fp)
 4003f98:	e0bff817 	ldw	r2,-32(fp)
 4003f9c:	1885c83a 	sub	r2,r3,r2
 4003fa0:	10bfffc4 	addi	r2,r2,-1
 4003fa4:	e0bff615 	stw	r2,-40(fp)
 4003fa8:	00000b06 	br	4003fd8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4003fac:	e0bff517 	ldw	r2,-44(fp)
 4003fb0:	10000526 	beq	r2,zero,4003fc8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4003fb4:	00c20004 	movi	r3,2048
 4003fb8:	e0bff817 	ldw	r2,-32(fp)
 4003fbc:	1885c83a 	sub	r2,r3,r2
 4003fc0:	e0bff615 	stw	r2,-40(fp)
 4003fc4:	00000406 	br	4003fd8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4003fc8:	00c1ffc4 	movi	r3,2047
 4003fcc:	e0bff817 	ldw	r2,-32(fp)
 4003fd0:	1885c83a 	sub	r2,r3,r2
 4003fd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4003fd8:	e0bff617 	ldw	r2,-40(fp)
 4003fdc:	10001e26 	beq	r2,zero,4004058 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4003fe0:	e0fffe17 	ldw	r3,-8(fp)
 4003fe4:	e0bff617 	ldw	r2,-40(fp)
 4003fe8:	1880022e 	bgeu	r3,r2,4003ff4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4003fec:	e0bffe17 	ldw	r2,-8(fp)
 4003ff0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4003ff4:	e0bff817 	ldw	r2,-32(fp)
 4003ff8:	10820e04 	addi	r2,r2,2104
 4003ffc:	e0fffc17 	ldw	r3,-16(fp)
 4004000:	1885883a 	add	r2,r3,r2
 4004004:	1009883a 	mov	r4,r2
 4004008:	e17ffd17 	ldw	r5,-12(fp)
 400400c:	e1bff617 	ldw	r6,-40(fp)
 4004010:	40010bc0 	call	40010bc <memcpy>
      ptr   += n;
 4004014:	e0fffd17 	ldw	r3,-12(fp)
 4004018:	e0bff617 	ldw	r2,-40(fp)
 400401c:	1885883a 	add	r2,r3,r2
 4004020:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4004024:	e0fffe17 	ldw	r3,-8(fp)
 4004028:	e0bff617 	ldw	r2,-40(fp)
 400402c:	1885c83a 	sub	r2,r3,r2
 4004030:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004034:	e0fff817 	ldw	r3,-32(fp)
 4004038:	e0bff617 	ldw	r2,-40(fp)
 400403c:	1885883a 	add	r2,r3,r2
 4004040:	10c1ffcc 	andi	r3,r2,2047
 4004044:	e0bffc17 	ldw	r2,-16(fp)
 4004048:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400404c:	e0bffe17 	ldw	r2,-8(fp)
 4004050:	00bfc716 	blt	zero,r2,4003f70 <altera_avalon_jtag_uart_write+0x30>
 4004054:	00000106 	br	400405c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4004058:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400405c:	0005303a 	rdctl	r2,status
 4004060:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004064:	e0fffa17 	ldw	r3,-24(fp)
 4004068:	00bfff84 	movi	r2,-2
 400406c:	1884703a 	and	r2,r3,r2
 4004070:	1001703a 	wrctl	status,r2
  
  return context;
 4004074:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004078:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400407c:	e0bffc17 	ldw	r2,-16(fp)
 4004080:	10800817 	ldw	r2,32(r2)
 4004084:	10c00094 	ori	r3,r2,2
 4004088:	e0bffc17 	ldw	r2,-16(fp)
 400408c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004090:	e0bffc17 	ldw	r2,-16(fp)
 4004094:	10800017 	ldw	r2,0(r2)
 4004098:	10800104 	addi	r2,r2,4
 400409c:	e0fffc17 	ldw	r3,-16(fp)
 40040a0:	18c00817 	ldw	r3,32(r3)
 40040a4:	10c00035 	stwio	r3,0(r2)
 40040a8:	e0bff917 	ldw	r2,-28(fp)
 40040ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40040b0:	e0bffb17 	ldw	r2,-20(fp)
 40040b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40040b8:	e0bffe17 	ldw	r2,-8(fp)
 40040bc:	0080110e 	bge	zero,r2,4004104 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40040c0:	e0bfff17 	ldw	r2,-4(fp)
 40040c4:	1090000c 	andi	r2,r2,16384
 40040c8:	1000111e 	bne	r2,zero,4004110 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40040cc:	0001883a 	nop
 40040d0:	e0bffc17 	ldw	r2,-16(fp)
 40040d4:	10c00d17 	ldw	r3,52(r2)
 40040d8:	e0bff517 	ldw	r2,-44(fp)
 40040dc:	1880051e 	bne	r3,r2,40040f4 <altera_avalon_jtag_uart_write+0x1b4>
 40040e0:	e0bffc17 	ldw	r2,-16(fp)
 40040e4:	10c00917 	ldw	r3,36(r2)
 40040e8:	e0bffc17 	ldw	r2,-16(fp)
 40040ec:	10800117 	ldw	r2,4(r2)
 40040f0:	18bff736 	bltu	r3,r2,40040d0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 40040f4:	e0bffc17 	ldw	r2,-16(fp)
 40040f8:	10c00d17 	ldw	r3,52(r2)
 40040fc:	e0bff517 	ldw	r2,-44(fp)
 4004100:	18800526 	beq	r3,r2,4004118 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4004104:	e0bffe17 	ldw	r2,-8(fp)
 4004108:	00bfd016 	blt	zero,r2,400404c <altera_avalon_jtag_uart_write+0x10c>
 400410c:	00000306 	br	400411c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4004110:	0001883a 	nop
 4004114:	00000106 	br	400411c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 4004118:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400411c:	e0fffd17 	ldw	r3,-12(fp)
 4004120:	e0bff717 	ldw	r2,-36(fp)
 4004124:	18800426 	beq	r3,r2,4004138 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4004128:	e0fffd17 	ldw	r3,-12(fp)
 400412c:	e0bff717 	ldw	r2,-36(fp)
 4004130:	1885c83a 	sub	r2,r3,r2
 4004134:	00000606 	br	4004150 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4004138:	e0bfff17 	ldw	r2,-4(fp)
 400413c:	1090000c 	andi	r2,r2,16384
 4004140:	10000226 	beq	r2,zero,400414c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4004144:	00bffd44 	movi	r2,-11
 4004148:	00000106 	br	4004150 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400414c:	00bffec4 	movi	r2,-5
}
 4004150:	e037883a 	mov	sp,fp
 4004154:	dfc00117 	ldw	ra,4(sp)
 4004158:	df000017 	ldw	fp,0(sp)
 400415c:	dec00204 	addi	sp,sp,8
 4004160:	f800283a 	ret

04004164 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004164:	defffa04 	addi	sp,sp,-24
 4004168:	dfc00515 	stw	ra,20(sp)
 400416c:	df000415 	stw	fp,16(sp)
 4004170:	df000404 	addi	fp,sp,16
 4004174:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4004178:	0007883a 	mov	r3,zero
 400417c:	e0bfff17 	ldw	r2,-4(fp)
 4004180:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004184:	e0bfff17 	ldw	r2,-4(fp)
 4004188:	10800104 	addi	r2,r2,4
 400418c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004190:	0005303a 	rdctl	r2,status
 4004194:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004198:	e0fffd17 	ldw	r3,-12(fp)
 400419c:	00bfff84 	movi	r2,-2
 40041a0:	1884703a 	and	r2,r3,r2
 40041a4:	1001703a 	wrctl	status,r2
  
  return context;
 40041a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40041ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40041b0:	40055c80 	call	40055c8 <alt_tick>
 40041b4:	e0bffc17 	ldw	r2,-16(fp)
 40041b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40041bc:	e0bffe17 	ldw	r2,-8(fp)
 40041c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40041c4:	e037883a 	mov	sp,fp
 40041c8:	dfc00117 	ldw	ra,4(sp)
 40041cc:	df000017 	ldw	fp,0(sp)
 40041d0:	dec00204 	addi	sp,sp,8
 40041d4:	f800283a 	ret

040041d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40041d8:	defff804 	addi	sp,sp,-32
 40041dc:	dfc00715 	stw	ra,28(sp)
 40041e0:	df000615 	stw	fp,24(sp)
 40041e4:	df000604 	addi	fp,sp,24
 40041e8:	e13ffc15 	stw	r4,-16(fp)
 40041ec:	e17ffd15 	stw	r5,-12(fp)
 40041f0:	e1bffe15 	stw	r6,-8(fp)
 40041f4:	e1ffff15 	stw	r7,-4(fp)
 40041f8:	e0bfff17 	ldw	r2,-4(fp)
 40041fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4004200:	00810074 	movhi	r2,1025
 4004204:	10a50c04 	addi	r2,r2,-27600
 4004208:	10800017 	ldw	r2,0(r2)
 400420c:	1000041e 	bne	r2,zero,4004220 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 4004210:	00810074 	movhi	r2,1025
 4004214:	10a50c04 	addi	r2,r2,-27600
 4004218:	e0fffb17 	ldw	r3,-20(fp)
 400421c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4004220:	e0bffc17 	ldw	r2,-16(fp)
 4004224:	10800104 	addi	r2,r2,4
 4004228:	00c001c4 	movi	r3,7
 400422c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4004230:	d8000015 	stw	zero,0(sp)
 4004234:	e13ffd17 	ldw	r4,-12(fp)
 4004238:	e17ffe17 	ldw	r5,-8(fp)
 400423c:	01810034 	movhi	r6,1024
 4004240:	31905904 	addi	r6,r6,16740
 4004244:	e1fffc17 	ldw	r7,-16(fp)
 4004248:	4004ec00 	call	4004ec0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400424c:	e037883a 	mov	sp,fp
 4004250:	dfc00117 	ldw	ra,4(sp)
 4004254:	df000017 	ldw	fp,0(sp)
 4004258:	dec00204 	addi	sp,sp,8
 400425c:	f800283a 	ret

04004260 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4004260:	defffa04 	addi	sp,sp,-24
 4004264:	dfc00515 	stw	ra,20(sp)
 4004268:	df000415 	stw	fp,16(sp)
 400426c:	df000404 	addi	fp,sp,16
 4004270:	e13ffd15 	stw	r4,-12(fp)
 4004274:	e17ffe15 	stw	r5,-8(fp)
 4004278:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400427c:	e0bffd17 	ldw	r2,-12(fp)
 4004280:	10800017 	ldw	r2,0(r2)
 4004284:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4004288:	e0bffc17 	ldw	r2,-16(fp)
 400428c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4004290:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4004294:	10800217 	ldw	r2,8(r2)
 4004298:	1809883a 	mov	r4,r3
 400429c:	e17ffe17 	ldw	r5,-8(fp)
 40042a0:	e1bfff17 	ldw	r6,-4(fp)
 40042a4:	100f883a 	mov	r7,r2
 40042a8:	40047680 	call	4004768 <altera_avalon_uart_read>
      fd->fd_flags);
}
 40042ac:	e037883a 	mov	sp,fp
 40042b0:	dfc00117 	ldw	ra,4(sp)
 40042b4:	df000017 	ldw	fp,0(sp)
 40042b8:	dec00204 	addi	sp,sp,8
 40042bc:	f800283a 	ret

040042c0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40042c0:	defffa04 	addi	sp,sp,-24
 40042c4:	dfc00515 	stw	ra,20(sp)
 40042c8:	df000415 	stw	fp,16(sp)
 40042cc:	df000404 	addi	fp,sp,16
 40042d0:	e13ffd15 	stw	r4,-12(fp)
 40042d4:	e17ffe15 	stw	r5,-8(fp)
 40042d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40042dc:	e0bffd17 	ldw	r2,-12(fp)
 40042e0:	10800017 	ldw	r2,0(r2)
 40042e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40042e8:	e0bffc17 	ldw	r2,-16(fp)
 40042ec:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 40042f0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40042f4:	10800217 	ldw	r2,8(r2)
 40042f8:	1809883a 	mov	r4,r3
 40042fc:	e17ffe17 	ldw	r5,-8(fp)
 4004300:	e1bfff17 	ldw	r6,-4(fp)
 4004304:	100f883a 	mov	r7,r2
 4004308:	40049bc0 	call	40049bc <altera_avalon_uart_write>
      fd->fd_flags);
}
 400430c:	e037883a 	mov	sp,fp
 4004310:	dfc00117 	ldw	ra,4(sp)
 4004314:	df000017 	ldw	fp,0(sp)
 4004318:	dec00204 	addi	sp,sp,8
 400431c:	f800283a 	ret

04004320 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4004320:	defffc04 	addi	sp,sp,-16
 4004324:	dfc00315 	stw	ra,12(sp)
 4004328:	df000215 	stw	fp,8(sp)
 400432c:	df000204 	addi	fp,sp,8
 4004330:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4004334:	e0bfff17 	ldw	r2,-4(fp)
 4004338:	10800017 	ldw	r2,0(r2)
 400433c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4004340:	e0bffe17 	ldw	r2,-8(fp)
 4004344:	10c00a04 	addi	r3,r2,40
 4004348:	e0bfff17 	ldw	r2,-4(fp)
 400434c:	10800217 	ldw	r2,8(r2)
 4004350:	1809883a 	mov	r4,r3
 4004354:	100b883a 	mov	r5,r2
 4004358:	40046c40 	call	40046c4 <altera_avalon_uart_close>
}
 400435c:	e037883a 	mov	sp,fp
 4004360:	dfc00117 	ldw	ra,4(sp)
 4004364:	df000017 	ldw	fp,0(sp)
 4004368:	dec00204 	addi	sp,sp,8
 400436c:	f800283a 	ret

04004370 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4004370:	defff804 	addi	sp,sp,-32
 4004374:	dfc00715 	stw	ra,28(sp)
 4004378:	df000615 	stw	fp,24(sp)
 400437c:	df000604 	addi	fp,sp,24
 4004380:	e13ffd15 	stw	r4,-12(fp)
 4004384:	e17ffe15 	stw	r5,-8(fp)
 4004388:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 400438c:	e0bffd17 	ldw	r2,-12(fp)
 4004390:	10800017 	ldw	r2,0(r2)
 4004394:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4004398:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 400439c:	1000041e 	bne	r2,zero,40043b0 <altera_avalon_uart_init+0x40>
 40043a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 40043a4:	1000021e 	bne	r2,zero,40043b0 <altera_avalon_uart_init+0x40>
 40043a8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 40043ac:	10000226 	beq	r2,zero,40043b8 <altera_avalon_uart_init+0x48>
 40043b0:	00800044 	movi	r2,1
 40043b4:	00000106 	br	40043bc <altera_avalon_uart_init+0x4c>
 40043b8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 40043bc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 40043c0:	e0bffc17 	ldw	r2,-16(fp)
 40043c4:	10000f1e 	bne	r2,zero,4004404 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 40043c8:	e0bffd17 	ldw	r2,-12(fp)
 40043cc:	00c32004 	movi	r3,3200
 40043d0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 40043d4:	e0bffb17 	ldw	r2,-20(fp)
 40043d8:	10800304 	addi	r2,r2,12
 40043dc:	e0fffd17 	ldw	r3,-12(fp)
 40043e0:	18c00117 	ldw	r3,4(r3)
 40043e4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 40043e8:	d8000015 	stw	zero,0(sp)
 40043ec:	e13ffe17 	ldw	r4,-8(fp)
 40043f0:	e17fff17 	ldw	r5,-4(fp)
 40043f4:	01810034 	movhi	r6,1024
 40043f8:	31910604 	addi	r6,r6,17432
 40043fc:	e1fffd17 	ldw	r7,-12(fp)
 4004400:	4004ec00 	call	4004ec0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 4004404:	e037883a 	mov	sp,fp
 4004408:	dfc00117 	ldw	ra,4(sp)
 400440c:	df000017 	ldw	fp,0(sp)
 4004410:	dec00204 	addi	sp,sp,8
 4004414:	f800283a 	ret

04004418 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 4004418:	defffa04 	addi	sp,sp,-24
 400441c:	dfc00515 	stw	ra,20(sp)
 4004420:	df000415 	stw	fp,16(sp)
 4004424:	df000404 	addi	fp,sp,16
 4004428:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 400442c:	e0bfff17 	ldw	r2,-4(fp)
 4004430:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 4004434:	e0bffc17 	ldw	r2,-16(fp)
 4004438:	10800017 	ldw	r2,0(r2)
 400443c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4004440:	e0bffd17 	ldw	r2,-12(fp)
 4004444:	10800204 	addi	r2,r2,8
 4004448:	10800037 	ldwio	r2,0(r2)
 400444c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4004450:	e0bffd17 	ldw	r2,-12(fp)
 4004454:	10800204 	addi	r2,r2,8
 4004458:	0007883a 	mov	r3,zero
 400445c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4004460:	e0bffd17 	ldw	r2,-12(fp)
 4004464:	10800204 	addi	r2,r2,8
 4004468:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 400446c:	e0bffe17 	ldw	r2,-8(fp)
 4004470:	1080200c 	andi	r2,r2,128
 4004474:	10000326 	beq	r2,zero,4004484 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4004478:	e13ffc17 	ldw	r4,-16(fp)
 400447c:	e17ffe17 	ldw	r5,-8(fp)
 4004480:	40044b00 	call	40044b0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4004484:	e0bffe17 	ldw	r2,-8(fp)
 4004488:	1081100c 	andi	r2,r2,1088
 400448c:	10000326 	beq	r2,zero,400449c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4004490:	e13ffc17 	ldw	r4,-16(fp)
 4004494:	e17ffe17 	ldw	r5,-8(fp)
 4004498:	40045880 	call	4004588 <altera_avalon_uart_txirq>
  }
  

}
 400449c:	e037883a 	mov	sp,fp
 40044a0:	dfc00117 	ldw	ra,4(sp)
 40044a4:	df000017 	ldw	fp,0(sp)
 40044a8:	dec00204 	addi	sp,sp,8
 40044ac:	f800283a 	ret

040044b0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 40044b0:	defffc04 	addi	sp,sp,-16
 40044b4:	df000315 	stw	fp,12(sp)
 40044b8:	df000304 	addi	fp,sp,12
 40044bc:	e13ffe15 	stw	r4,-8(fp)
 40044c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 40044c4:	e0bfff17 	ldw	r2,-4(fp)
 40044c8:	108000cc 	andi	r2,r2,3
 40044cc:	1000291e 	bne	r2,zero,4004574 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 40044d0:	e0bffe17 	ldw	r2,-8(fp)
 40044d4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40044d8:	e0bffe17 	ldw	r2,-8(fp)
 40044dc:	10800317 	ldw	r2,12(r2)
 40044e0:	10800044 	addi	r2,r2,1
 40044e4:	10800fcc 	andi	r2,r2,63
 40044e8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 40044ec:	e0bffe17 	ldw	r2,-8(fp)
 40044f0:	10800317 	ldw	r2,12(r2)
 40044f4:	e0fffe17 	ldw	r3,-8(fp)
 40044f8:	18c00017 	ldw	r3,0(r3)
 40044fc:	18c00037 	ldwio	r3,0(r3)
 4004500:	e13ffe17 	ldw	r4,-8(fp)
 4004504:	2085883a 	add	r2,r4,r2
 4004508:	10800704 	addi	r2,r2,28
 400450c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 4004510:	e0bffe17 	ldw	r2,-8(fp)
 4004514:	e0fffd17 	ldw	r3,-12(fp)
 4004518:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400451c:	e0bffe17 	ldw	r2,-8(fp)
 4004520:	10800317 	ldw	r2,12(r2)
 4004524:	10800044 	addi	r2,r2,1
 4004528:	10800fcc 	andi	r2,r2,63
 400452c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4004530:	e0bffe17 	ldw	r2,-8(fp)
 4004534:	10c00217 	ldw	r3,8(r2)
 4004538:	e0bffd17 	ldw	r2,-12(fp)
 400453c:	18800e1e 	bne	r3,r2,4004578 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4004540:	e0bffe17 	ldw	r2,-8(fp)
 4004544:	10c00117 	ldw	r3,4(r2)
 4004548:	00bfdfc4 	movi	r2,-129
 400454c:	1886703a 	and	r3,r3,r2
 4004550:	e0bffe17 	ldw	r2,-8(fp)
 4004554:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4004558:	e0bffe17 	ldw	r2,-8(fp)
 400455c:	10800017 	ldw	r2,0(r2)
 4004560:	10800304 	addi	r2,r2,12
 4004564:	e0fffe17 	ldw	r3,-8(fp)
 4004568:	18c00117 	ldw	r3,4(r3)
 400456c:	10c00035 	stwio	r3,0(r2)
 4004570:	00000106 	br	4004578 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4004574:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4004578:	e037883a 	mov	sp,fp
 400457c:	df000017 	ldw	fp,0(sp)
 4004580:	dec00104 	addi	sp,sp,4
 4004584:	f800283a 	ret

04004588 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4004588:	defffd04 	addi	sp,sp,-12
 400458c:	df000215 	stw	fp,8(sp)
 4004590:	df000204 	addi	fp,sp,8
 4004594:	e13ffe15 	stw	r4,-8(fp)
 4004598:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 400459c:	e0bffe17 	ldw	r2,-8(fp)
 40045a0:	10c00417 	ldw	r3,16(r2)
 40045a4:	e0bffe17 	ldw	r2,-8(fp)
 40045a8:	10800517 	ldw	r2,20(r2)
 40045ac:	18803026 	beq	r3,r2,4004670 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40045b0:	e0bffe17 	ldw	r2,-8(fp)
 40045b4:	10800617 	ldw	r2,24(r2)
 40045b8:	1080008c 	andi	r2,r2,2
 40045bc:	10000326 	beq	r2,zero,40045cc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 40045c0:	e0bfff17 	ldw	r2,-4(fp)
 40045c4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40045c8:	10001b26 	beq	r2,zero,4004638 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 40045cc:	e0bffe17 	ldw	r2,-8(fp)
 40045d0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 40045d4:	e0bffe17 	ldw	r2,-8(fp)
 40045d8:	10800017 	ldw	r2,0(r2)
 40045dc:	10800104 	addi	r2,r2,4
 40045e0:	e0fffe17 	ldw	r3,-8(fp)
 40045e4:	18c00417 	ldw	r3,16(r3)
 40045e8:	e13ffe17 	ldw	r4,-8(fp)
 40045ec:	20c7883a 	add	r3,r4,r3
 40045f0:	18c01704 	addi	r3,r3,92
 40045f4:	18c00003 	ldbu	r3,0(r3)
 40045f8:	18c03fcc 	andi	r3,r3,255
 40045fc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 4004600:	e0bffe17 	ldw	r2,-8(fp)
 4004604:	10800417 	ldw	r2,16(r2)
 4004608:	10800044 	addi	r2,r2,1
 400460c:	e0fffe17 	ldw	r3,-8(fp)
 4004610:	18800415 	stw	r2,16(r3)
 4004614:	10c00fcc 	andi	r3,r2,63
 4004618:	e0bffe17 	ldw	r2,-8(fp)
 400461c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4004620:	e0bffe17 	ldw	r2,-8(fp)
 4004624:	10800117 	ldw	r2,4(r2)
 4004628:	10c01014 	ori	r3,r2,64
 400462c:	e0bffe17 	ldw	r2,-8(fp)
 4004630:	10c00115 	stw	r3,4(r2)
 4004634:	00000e06 	br	4004670 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4004638:	e0bffe17 	ldw	r2,-8(fp)
 400463c:	10800017 	ldw	r2,0(r2)
 4004640:	10800204 	addi	r2,r2,8
 4004644:	10800037 	ldwio	r2,0(r2)
 4004648:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 400464c:	e0bfff17 	ldw	r2,-4(fp)
 4004650:	1082000c 	andi	r2,r2,2048
 4004654:	1000061e 	bne	r2,zero,4004670 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4004658:	e0bffe17 	ldw	r2,-8(fp)
 400465c:	10c00117 	ldw	r3,4(r2)
 4004660:	00bfefc4 	movi	r2,-65
 4004664:	1886703a 	and	r3,r3,r2
 4004668:	e0bffe17 	ldw	r2,-8(fp)
 400466c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4004670:	e0bffe17 	ldw	r2,-8(fp)
 4004674:	10c00417 	ldw	r3,16(r2)
 4004678:	e0bffe17 	ldw	r2,-8(fp)
 400467c:	10800517 	ldw	r2,20(r2)
 4004680:	1880061e 	bne	r3,r2,400469c <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4004684:	e0bffe17 	ldw	r2,-8(fp)
 4004688:	10c00117 	ldw	r3,4(r2)
 400468c:	00beefc4 	movi	r2,-1089
 4004690:	1886703a 	and	r3,r3,r2
 4004694:	e0bffe17 	ldw	r2,-8(fp)
 4004698:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400469c:	e0bffe17 	ldw	r2,-8(fp)
 40046a0:	10800017 	ldw	r2,0(r2)
 40046a4:	10800304 	addi	r2,r2,12
 40046a8:	e0fffe17 	ldw	r3,-8(fp)
 40046ac:	18c00117 	ldw	r3,4(r3)
 40046b0:	10c00035 	stwio	r3,0(r2)
}
 40046b4:	e037883a 	mov	sp,fp
 40046b8:	df000017 	ldw	fp,0(sp)
 40046bc:	dec00104 	addi	sp,sp,4
 40046c0:	f800283a 	ret

040046c4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 40046c4:	defffd04 	addi	sp,sp,-12
 40046c8:	df000215 	stw	fp,8(sp)
 40046cc:	df000204 	addi	fp,sp,8
 40046d0:	e13ffe15 	stw	r4,-8(fp)
 40046d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40046d8:	00000506 	br	40046f0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	1090000c 	andi	r2,r2,16384
 40046e4:	10000226 	beq	r2,zero,40046f0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40046e8:	00bffd44 	movi	r2,-11
 40046ec:	00000606 	br	4004708 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40046f0:	e0bffe17 	ldw	r2,-8(fp)
 40046f4:	10c00417 	ldw	r3,16(r2)
 40046f8:	e0bffe17 	ldw	r2,-8(fp)
 40046fc:	10800517 	ldw	r2,20(r2)
 4004700:	18bff61e 	bne	r3,r2,40046dc <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4004704:	0005883a 	mov	r2,zero
}
 4004708:	e037883a 	mov	sp,fp
 400470c:	df000017 	ldw	fp,0(sp)
 4004710:	dec00104 	addi	sp,sp,4
 4004714:	f800283a 	ret

04004718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004718:	defffe04 	addi	sp,sp,-8
 400471c:	dfc00115 	stw	ra,4(sp)
 4004720:	df000015 	stw	fp,0(sp)
 4004724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004728:	00810034 	movhi	r2,1024
 400472c:	109e3c04 	addi	r2,r2,30960
 4004730:	10800017 	ldw	r2,0(r2)
 4004734:	10000526 	beq	r2,zero,400474c <alt_get_errno+0x34>
 4004738:	00810034 	movhi	r2,1024
 400473c:	109e3c04 	addi	r2,r2,30960
 4004740:	10800017 	ldw	r2,0(r2)
 4004744:	103ee83a 	callr	r2
 4004748:	00000206 	br	4004754 <alt_get_errno+0x3c>
 400474c:	00810074 	movhi	r2,1025
 4004750:	10a50704 	addi	r2,r2,-27620
}
 4004754:	e037883a 	mov	sp,fp
 4004758:	dfc00117 	ldw	ra,4(sp)
 400475c:	df000017 	ldw	fp,0(sp)
 4004760:	dec00204 	addi	sp,sp,8
 4004764:	f800283a 	ret

04004768 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4004768:	defff104 	addi	sp,sp,-60
 400476c:	dfc00e15 	stw	ra,56(sp)
 4004770:	df000d15 	stw	fp,52(sp)
 4004774:	df000d04 	addi	fp,sp,52
 4004778:	e13ffc15 	stw	r4,-16(fp)
 400477c:	e17ffd15 	stw	r5,-12(fp)
 4004780:	e1bffe15 	stw	r6,-8(fp)
 4004784:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 4004788:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 400478c:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4004790:	e0bfff17 	ldw	r2,-4(fp)
 4004794:	1090000c 	andi	r2,r2,16384
 4004798:	1005003a 	cmpeq	r2,r2,zero
 400479c:	10803fcc 	andi	r2,r2,255
 40047a0:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 40047a4:	e0bffc17 	ldw	r2,-16(fp)
 40047a8:	10800217 	ldw	r2,8(r2)
 40047ac:	10800044 	addi	r2,r2,1
 40047b0:	10800fcc 	andi	r2,r2,63
 40047b4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40047b8:	00001906 	br	4004820 <altera_avalon_uart_read+0xb8>
    {
      count++;
 40047bc:	e0bff417 	ldw	r2,-48(fp)
 40047c0:	10800044 	addi	r2,r2,1
 40047c4:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 40047c8:	e0bffc17 	ldw	r2,-16(fp)
 40047cc:	10800217 	ldw	r2,8(r2)
 40047d0:	e0fffc17 	ldw	r3,-16(fp)
 40047d4:	1885883a 	add	r2,r3,r2
 40047d8:	10800704 	addi	r2,r2,28
 40047dc:	10800003 	ldbu	r2,0(r2)
 40047e0:	1007883a 	mov	r3,r2
 40047e4:	e0bffd17 	ldw	r2,-12(fp)
 40047e8:	10c00005 	stb	r3,0(r2)
 40047ec:	e0bffd17 	ldw	r2,-12(fp)
 40047f0:	10800044 	addi	r2,r2,1
 40047f4:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 40047f8:	e0bffc17 	ldw	r2,-16(fp)
 40047fc:	10800217 	ldw	r2,8(r2)
 4004800:	10c00044 	addi	r3,r2,1
 4004804:	e0bffc17 	ldw	r2,-16(fp)
 4004808:	10c00215 	stw	r3,8(r2)
 400480c:	e0bffc17 	ldw	r2,-16(fp)
 4004810:	10800217 	ldw	r2,8(r2)
 4004814:	10c00fcc 	andi	r3,r2,63
 4004818:	e0bffc17 	ldw	r2,-16(fp)
 400481c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4004820:	e0fff417 	ldw	r3,-48(fp)
 4004824:	e0bffe17 	ldw	r2,-8(fp)
 4004828:	1880050e 	bge	r3,r2,4004840 <altera_avalon_uart_read+0xd8>
 400482c:	e0bffc17 	ldw	r2,-16(fp)
 4004830:	10c00217 	ldw	r3,8(r2)
 4004834:	e0bffc17 	ldw	r2,-16(fp)
 4004838:	10800317 	ldw	r2,12(r2)
 400483c:	18bfdf1e 	bne	r3,r2,40047bc <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4004840:	e0bff417 	ldw	r2,-48(fp)
 4004844:	1000241e 	bne	r2,zero,40048d8 <altera_avalon_uart_read+0x170>
 4004848:	e0bffc17 	ldw	r2,-16(fp)
 400484c:	10c00217 	ldw	r3,8(r2)
 4004850:	e0bffc17 	ldw	r2,-16(fp)
 4004854:	10800317 	ldw	r2,12(r2)
 4004858:	18801f1e 	bne	r3,r2,40048d8 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 400485c:	e0bff517 	ldw	r2,-44(fp)
 4004860:	1000061e 	bne	r2,zero,400487c <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 4004864:	40047180 	call	4004718 <alt_get_errno>
 4004868:	00c002c4 	movi	r3,11
 400486c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 4004870:	00800044 	movi	r2,1
 4004874:	e0bff305 	stb	r2,-52(fp)
        break;
 4004878:	00001b06 	br	40048e8 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400487c:	0005303a 	rdctl	r2,status
 4004880:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004884:	e0fff817 	ldw	r3,-32(fp)
 4004888:	00bfff84 	movi	r2,-2
 400488c:	1884703a 	and	r2,r3,r2
 4004890:	1001703a 	wrctl	status,r2
  
  return context;
 4004894:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 4004898:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400489c:	e0bffc17 	ldw	r2,-16(fp)
 40048a0:	10800117 	ldw	r2,4(r2)
 40048a4:	10c02014 	ori	r3,r2,128
 40048a8:	e0bffc17 	ldw	r2,-16(fp)
 40048ac:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40048b0:	e0bffc17 	ldw	r2,-16(fp)
 40048b4:	10800017 	ldw	r2,0(r2)
 40048b8:	10800304 	addi	r2,r2,12
 40048bc:	e0fffc17 	ldw	r3,-16(fp)
 40048c0:	18c00117 	ldw	r3,4(r3)
 40048c4:	10c00035 	stwio	r3,0(r2)
 40048c8:	e0bff717 	ldw	r2,-36(fp)
 40048cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40048d0:	e0bff917 	ldw	r2,-28(fp)
 40048d4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 40048d8:	e0bff417 	ldw	r2,-48(fp)
 40048dc:	1000021e 	bne	r2,zero,40048e8 <altera_avalon_uart_read+0x180>
 40048e0:	e0bffe17 	ldw	r2,-8(fp)
 40048e4:	103fce1e 	bne	r2,zero,4004820 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40048e8:	0005303a 	rdctl	r2,status
 40048ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40048f0:	e0fffa17 	ldw	r3,-24(fp)
 40048f4:	00bfff84 	movi	r2,-2
 40048f8:	1884703a 	and	r2,r3,r2
 40048fc:	1001703a 	wrctl	status,r2
  
  return context;
 4004900:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 4004904:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4004908:	e0bffc17 	ldw	r2,-16(fp)
 400490c:	10800117 	ldw	r2,4(r2)
 4004910:	10c02014 	ori	r3,r2,128
 4004914:	e0bffc17 	ldw	r2,-16(fp)
 4004918:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400491c:	e0bffc17 	ldw	r2,-16(fp)
 4004920:	10800017 	ldw	r2,0(r2)
 4004924:	10800304 	addi	r2,r2,12
 4004928:	e0fffc17 	ldw	r3,-16(fp)
 400492c:	18c00117 	ldw	r3,4(r3)
 4004930:	10c00035 	stwio	r3,0(r2)
 4004934:	e0bff717 	ldw	r2,-36(fp)
 4004938:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400493c:	e0bffb17 	ldw	r2,-20(fp)
 4004940:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 4004944:	e0bff303 	ldbu	r2,-52(fp)
 4004948:	10000226 	beq	r2,zero,4004954 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 400494c:	00bffd44 	movi	r2,-11
 4004950:	00000106 	br	4004958 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 4004954:	e0bff417 	ldw	r2,-48(fp)
  }
}
 4004958:	e037883a 	mov	sp,fp
 400495c:	dfc00117 	ldw	ra,4(sp)
 4004960:	df000017 	ldw	fp,0(sp)
 4004964:	dec00204 	addi	sp,sp,8
 4004968:	f800283a 	ret

0400496c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400496c:	defffe04 	addi	sp,sp,-8
 4004970:	dfc00115 	stw	ra,4(sp)
 4004974:	df000015 	stw	fp,0(sp)
 4004978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400497c:	00810034 	movhi	r2,1024
 4004980:	109e3c04 	addi	r2,r2,30960
 4004984:	10800017 	ldw	r2,0(r2)
 4004988:	10000526 	beq	r2,zero,40049a0 <alt_get_errno+0x34>
 400498c:	00810034 	movhi	r2,1024
 4004990:	109e3c04 	addi	r2,r2,30960
 4004994:	10800017 	ldw	r2,0(r2)
 4004998:	103ee83a 	callr	r2
 400499c:	00000206 	br	40049a8 <alt_get_errno+0x3c>
 40049a0:	00810074 	movhi	r2,1025
 40049a4:	10a50704 	addi	r2,r2,-27620
}
 40049a8:	e037883a 	mov	sp,fp
 40049ac:	dfc00117 	ldw	ra,4(sp)
 40049b0:	df000017 	ldw	fp,0(sp)
 40049b4:	dec00204 	addi	sp,sp,8
 40049b8:	f800283a 	ret

040049bc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 40049bc:	defff204 	addi	sp,sp,-56
 40049c0:	dfc00d15 	stw	ra,52(sp)
 40049c4:	df000c15 	stw	fp,48(sp)
 40049c8:	df000c04 	addi	fp,sp,48
 40049cc:	e13ffc15 	stw	r4,-16(fp)
 40049d0:	e17ffd15 	stw	r5,-12(fp)
 40049d4:	e1bffe15 	stw	r6,-8(fp)
 40049d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 40049dc:	e0bffe17 	ldw	r2,-8(fp)
 40049e0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	1090000c 	andi	r2,r2,16384
 40049ec:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 40049f0:	00003b06 	br	4004ae0 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40049f4:	e0bffc17 	ldw	r2,-16(fp)
 40049f8:	10800517 	ldw	r2,20(r2)
 40049fc:	10800044 	addi	r2,r2,1
 4004a00:	10800fcc 	andi	r2,r2,63
 4004a04:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4004a08:	e0bffc17 	ldw	r2,-16(fp)
 4004a0c:	10c00417 	ldw	r3,16(r2)
 4004a10:	e0bff617 	ldw	r2,-40(fp)
 4004a14:	1880211e 	bne	r3,r2,4004a9c <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 4004a18:	e0bff517 	ldw	r2,-44(fp)
 4004a1c:	10000426 	beq	r2,zero,4004a30 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 4004a20:	400496c0 	call	400496c <alt_get_errno>
 4004a24:	00c002c4 	movi	r3,11
 4004a28:	10c00015 	stw	r3,0(r2)
        break;
 4004a2c:	00002e06 	br	4004ae8 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a30:	0005303a 	rdctl	r2,status
 4004a34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a38:	e0fff817 	ldw	r3,-32(fp)
 4004a3c:	00bfff84 	movi	r2,-2
 4004a40:	1884703a 	and	r2,r3,r2
 4004a44:	1001703a 	wrctl	status,r2
  
  return context;
 4004a48:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 4004a4c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4004a50:	e0bffc17 	ldw	r2,-16(fp)
 4004a54:	10800117 	ldw	r2,4(r2)
 4004a58:	10c11014 	ori	r3,r2,1088
 4004a5c:	e0bffc17 	ldw	r2,-16(fp)
 4004a60:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4004a64:	e0bffc17 	ldw	r2,-16(fp)
 4004a68:	10800017 	ldw	r2,0(r2)
 4004a6c:	10800304 	addi	r2,r2,12
 4004a70:	e0fffc17 	ldw	r3,-16(fp)
 4004a74:	18c00117 	ldw	r3,4(r3)
 4004a78:	10c00035 	stwio	r3,0(r2)
 4004a7c:	e0bff717 	ldw	r2,-36(fp)
 4004a80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a84:	e0bff917 	ldw	r2,-28(fp)
 4004a88:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 4004a8c:	e0bffc17 	ldw	r2,-16(fp)
 4004a90:	10c00417 	ldw	r3,16(r2)
 4004a94:	e0bff617 	ldw	r2,-40(fp)
 4004a98:	18bffc26 	beq	r3,r2,4004a8c <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 4004a9c:	e0bff417 	ldw	r2,-48(fp)
 4004aa0:	10bfffc4 	addi	r2,r2,-1
 4004aa4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4004aa8:	e0bffc17 	ldw	r2,-16(fp)
 4004aac:	10800517 	ldw	r2,20(r2)
 4004ab0:	e0fffd17 	ldw	r3,-12(fp)
 4004ab4:	18c00003 	ldbu	r3,0(r3)
 4004ab8:	e13ffc17 	ldw	r4,-16(fp)
 4004abc:	2085883a 	add	r2,r4,r2
 4004ac0:	10801704 	addi	r2,r2,92
 4004ac4:	10c00005 	stb	r3,0(r2)
 4004ac8:	e0bffd17 	ldw	r2,-12(fp)
 4004acc:	10800044 	addi	r2,r2,1
 4004ad0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 4004ad4:	e0bffc17 	ldw	r2,-16(fp)
 4004ad8:	e0fff617 	ldw	r3,-40(fp)
 4004adc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4004ae0:	e0bff417 	ldw	r2,-48(fp)
 4004ae4:	103fc31e 	bne	r2,zero,40049f4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004ae8:	0005303a 	rdctl	r2,status
 4004aec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004af0:	e0fffa17 	ldw	r3,-24(fp)
 4004af4:	00bfff84 	movi	r2,-2
 4004af8:	1884703a 	and	r2,r3,r2
 4004afc:	1001703a 	wrctl	status,r2
  
  return context;
 4004b00:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4004b04:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4004b08:	e0bffc17 	ldw	r2,-16(fp)
 4004b0c:	10800117 	ldw	r2,4(r2)
 4004b10:	10c11014 	ori	r3,r2,1088
 4004b14:	e0bffc17 	ldw	r2,-16(fp)
 4004b18:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4004b1c:	e0bffc17 	ldw	r2,-16(fp)
 4004b20:	10800017 	ldw	r2,0(r2)
 4004b24:	10800304 	addi	r2,r2,12
 4004b28:	e0fffc17 	ldw	r3,-16(fp)
 4004b2c:	18c00117 	ldw	r3,4(r3)
 4004b30:	10c00035 	stwio	r3,0(r2)
 4004b34:	e0bff717 	ldw	r2,-36(fp)
 4004b38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004b3c:	e0bffb17 	ldw	r2,-20(fp)
 4004b40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 4004b44:	e0fffe17 	ldw	r3,-8(fp)
 4004b48:	e0bff417 	ldw	r2,-48(fp)
 4004b4c:	1885c83a 	sub	r2,r3,r2
}
 4004b50:	e037883a 	mov	sp,fp
 4004b54:	dfc00117 	ldw	ra,4(sp)
 4004b58:	df000017 	ldw	fp,0(sp)
 4004b5c:	dec00204 	addi	sp,sp,8
 4004b60:	f800283a 	ret

04004b64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4004b64:	defff504 	addi	sp,sp,-44
 4004b68:	df000a15 	stw	fp,40(sp)
 4004b6c:	df000a04 	addi	fp,sp,40
 4004b70:	e13ffc15 	stw	r4,-16(fp)
 4004b74:	e17ffd15 	stw	r5,-12(fp)
 4004b78:	e1bffe15 	stw	r6,-8(fp)
 4004b7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4004b80:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004b84:	00810074 	movhi	r2,1025
 4004b88:	10a50c04 	addi	r2,r2,-27600
 4004b8c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4004b90:	10003f26 	beq	r2,zero,4004c90 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4004b94:	e0bffc17 	ldw	r2,-16(fp)
 4004b98:	10003b26 	beq	r2,zero,4004c88 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4004b9c:	e0bffc17 	ldw	r2,-16(fp)
 4004ba0:	e0fffe17 	ldw	r3,-8(fp)
 4004ba4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4004ba8:	e0bffc17 	ldw	r2,-16(fp)
 4004bac:	e0ffff17 	ldw	r3,-4(fp)
 4004bb0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004bb4:	0005303a 	rdctl	r2,status
 4004bb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004bbc:	e0fff817 	ldw	r3,-32(fp)
 4004bc0:	00bfff84 	movi	r2,-2
 4004bc4:	1884703a 	and	r2,r3,r2
 4004bc8:	1001703a 	wrctl	status,r2
  
  return context;
 4004bcc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4004bd0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004bd4:	00810074 	movhi	r2,1025
 4004bd8:	10a50d04 	addi	r2,r2,-27596
 4004bdc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4004be0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4004be4:	e0fffd17 	ldw	r3,-12(fp)
 4004be8:	e0bff617 	ldw	r2,-40(fp)
 4004bec:	1885883a 	add	r2,r3,r2
 4004bf0:	10c00044 	addi	r3,r2,1
 4004bf4:	e0bffc17 	ldw	r2,-16(fp)
 4004bf8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4004bfc:	e0bffc17 	ldw	r2,-16(fp)
 4004c00:	10c00217 	ldw	r3,8(r2)
 4004c04:	e0bff617 	ldw	r2,-40(fp)
 4004c08:	1880042e 	bgeu	r3,r2,4004c1c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4004c0c:	e0bffc17 	ldw	r2,-16(fp)
 4004c10:	00c00044 	movi	r3,1
 4004c14:	10c00405 	stb	r3,16(r2)
 4004c18:	00000206 	br	4004c24 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4004c1c:	e0bffc17 	ldw	r2,-16(fp)
 4004c20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4004c24:	e0bffc17 	ldw	r2,-16(fp)
 4004c28:	00c10034 	movhi	r3,1024
 4004c2c:	18de3f04 	addi	r3,r3,30972
 4004c30:	e0fff915 	stw	r3,-28(fp)
 4004c34:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004c38:	e0bffa17 	ldw	r2,-24(fp)
 4004c3c:	e0fff917 	ldw	r3,-28(fp)
 4004c40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004c44:	e0bff917 	ldw	r2,-28(fp)
 4004c48:	10c00017 	ldw	r3,0(r2)
 4004c4c:	e0bffa17 	ldw	r2,-24(fp)
 4004c50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004c54:	e0bff917 	ldw	r2,-28(fp)
 4004c58:	10800017 	ldw	r2,0(r2)
 4004c5c:	e0fffa17 	ldw	r3,-24(fp)
 4004c60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4004c64:	e0bff917 	ldw	r2,-28(fp)
 4004c68:	e0fffa17 	ldw	r3,-24(fp)
 4004c6c:	10c00015 	stw	r3,0(r2)
 4004c70:	e0bff717 	ldw	r2,-36(fp)
 4004c74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004c78:	e0bffb17 	ldw	r2,-20(fp)
 4004c7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4004c80:	0005883a 	mov	r2,zero
 4004c84:	00000306 	br	4004c94 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4004c88:	00bffa84 	movi	r2,-22
 4004c8c:	00000106 	br	4004c94 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4004c90:	00bfde84 	movi	r2,-134
  }
}
 4004c94:	e037883a 	mov	sp,fp
 4004c98:	df000017 	ldw	fp,0(sp)
 4004c9c:	dec00104 	addi	sp,sp,4
 4004ca0:	f800283a 	ret

04004ca4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4004ca4:	defffe04 	addi	sp,sp,-8
 4004ca8:	df000115 	stw	fp,4(sp)
 4004cac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004cb0:	e03fff15 	stw	zero,-4(fp)
 4004cb4:	00000506 	br	4004ccc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4004cb8:	e0bfff17 	ldw	r2,-4(fp)
 4004cbc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004cc0:	e0bfff17 	ldw	r2,-4(fp)
 4004cc4:	10800804 	addi	r2,r2,32
 4004cc8:	e0bfff15 	stw	r2,-4(fp)
 4004ccc:	e0bfff17 	ldw	r2,-4(fp)
 4004cd0:	10820030 	cmpltui	r2,r2,2048
 4004cd4:	103ff81e 	bne	r2,zero,4004cb8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4004cd8:	e037883a 	mov	sp,fp
 4004cdc:	df000017 	ldw	fp,0(sp)
 4004ce0:	dec00104 	addi	sp,sp,4
 4004ce4:	f800283a 	ret

04004ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004ce8:	defffe04 	addi	sp,sp,-8
 4004cec:	dfc00115 	stw	ra,4(sp)
 4004cf0:	df000015 	stw	fp,0(sp)
 4004cf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004cf8:	00810034 	movhi	r2,1024
 4004cfc:	109e3c04 	addi	r2,r2,30960
 4004d00:	10800017 	ldw	r2,0(r2)
 4004d04:	10000526 	beq	r2,zero,4004d1c <alt_get_errno+0x34>
 4004d08:	00810034 	movhi	r2,1024
 4004d0c:	109e3c04 	addi	r2,r2,30960
 4004d10:	10800017 	ldw	r2,0(r2)
 4004d14:	103ee83a 	callr	r2
 4004d18:	00000206 	br	4004d24 <alt_get_errno+0x3c>
 4004d1c:	00810074 	movhi	r2,1025
 4004d20:	10a50704 	addi	r2,r2,-27620
}
 4004d24:	e037883a 	mov	sp,fp
 4004d28:	dfc00117 	ldw	ra,4(sp)
 4004d2c:	df000017 	ldw	fp,0(sp)
 4004d30:	dec00204 	addi	sp,sp,8
 4004d34:	f800283a 	ret

04004d38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4004d38:	defffa04 	addi	sp,sp,-24
 4004d3c:	dfc00515 	stw	ra,20(sp)
 4004d40:	df000415 	stw	fp,16(sp)
 4004d44:	df000404 	addi	fp,sp,16
 4004d48:	e13ffe15 	stw	r4,-8(fp)
 4004d4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4004d50:	e0bffe17 	ldw	r2,-8(fp)
 4004d54:	10000326 	beq	r2,zero,4004d64 <alt_dev_llist_insert+0x2c>
 4004d58:	e0bffe17 	ldw	r2,-8(fp)
 4004d5c:	10800217 	ldw	r2,8(r2)
 4004d60:	1000051e 	bne	r2,zero,4004d78 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 4004d64:	4004ce80 	call	4004ce8 <alt_get_errno>
 4004d68:	00c00584 	movi	r3,22
 4004d6c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4004d70:	00bffa84 	movi	r2,-22
 4004d74:	00001306 	br	4004dc4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4004d78:	e0bffe17 	ldw	r2,-8(fp)
 4004d7c:	e0ffff17 	ldw	r3,-4(fp)
 4004d80:	e0fffc15 	stw	r3,-16(fp)
 4004d84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004d88:	e0bffd17 	ldw	r2,-12(fp)
 4004d8c:	e0fffc17 	ldw	r3,-16(fp)
 4004d90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004d94:	e0bffc17 	ldw	r2,-16(fp)
 4004d98:	10c00017 	ldw	r3,0(r2)
 4004d9c:	e0bffd17 	ldw	r2,-12(fp)
 4004da0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004da4:	e0bffc17 	ldw	r2,-16(fp)
 4004da8:	10800017 	ldw	r2,0(r2)
 4004dac:	e0fffd17 	ldw	r3,-12(fp)
 4004db0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4004db4:	e0bffc17 	ldw	r2,-16(fp)
 4004db8:	e0fffd17 	ldw	r3,-12(fp)
 4004dbc:	10c00015 	stw	r3,0(r2)

  return 0;  
 4004dc0:	0005883a 	mov	r2,zero
}
 4004dc4:	e037883a 	mov	sp,fp
 4004dc8:	dfc00117 	ldw	ra,4(sp)
 4004dcc:	df000017 	ldw	fp,0(sp)
 4004dd0:	dec00204 	addi	sp,sp,8
 4004dd4:	f800283a 	ret

04004dd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4004dd8:	defffd04 	addi	sp,sp,-12
 4004ddc:	dfc00215 	stw	ra,8(sp)
 4004de0:	df000115 	stw	fp,4(sp)
 4004de4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004de8:	00810034 	movhi	r2,1024
 4004dec:	10976804 	addi	r2,r2,23968
 4004df0:	e0bfff15 	stw	r2,-4(fp)
 4004df4:	00000606 	br	4004e10 <_do_ctors+0x38>
        (*ctor) (); 
 4004df8:	e0bfff17 	ldw	r2,-4(fp)
 4004dfc:	10800017 	ldw	r2,0(r2)
 4004e00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004e04:	e0bfff17 	ldw	r2,-4(fp)
 4004e08:	10bfff04 	addi	r2,r2,-4
 4004e0c:	e0bfff15 	stw	r2,-4(fp)
 4004e10:	e0ffff17 	ldw	r3,-4(fp)
 4004e14:	00810034 	movhi	r2,1024
 4004e18:	10976904 	addi	r2,r2,23972
 4004e1c:	18bff62e 	bgeu	r3,r2,4004df8 <_do_ctors+0x20>
        (*ctor) (); 
}
 4004e20:	e037883a 	mov	sp,fp
 4004e24:	dfc00117 	ldw	ra,4(sp)
 4004e28:	df000017 	ldw	fp,0(sp)
 4004e2c:	dec00204 	addi	sp,sp,8
 4004e30:	f800283a 	ret

04004e34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4004e34:	defffd04 	addi	sp,sp,-12
 4004e38:	dfc00215 	stw	ra,8(sp)
 4004e3c:	df000115 	stw	fp,4(sp)
 4004e40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4004e44:	00810034 	movhi	r2,1024
 4004e48:	10976804 	addi	r2,r2,23968
 4004e4c:	e0bfff15 	stw	r2,-4(fp)
 4004e50:	00000606 	br	4004e6c <_do_dtors+0x38>
        (*dtor) (); 
 4004e54:	e0bfff17 	ldw	r2,-4(fp)
 4004e58:	10800017 	ldw	r2,0(r2)
 4004e5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4004e60:	e0bfff17 	ldw	r2,-4(fp)
 4004e64:	10bfff04 	addi	r2,r2,-4
 4004e68:	e0bfff15 	stw	r2,-4(fp)
 4004e6c:	e0ffff17 	ldw	r3,-4(fp)
 4004e70:	00810034 	movhi	r2,1024
 4004e74:	10976904 	addi	r2,r2,23972
 4004e78:	18bff62e 	bgeu	r3,r2,4004e54 <_do_dtors+0x20>
        (*dtor) (); 
}
 4004e7c:	e037883a 	mov	sp,fp
 4004e80:	dfc00117 	ldw	ra,4(sp)
 4004e84:	df000017 	ldw	fp,0(sp)
 4004e88:	dec00204 	addi	sp,sp,8
 4004e8c:	f800283a 	ret

04004e90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4004e90:	defffe04 	addi	sp,sp,-8
 4004e94:	dfc00115 	stw	ra,4(sp)
 4004e98:	df000015 	stw	fp,0(sp)
 4004e9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4004ea0:	0009883a 	mov	r4,zero
 4004ea4:	01440004 	movi	r5,4096
 4004ea8:	40059440 	call	4005944 <alt_icache_flush>
#endif
}
 4004eac:	e037883a 	mov	sp,fp
 4004eb0:	dfc00117 	ldw	ra,4(sp)
 4004eb4:	df000017 	ldw	fp,0(sp)
 4004eb8:	dec00204 	addi	sp,sp,8
 4004ebc:	f800283a 	ret

04004ec0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004ec0:	defff904 	addi	sp,sp,-28
 4004ec4:	dfc00615 	stw	ra,24(sp)
 4004ec8:	df000515 	stw	fp,20(sp)
 4004ecc:	df000504 	addi	fp,sp,20
 4004ed0:	e13ffc15 	stw	r4,-16(fp)
 4004ed4:	e17ffd15 	stw	r5,-12(fp)
 4004ed8:	e1bffe15 	stw	r6,-8(fp)
 4004edc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4004ee0:	e0800217 	ldw	r2,8(fp)
 4004ee4:	d8800015 	stw	r2,0(sp)
 4004ee8:	e13ffc17 	ldw	r4,-16(fp)
 4004eec:	e17ffd17 	ldw	r5,-12(fp)
 4004ef0:	e1bffe17 	ldw	r6,-8(fp)
 4004ef4:	e1ffff17 	ldw	r7,-4(fp)
 4004ef8:	40050980 	call	4005098 <alt_iic_isr_register>
}  
 4004efc:	e037883a 	mov	sp,fp
 4004f00:	dfc00117 	ldw	ra,4(sp)
 4004f04:	df000017 	ldw	fp,0(sp)
 4004f08:	dec00204 	addi	sp,sp,8
 4004f0c:	f800283a 	ret

04004f10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4004f10:	defff904 	addi	sp,sp,-28
 4004f14:	df000615 	stw	fp,24(sp)
 4004f18:	df000604 	addi	fp,sp,24
 4004f1c:	e13ffe15 	stw	r4,-8(fp)
 4004f20:	e17fff15 	stw	r5,-4(fp)
 4004f24:	e0bfff17 	ldw	r2,-4(fp)
 4004f28:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004f2c:	0005303a 	rdctl	r2,status
 4004f30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004f34:	e0fffb17 	ldw	r3,-20(fp)
 4004f38:	00bfff84 	movi	r2,-2
 4004f3c:	1884703a 	and	r2,r3,r2
 4004f40:	1001703a 	wrctl	status,r2
  
  return context;
 4004f44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004f48:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4004f4c:	e0bffa17 	ldw	r2,-24(fp)
 4004f50:	00c00044 	movi	r3,1
 4004f54:	1884983a 	sll	r2,r3,r2
 4004f58:	1007883a 	mov	r3,r2
 4004f5c:	00810074 	movhi	r2,1025
 4004f60:	10a50b04 	addi	r2,r2,-27604
 4004f64:	10800017 	ldw	r2,0(r2)
 4004f68:	1886b03a 	or	r3,r3,r2
 4004f6c:	00810074 	movhi	r2,1025
 4004f70:	10a50b04 	addi	r2,r2,-27604
 4004f74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4004f78:	00810074 	movhi	r2,1025
 4004f7c:	10a50b04 	addi	r2,r2,-27604
 4004f80:	10800017 	ldw	r2,0(r2)
 4004f84:	100170fa 	wrctl	ienable,r2
 4004f88:	e0bffc17 	ldw	r2,-16(fp)
 4004f8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004f90:	e0bffd17 	ldw	r2,-12(fp)
 4004f94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004f98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4004f9c:	e037883a 	mov	sp,fp
 4004fa0:	df000017 	ldw	fp,0(sp)
 4004fa4:	dec00104 	addi	sp,sp,4
 4004fa8:	f800283a 	ret

04004fac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4004fac:	defff904 	addi	sp,sp,-28
 4004fb0:	df000615 	stw	fp,24(sp)
 4004fb4:	df000604 	addi	fp,sp,24
 4004fb8:	e13ffe15 	stw	r4,-8(fp)
 4004fbc:	e17fff15 	stw	r5,-4(fp)
 4004fc0:	e0bfff17 	ldw	r2,-4(fp)
 4004fc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004fc8:	0005303a 	rdctl	r2,status
 4004fcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004fd0:	e0fffb17 	ldw	r3,-20(fp)
 4004fd4:	00bfff84 	movi	r2,-2
 4004fd8:	1884703a 	and	r2,r3,r2
 4004fdc:	1001703a 	wrctl	status,r2
  
  return context;
 4004fe0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004fe4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4004fe8:	e0bffa17 	ldw	r2,-24(fp)
 4004fec:	00c00044 	movi	r3,1
 4004ff0:	1884983a 	sll	r2,r3,r2
 4004ff4:	0084303a 	nor	r2,zero,r2
 4004ff8:	1007883a 	mov	r3,r2
 4004ffc:	00810074 	movhi	r2,1025
 4005000:	10a50b04 	addi	r2,r2,-27604
 4005004:	10800017 	ldw	r2,0(r2)
 4005008:	1886703a 	and	r3,r3,r2
 400500c:	00810074 	movhi	r2,1025
 4005010:	10a50b04 	addi	r2,r2,-27604
 4005014:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4005018:	00810074 	movhi	r2,1025
 400501c:	10a50b04 	addi	r2,r2,-27604
 4005020:	10800017 	ldw	r2,0(r2)
 4005024:	100170fa 	wrctl	ienable,r2
 4005028:	e0bffc17 	ldw	r2,-16(fp)
 400502c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005030:	e0bffd17 	ldw	r2,-12(fp)
 4005034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4005038:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 400503c:	e037883a 	mov	sp,fp
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00104 	addi	sp,sp,4
 4005048:	f800283a 	ret

0400504c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400504c:	defffc04 	addi	sp,sp,-16
 4005050:	df000315 	stw	fp,12(sp)
 4005054:	df000304 	addi	fp,sp,12
 4005058:	e13ffe15 	stw	r4,-8(fp)
 400505c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4005060:	000530fa 	rdctl	r2,ienable
 4005064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4005068:	e0bfff17 	ldw	r2,-4(fp)
 400506c:	00c00044 	movi	r3,1
 4005070:	1884983a 	sll	r2,r3,r2
 4005074:	1007883a 	mov	r3,r2
 4005078:	e0bffd17 	ldw	r2,-12(fp)
 400507c:	1884703a 	and	r2,r3,r2
 4005080:	1004c03a 	cmpne	r2,r2,zero
 4005084:	10803fcc 	andi	r2,r2,255
}
 4005088:	e037883a 	mov	sp,fp
 400508c:	df000017 	ldw	fp,0(sp)
 4005090:	dec00104 	addi	sp,sp,4
 4005094:	f800283a 	ret

04005098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4005098:	defff504 	addi	sp,sp,-44
 400509c:	dfc00a15 	stw	ra,40(sp)
 40050a0:	df000915 	stw	fp,36(sp)
 40050a4:	df000904 	addi	fp,sp,36
 40050a8:	e13ffc15 	stw	r4,-16(fp)
 40050ac:	e17ffd15 	stw	r5,-12(fp)
 40050b0:	e1bffe15 	stw	r6,-8(fp)
 40050b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40050b8:	00bffa84 	movi	r2,-22
 40050bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40050c0:	e0bffd17 	ldw	r2,-12(fp)
 40050c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40050c8:	e0bff817 	ldw	r2,-32(fp)
 40050cc:	10800808 	cmpgei	r2,r2,32
 40050d0:	1000271e 	bne	r2,zero,4005170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40050d4:	0005303a 	rdctl	r2,status
 40050d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40050dc:	e0fffa17 	ldw	r3,-24(fp)
 40050e0:	00bfff84 	movi	r2,-2
 40050e4:	1884703a 	and	r2,r3,r2
 40050e8:	1001703a 	wrctl	status,r2
  
  return context;
 40050ec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40050f0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 40050f4:	00c10074 	movhi	r3,1025
 40050f8:	18e51804 	addi	r3,r3,-27552
 40050fc:	e0bff817 	ldw	r2,-32(fp)
 4005100:	100490fa 	slli	r2,r2,3
 4005104:	1885883a 	add	r2,r3,r2
 4005108:	e0fffe17 	ldw	r3,-8(fp)
 400510c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4005110:	00c10074 	movhi	r3,1025
 4005114:	18e51804 	addi	r3,r3,-27552
 4005118:	e0bff817 	ldw	r2,-32(fp)
 400511c:	100490fa 	slli	r2,r2,3
 4005120:	1885883a 	add	r2,r3,r2
 4005124:	10800104 	addi	r2,r2,4
 4005128:	e0ffff17 	ldw	r3,-4(fp)
 400512c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4005130:	e0bffe17 	ldw	r2,-8(fp)
 4005134:	10000526 	beq	r2,zero,400514c <alt_iic_isr_register+0xb4>
 4005138:	e0bff817 	ldw	r2,-32(fp)
 400513c:	e13ffc17 	ldw	r4,-16(fp)
 4005140:	100b883a 	mov	r5,r2
 4005144:	4004f100 	call	4004f10 <alt_ic_irq_enable>
 4005148:	00000406 	br	400515c <alt_iic_isr_register+0xc4>
 400514c:	e0bff817 	ldw	r2,-32(fp)
 4005150:	e13ffc17 	ldw	r4,-16(fp)
 4005154:	100b883a 	mov	r5,r2
 4005158:	4004fac0 	call	4004fac <alt_ic_irq_disable>
 400515c:	e0bff715 	stw	r2,-36(fp)
 4005160:	e0bff917 	ldw	r2,-28(fp)
 4005164:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005168:	e0bffb17 	ldw	r2,-20(fp)
 400516c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4005170:	e0bff717 	ldw	r2,-36(fp)
}
 4005174:	e037883a 	mov	sp,fp
 4005178:	dfc00117 	ldw	ra,4(sp)
 400517c:	df000017 	ldw	fp,0(sp)
 4005180:	dec00204 	addi	sp,sp,8
 4005184:	f800283a 	ret

04005188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4005188:	defff904 	addi	sp,sp,-28
 400518c:	dfc00615 	stw	ra,24(sp)
 4005190:	df000515 	stw	fp,20(sp)
 4005194:	df000504 	addi	fp,sp,20
 4005198:	e13ffc15 	stw	r4,-16(fp)
 400519c:	e17ffd15 	stw	r5,-12(fp)
 40051a0:	e1bffe15 	stw	r6,-8(fp)
 40051a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40051a8:	e13ffd17 	ldw	r4,-12(fp)
 40051ac:	e17ffe17 	ldw	r5,-8(fp)
 40051b0:	e1bfff17 	ldw	r6,-4(fp)
 40051b4:	40053dc0 	call	40053dc <open>
 40051b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40051bc:	e0bffb17 	ldw	r2,-20(fp)
 40051c0:	10001c16 	blt	r2,zero,4005234 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40051c4:	00c10034 	movhi	r3,1024
 40051c8:	18d98a04 	addi	r3,r3,26152
 40051cc:	e0bffb17 	ldw	r2,-20(fp)
 40051d0:	10800324 	muli	r2,r2,12
 40051d4:	1885883a 	add	r2,r3,r2
 40051d8:	10c00017 	ldw	r3,0(r2)
 40051dc:	e0bffc17 	ldw	r2,-16(fp)
 40051e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40051e4:	00c10034 	movhi	r3,1024
 40051e8:	18d98a04 	addi	r3,r3,26152
 40051ec:	e0bffb17 	ldw	r2,-20(fp)
 40051f0:	10800324 	muli	r2,r2,12
 40051f4:	1885883a 	add	r2,r3,r2
 40051f8:	10800104 	addi	r2,r2,4
 40051fc:	10c00017 	ldw	r3,0(r2)
 4005200:	e0bffc17 	ldw	r2,-16(fp)
 4005204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4005208:	00c10034 	movhi	r3,1024
 400520c:	18d98a04 	addi	r3,r3,26152
 4005210:	e0bffb17 	ldw	r2,-20(fp)
 4005214:	10800324 	muli	r2,r2,12
 4005218:	1885883a 	add	r2,r3,r2
 400521c:	10800204 	addi	r2,r2,8
 4005220:	10c00017 	ldw	r3,0(r2)
 4005224:	e0bffc17 	ldw	r2,-16(fp)
 4005228:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400522c:	e13ffb17 	ldw	r4,-20(fp)
 4005230:	40033c80 	call	40033c8 <alt_release_fd>
  }
} 
 4005234:	e037883a 	mov	sp,fp
 4005238:	dfc00117 	ldw	ra,4(sp)
 400523c:	df000017 	ldw	fp,0(sp)
 4005240:	dec00204 	addi	sp,sp,8
 4005244:	f800283a 	ret

04005248 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4005248:	defffb04 	addi	sp,sp,-20
 400524c:	dfc00415 	stw	ra,16(sp)
 4005250:	df000315 	stw	fp,12(sp)
 4005254:	df000304 	addi	fp,sp,12
 4005258:	e13ffd15 	stw	r4,-12(fp)
 400525c:	e17ffe15 	stw	r5,-8(fp)
 4005260:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4005264:	01010034 	movhi	r4,1024
 4005268:	21198d04 	addi	r4,r4,26164
 400526c:	e17ffd17 	ldw	r5,-12(fp)
 4005270:	01800044 	movi	r6,1
 4005274:	01c07fc4 	movi	r7,511
 4005278:	40051880 	call	4005188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400527c:	01010034 	movhi	r4,1024
 4005280:	21198a04 	addi	r4,r4,26152
 4005284:	e17ffe17 	ldw	r5,-8(fp)
 4005288:	000d883a 	mov	r6,zero
 400528c:	01c07fc4 	movi	r7,511
 4005290:	40051880 	call	4005188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4005294:	01010034 	movhi	r4,1024
 4005298:	21199004 	addi	r4,r4,26176
 400529c:	e17fff17 	ldw	r5,-4(fp)
 40052a0:	01800044 	movi	r6,1
 40052a4:	01c07fc4 	movi	r7,511
 40052a8:	40051880 	call	4005188 <alt_open_fd>
}  
 40052ac:	e037883a 	mov	sp,fp
 40052b0:	dfc00117 	ldw	ra,4(sp)
 40052b4:	df000017 	ldw	fp,0(sp)
 40052b8:	dec00204 	addi	sp,sp,8
 40052bc:	f800283a 	ret

040052c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40052c0:	defffe04 	addi	sp,sp,-8
 40052c4:	dfc00115 	stw	ra,4(sp)
 40052c8:	df000015 	stw	fp,0(sp)
 40052cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40052d0:	00810034 	movhi	r2,1024
 40052d4:	109e3c04 	addi	r2,r2,30960
 40052d8:	10800017 	ldw	r2,0(r2)
 40052dc:	10000526 	beq	r2,zero,40052f4 <alt_get_errno+0x34>
 40052e0:	00810034 	movhi	r2,1024
 40052e4:	109e3c04 	addi	r2,r2,30960
 40052e8:	10800017 	ldw	r2,0(r2)
 40052ec:	103ee83a 	callr	r2
 40052f0:	00000206 	br	40052fc <alt_get_errno+0x3c>
 40052f4:	00810074 	movhi	r2,1025
 40052f8:	10a50704 	addi	r2,r2,-27620
}
 40052fc:	e037883a 	mov	sp,fp
 4005300:	dfc00117 	ldw	ra,4(sp)
 4005304:	df000017 	ldw	fp,0(sp)
 4005308:	dec00204 	addi	sp,sp,8
 400530c:	f800283a 	ret

04005310 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4005310:	defffd04 	addi	sp,sp,-12
 4005314:	df000215 	stw	fp,8(sp)
 4005318:	df000204 	addi	fp,sp,8
 400531c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4005320:	e0bfff17 	ldw	r2,-4(fp)
 4005324:	10800217 	ldw	r2,8(r2)
 4005328:	10d00034 	orhi	r3,r2,16384
 400532c:	e0bfff17 	ldw	r2,-4(fp)
 4005330:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4005334:	e03ffe15 	stw	zero,-8(fp)
 4005338:	00001d06 	br	40053b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400533c:	00c10034 	movhi	r3,1024
 4005340:	18d98a04 	addi	r3,r3,26152
 4005344:	e0bffe17 	ldw	r2,-8(fp)
 4005348:	10800324 	muli	r2,r2,12
 400534c:	1885883a 	add	r2,r3,r2
 4005350:	10c00017 	ldw	r3,0(r2)
 4005354:	e0bfff17 	ldw	r2,-4(fp)
 4005358:	10800017 	ldw	r2,0(r2)
 400535c:	1880111e 	bne	r3,r2,40053a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4005360:	00c10034 	movhi	r3,1024
 4005364:	18d98a04 	addi	r3,r3,26152
 4005368:	e0bffe17 	ldw	r2,-8(fp)
 400536c:	10800324 	muli	r2,r2,12
 4005370:	1885883a 	add	r2,r3,r2
 4005374:	10800204 	addi	r2,r2,8
 4005378:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400537c:	1000090e 	bge	r2,zero,40053a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4005380:	e0bffe17 	ldw	r2,-8(fp)
 4005384:	10c00324 	muli	r3,r2,12
 4005388:	00810034 	movhi	r2,1024
 400538c:	10998a04 	addi	r2,r2,26152
 4005390:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4005394:	e0bfff17 	ldw	r2,-4(fp)
 4005398:	18800226 	beq	r3,r2,40053a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400539c:	00bffcc4 	movi	r2,-13
 40053a0:	00000a06 	br	40053cc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40053a4:	e0bffe17 	ldw	r2,-8(fp)
 40053a8:	10800044 	addi	r2,r2,1
 40053ac:	e0bffe15 	stw	r2,-8(fp)
 40053b0:	00810034 	movhi	r2,1024
 40053b4:	109e3b04 	addi	r2,r2,30956
 40053b8:	10800017 	ldw	r2,0(r2)
 40053bc:	1007883a 	mov	r3,r2
 40053c0:	e0bffe17 	ldw	r2,-8(fp)
 40053c4:	18bfdd2e 	bgeu	r3,r2,400533c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40053c8:	0005883a 	mov	r2,zero
}
 40053cc:	e037883a 	mov	sp,fp
 40053d0:	df000017 	ldw	fp,0(sp)
 40053d4:	dec00104 	addi	sp,sp,4
 40053d8:	f800283a 	ret

040053dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40053dc:	defff604 	addi	sp,sp,-40
 40053e0:	dfc00915 	stw	ra,36(sp)
 40053e4:	df000815 	stw	fp,32(sp)
 40053e8:	df000804 	addi	fp,sp,32
 40053ec:	e13ffd15 	stw	r4,-12(fp)
 40053f0:	e17ffe15 	stw	r5,-8(fp)
 40053f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40053f8:	00bfffc4 	movi	r2,-1
 40053fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4005400:	00bffb44 	movi	r2,-19
 4005404:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4005408:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400540c:	e13ffd17 	ldw	r4,-12(fp)
 4005410:	01410034 	movhi	r5,1024
 4005414:	295e3904 	addi	r5,r5,30948
 4005418:	40056ec0 	call	40056ec <alt_find_dev>
 400541c:	e0bff815 	stw	r2,-32(fp)
 4005420:	e0bff817 	ldw	r2,-32(fp)
 4005424:	1000051e 	bne	r2,zero,400543c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4005428:	e13ffd17 	ldw	r4,-12(fp)
 400542c:	400577c0 	call	400577c <alt_find_file>
 4005430:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4005434:	00800044 	movi	r2,1
 4005438:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400543c:	e0bff817 	ldw	r2,-32(fp)
 4005440:	10002926 	beq	r2,zero,40054e8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4005444:	e13ff817 	ldw	r4,-32(fp)
 4005448:	40058900 	call	4005890 <alt_get_fd>
 400544c:	e0bff915 	stw	r2,-28(fp)
 4005450:	e0bff917 	ldw	r2,-28(fp)
 4005454:	1000030e 	bge	r2,zero,4005464 <open+0x88>
    {
      status = index;
 4005458:	e0bff917 	ldw	r2,-28(fp)
 400545c:	e0bffa15 	stw	r2,-24(fp)
 4005460:	00002306 	br	40054f0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 4005464:	e0bff917 	ldw	r2,-28(fp)
 4005468:	10c00324 	muli	r3,r2,12
 400546c:	00810034 	movhi	r2,1024
 4005470:	10998a04 	addi	r2,r2,26152
 4005474:	1885883a 	add	r2,r3,r2
 4005478:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400547c:	e0fffe17 	ldw	r3,-8(fp)
 4005480:	00900034 	movhi	r2,16384
 4005484:	10bfffc4 	addi	r2,r2,-1
 4005488:	1886703a 	and	r3,r3,r2
 400548c:	e0bffc17 	ldw	r2,-16(fp)
 4005490:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4005494:	e0bffb17 	ldw	r2,-20(fp)
 4005498:	1000051e 	bne	r2,zero,40054b0 <open+0xd4>
 400549c:	e13ffc17 	ldw	r4,-16(fp)
 40054a0:	40053100 	call	4005310 <alt_file_locked>
 40054a4:	e0bffa15 	stw	r2,-24(fp)
 40054a8:	e0bffa17 	ldw	r2,-24(fp)
 40054ac:	10001016 	blt	r2,zero,40054f0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40054b0:	e0bff817 	ldw	r2,-32(fp)
 40054b4:	10800317 	ldw	r2,12(r2)
 40054b8:	10000826 	beq	r2,zero,40054dc <open+0x100>
 40054bc:	e0bff817 	ldw	r2,-32(fp)
 40054c0:	10800317 	ldw	r2,12(r2)
 40054c4:	e13ffc17 	ldw	r4,-16(fp)
 40054c8:	e17ffd17 	ldw	r5,-12(fp)
 40054cc:	e1bffe17 	ldw	r6,-8(fp)
 40054d0:	e1ffff17 	ldw	r7,-4(fp)
 40054d4:	103ee83a 	callr	r2
 40054d8:	00000106 	br	40054e0 <open+0x104>
 40054dc:	0005883a 	mov	r2,zero
 40054e0:	e0bffa15 	stw	r2,-24(fp)
 40054e4:	00000206 	br	40054f0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40054e8:	00bffb44 	movi	r2,-19
 40054ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40054f0:	e0bffa17 	ldw	r2,-24(fp)
 40054f4:	1000080e 	bge	r2,zero,4005518 <open+0x13c>
  {
    alt_release_fd (index);  
 40054f8:	e13ff917 	ldw	r4,-28(fp)
 40054fc:	40033c80 	call	40033c8 <alt_release_fd>
    ALT_ERRNO = -status;
 4005500:	40052c00 	call	40052c0 <alt_get_errno>
 4005504:	e0fffa17 	ldw	r3,-24(fp)
 4005508:	00c7c83a 	sub	r3,zero,r3
 400550c:	10c00015 	stw	r3,0(r2)
    return -1;
 4005510:	00bfffc4 	movi	r2,-1
 4005514:	00000106 	br	400551c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4005518:	e0bff917 	ldw	r2,-28(fp)
}
 400551c:	e037883a 	mov	sp,fp
 4005520:	dfc00117 	ldw	ra,4(sp)
 4005524:	df000017 	ldw	fp,0(sp)
 4005528:	dec00204 	addi	sp,sp,8
 400552c:	f800283a 	ret

04005530 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4005530:	defffa04 	addi	sp,sp,-24
 4005534:	df000515 	stw	fp,20(sp)
 4005538:	df000504 	addi	fp,sp,20
 400553c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005540:	0005303a 	rdctl	r2,status
 4005544:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005548:	e0fffc17 	ldw	r3,-16(fp)
 400554c:	00bfff84 	movi	r2,-2
 4005550:	1884703a 	and	r2,r3,r2
 4005554:	1001703a 	wrctl	status,r2
  
  return context;
 4005558:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400555c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4005560:	e0bfff17 	ldw	r2,-4(fp)
 4005564:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4005568:	e0bffd17 	ldw	r2,-12(fp)
 400556c:	10800017 	ldw	r2,0(r2)
 4005570:	e0fffd17 	ldw	r3,-12(fp)
 4005574:	18c00117 	ldw	r3,4(r3)
 4005578:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400557c:	e0bffd17 	ldw	r2,-12(fp)
 4005580:	10800117 	ldw	r2,4(r2)
 4005584:	e0fffd17 	ldw	r3,-12(fp)
 4005588:	18c00017 	ldw	r3,0(r3)
 400558c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4005590:	e0bffd17 	ldw	r2,-12(fp)
 4005594:	e0fffd17 	ldw	r3,-12(fp)
 4005598:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400559c:	e0bffd17 	ldw	r2,-12(fp)
 40055a0:	e0fffd17 	ldw	r3,-12(fp)
 40055a4:	10c00015 	stw	r3,0(r2)
 40055a8:	e0bffb17 	ldw	r2,-20(fp)
 40055ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40055b0:	e0bffe17 	ldw	r2,-8(fp)
 40055b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40055b8:	e037883a 	mov	sp,fp
 40055bc:	df000017 	ldw	fp,0(sp)
 40055c0:	dec00104 	addi	sp,sp,4
 40055c4:	f800283a 	ret

040055c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40055c8:	defffb04 	addi	sp,sp,-20
 40055cc:	dfc00415 	stw	ra,16(sp)
 40055d0:	df000315 	stw	fp,12(sp)
 40055d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40055d8:	d0a00c17 	ldw	r2,-32720(gp)
 40055dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40055e0:	d0a6da17 	ldw	r2,-25752(gp)
 40055e4:	10800044 	addi	r2,r2,1
 40055e8:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40055ec:	00002e06 	br	40056a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40055f0:	e0bffd17 	ldw	r2,-12(fp)
 40055f4:	10800017 	ldw	r2,0(r2)
 40055f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40055fc:	e0bffd17 	ldw	r2,-12(fp)
 4005600:	10800403 	ldbu	r2,16(r2)
 4005604:	10803fcc 	andi	r2,r2,255
 4005608:	10000426 	beq	r2,zero,400561c <alt_tick+0x54>
 400560c:	d0a6da17 	ldw	r2,-25752(gp)
 4005610:	1000021e 	bne	r2,zero,400561c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4005614:	e0bffd17 	ldw	r2,-12(fp)
 4005618:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400561c:	e0bffd17 	ldw	r2,-12(fp)
 4005620:	10800217 	ldw	r2,8(r2)
 4005624:	d0e6da17 	ldw	r3,-25752(gp)
 4005628:	18801d36 	bltu	r3,r2,40056a0 <alt_tick+0xd8>
 400562c:	e0bffd17 	ldw	r2,-12(fp)
 4005630:	10800403 	ldbu	r2,16(r2)
 4005634:	10803fcc 	andi	r2,r2,255
 4005638:	1000191e 	bne	r2,zero,40056a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400563c:	e0bffd17 	ldw	r2,-12(fp)
 4005640:	10c00317 	ldw	r3,12(r2)
 4005644:	e0bffd17 	ldw	r2,-12(fp)
 4005648:	10800517 	ldw	r2,20(r2)
 400564c:	1009883a 	mov	r4,r2
 4005650:	183ee83a 	callr	r3
 4005654:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4005658:	e0bfff17 	ldw	r2,-4(fp)
 400565c:	1000031e 	bne	r2,zero,400566c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4005660:	e13ffd17 	ldw	r4,-12(fp)
 4005664:	40055300 	call	4005530 <alt_alarm_stop>
 4005668:	00000d06 	br	40056a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400566c:	e0bffd17 	ldw	r2,-12(fp)
 4005670:	10c00217 	ldw	r3,8(r2)
 4005674:	e0bfff17 	ldw	r2,-4(fp)
 4005678:	1887883a 	add	r3,r3,r2
 400567c:	e0bffd17 	ldw	r2,-12(fp)
 4005680:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4005684:	e0bffd17 	ldw	r2,-12(fp)
 4005688:	10c00217 	ldw	r3,8(r2)
 400568c:	d0a6da17 	ldw	r2,-25752(gp)
 4005690:	1880032e 	bgeu	r3,r2,40056a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4005694:	e0bffd17 	ldw	r2,-12(fp)
 4005698:	00c00044 	movi	r3,1
 400569c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40056a0:	e0bffe17 	ldw	r2,-8(fp)
 40056a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40056a8:	e0fffd17 	ldw	r3,-12(fp)
 40056ac:	d0a00c04 	addi	r2,gp,-32720
 40056b0:	18bfcf1e 	bne	r3,r2,40055f0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40056b4:	0001883a 	nop
}
 40056b8:	e037883a 	mov	sp,fp
 40056bc:	dfc00117 	ldw	ra,4(sp)
 40056c0:	df000017 	ldw	fp,0(sp)
 40056c4:	dec00204 	addi	sp,sp,8
 40056c8:	f800283a 	ret

040056cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40056cc:	deffff04 	addi	sp,sp,-4
 40056d0:	df000015 	stw	fp,0(sp)
 40056d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40056d8:	000170fa 	wrctl	ienable,zero
}
 40056dc:	e037883a 	mov	sp,fp
 40056e0:	df000017 	ldw	fp,0(sp)
 40056e4:	dec00104 	addi	sp,sp,4
 40056e8:	f800283a 	ret

040056ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40056ec:	defffa04 	addi	sp,sp,-24
 40056f0:	dfc00515 	stw	ra,20(sp)
 40056f4:	df000415 	stw	fp,16(sp)
 40056f8:	df000404 	addi	fp,sp,16
 40056fc:	e13ffe15 	stw	r4,-8(fp)
 4005700:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4005704:	e0bfff17 	ldw	r2,-4(fp)
 4005708:	10800017 	ldw	r2,0(r2)
 400570c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4005710:	e13ffe17 	ldw	r4,-8(fp)
 4005714:	40002d00 	call	40002d0 <strlen>
 4005718:	10800044 	addi	r2,r2,1
 400571c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005720:	00000d06 	br	4005758 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4005724:	e0bffc17 	ldw	r2,-16(fp)
 4005728:	10c00217 	ldw	r3,8(r2)
 400572c:	e0bffd17 	ldw	r2,-12(fp)
 4005730:	1809883a 	mov	r4,r3
 4005734:	e17ffe17 	ldw	r5,-8(fp)
 4005738:	100d883a 	mov	r6,r2
 400573c:	4005a1c0 	call	4005a1c <memcmp>
 4005740:	1000021e 	bne	r2,zero,400574c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4005744:	e0bffc17 	ldw	r2,-16(fp)
 4005748:	00000706 	br	4005768 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400574c:	e0bffc17 	ldw	r2,-16(fp)
 4005750:	10800017 	ldw	r2,0(r2)
 4005754:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005758:	e0fffc17 	ldw	r3,-16(fp)
 400575c:	e0bfff17 	ldw	r2,-4(fp)
 4005760:	18bff01e 	bne	r3,r2,4005724 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4005764:	0005883a 	mov	r2,zero
}
 4005768:	e037883a 	mov	sp,fp
 400576c:	dfc00117 	ldw	ra,4(sp)
 4005770:	df000017 	ldw	fp,0(sp)
 4005774:	dec00204 	addi	sp,sp,8
 4005778:	f800283a 	ret

0400577c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400577c:	defffb04 	addi	sp,sp,-20
 4005780:	dfc00415 	stw	ra,16(sp)
 4005784:	df000315 	stw	fp,12(sp)
 4005788:	df000304 	addi	fp,sp,12
 400578c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4005790:	00810034 	movhi	r2,1024
 4005794:	109e3704 	addi	r2,r2,30940
 4005798:	10800017 	ldw	r2,0(r2)
 400579c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40057a0:	00003106 	br	4005868 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 40057a4:	e0bffd17 	ldw	r2,-12(fp)
 40057a8:	10800217 	ldw	r2,8(r2)
 40057ac:	1009883a 	mov	r4,r2
 40057b0:	40002d00 	call	40002d0 <strlen>
 40057b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40057b8:	e0bffd17 	ldw	r2,-12(fp)
 40057bc:	10c00217 	ldw	r3,8(r2)
 40057c0:	e0bffe17 	ldw	r2,-8(fp)
 40057c4:	10bfffc4 	addi	r2,r2,-1
 40057c8:	1885883a 	add	r2,r3,r2
 40057cc:	10800003 	ldbu	r2,0(r2)
 40057d0:	10803fcc 	andi	r2,r2,255
 40057d4:	1080201c 	xori	r2,r2,128
 40057d8:	10bfe004 	addi	r2,r2,-128
 40057dc:	10800bd8 	cmpnei	r2,r2,47
 40057e0:	1000031e 	bne	r2,zero,40057f0 <alt_find_file+0x74>
    {
      len -= 1;
 40057e4:	e0bffe17 	ldw	r2,-8(fp)
 40057e8:	10bfffc4 	addi	r2,r2,-1
 40057ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40057f0:	e0bffe17 	ldw	r2,-8(fp)
 40057f4:	e0ffff17 	ldw	r3,-4(fp)
 40057f8:	1885883a 	add	r2,r3,r2
 40057fc:	10800003 	ldbu	r2,0(r2)
 4005800:	10803fcc 	andi	r2,r2,255
 4005804:	1080201c 	xori	r2,r2,128
 4005808:	10bfe004 	addi	r2,r2,-128
 400580c:	10800be0 	cmpeqi	r2,r2,47
 4005810:	1000081e 	bne	r2,zero,4005834 <alt_find_file+0xb8>
 4005814:	e0bffe17 	ldw	r2,-8(fp)
 4005818:	e0ffff17 	ldw	r3,-4(fp)
 400581c:	1885883a 	add	r2,r3,r2
 4005820:	10800003 	ldbu	r2,0(r2)
 4005824:	10803fcc 	andi	r2,r2,255
 4005828:	1080201c 	xori	r2,r2,128
 400582c:	10bfe004 	addi	r2,r2,-128
 4005830:	10000a1e 	bne	r2,zero,400585c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4005834:	e0bffd17 	ldw	r2,-12(fp)
 4005838:	10c00217 	ldw	r3,8(r2)
 400583c:	e0bffe17 	ldw	r2,-8(fp)
 4005840:	1809883a 	mov	r4,r3
 4005844:	e17fff17 	ldw	r5,-4(fp)
 4005848:	100d883a 	mov	r6,r2
 400584c:	4005a1c0 	call	4005a1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4005850:	1000021e 	bne	r2,zero,400585c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4005854:	e0bffd17 	ldw	r2,-12(fp)
 4005858:	00000806 	br	400587c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400585c:	e0bffd17 	ldw	r2,-12(fp)
 4005860:	10800017 	ldw	r2,0(r2)
 4005864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4005868:	e0fffd17 	ldw	r3,-12(fp)
 400586c:	00810034 	movhi	r2,1024
 4005870:	109e3704 	addi	r2,r2,30940
 4005874:	18bfcb1e 	bne	r3,r2,40057a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4005878:	0005883a 	mov	r2,zero
}
 400587c:	e037883a 	mov	sp,fp
 4005880:	dfc00117 	ldw	ra,4(sp)
 4005884:	df000017 	ldw	fp,0(sp)
 4005888:	dec00204 	addi	sp,sp,8
 400588c:	f800283a 	ret

04005890 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4005890:	defffc04 	addi	sp,sp,-16
 4005894:	df000315 	stw	fp,12(sp)
 4005898:	df000304 	addi	fp,sp,12
 400589c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40058a0:	00bffa04 	movi	r2,-24
 40058a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40058a8:	e03ffd15 	stw	zero,-12(fp)
 40058ac:	00001d06 	br	4005924 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 40058b0:	00c10034 	movhi	r3,1024
 40058b4:	18d98a04 	addi	r3,r3,26152
 40058b8:	e0bffd17 	ldw	r2,-12(fp)
 40058bc:	10800324 	muli	r2,r2,12
 40058c0:	1885883a 	add	r2,r3,r2
 40058c4:	10800017 	ldw	r2,0(r2)
 40058c8:	1000131e 	bne	r2,zero,4005918 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 40058cc:	00c10034 	movhi	r3,1024
 40058d0:	18d98a04 	addi	r3,r3,26152
 40058d4:	e0bffd17 	ldw	r2,-12(fp)
 40058d8:	10800324 	muli	r2,r2,12
 40058dc:	1885883a 	add	r2,r3,r2
 40058e0:	e0ffff17 	ldw	r3,-4(fp)
 40058e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40058e8:	00810034 	movhi	r2,1024
 40058ec:	109e3b04 	addi	r2,r2,30956
 40058f0:	10c00017 	ldw	r3,0(r2)
 40058f4:	e0bffd17 	ldw	r2,-12(fp)
 40058f8:	1880040e 	bge	r3,r2,400590c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 40058fc:	00810034 	movhi	r2,1024
 4005900:	109e3b04 	addi	r2,r2,30956
 4005904:	e0fffd17 	ldw	r3,-12(fp)
 4005908:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400590c:	e0bffd17 	ldw	r2,-12(fp)
 4005910:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4005914:	00000606 	br	4005930 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005918:	e0bffd17 	ldw	r2,-12(fp)
 400591c:	10800044 	addi	r2,r2,1
 4005920:	e0bffd15 	stw	r2,-12(fp)
 4005924:	e0bffd17 	ldw	r2,-12(fp)
 4005928:	10800810 	cmplti	r2,r2,32
 400592c:	103fe01e 	bne	r2,zero,40058b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005930:	e0bffe17 	ldw	r2,-8(fp)
}
 4005934:	e037883a 	mov	sp,fp
 4005938:	df000017 	ldw	fp,0(sp)
 400593c:	dec00104 	addi	sp,sp,4
 4005940:	f800283a 	ret

04005944 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4005944:	defffb04 	addi	sp,sp,-20
 4005948:	df000415 	stw	fp,16(sp)
 400594c:	df000404 	addi	fp,sp,16
 4005950:	e13ffe15 	stw	r4,-8(fp)
 4005954:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4005958:	e0bfff17 	ldw	r2,-4(fp)
 400595c:	10840070 	cmpltui	r2,r2,4097
 4005960:	1000021e 	bne	r2,zero,400596c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4005964:	00840004 	movi	r2,4096
 4005968:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 400596c:	e0fffe17 	ldw	r3,-8(fp)
 4005970:	e0bfff17 	ldw	r2,-4(fp)
 4005974:	1885883a 	add	r2,r3,r2
 4005978:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400597c:	e0bffe17 	ldw	r2,-8(fp)
 4005980:	e0bffc15 	stw	r2,-16(fp)
 4005984:	00000506 	br	400599c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4005988:	e0bffc17 	ldw	r2,-16(fp)
 400598c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	10800804 	addi	r2,r2,32
 4005998:	e0bffc15 	stw	r2,-16(fp)
 400599c:	e0fffc17 	ldw	r3,-16(fp)
 40059a0:	e0bffd17 	ldw	r2,-12(fp)
 40059a4:	18bff836 	bltu	r3,r2,4005988 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40059a8:	e0bffe17 	ldw	r2,-8(fp)
 40059ac:	108007cc 	andi	r2,r2,31
 40059b0:	10000226 	beq	r2,zero,40059bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40059b4:	e0bffc17 	ldw	r2,-16(fp)
 40059b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40059bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40059c0:	e037883a 	mov	sp,fp
 40059c4:	df000017 	ldw	fp,0(sp)
 40059c8:	dec00104 	addi	sp,sp,4
 40059cc:	f800283a 	ret

040059d0 <atexit>:
 40059d0:	200b883a 	mov	r5,r4
 40059d4:	000d883a 	mov	r6,zero
 40059d8:	0009883a 	mov	r4,zero
 40059dc:	000f883a 	mov	r7,zero
 40059e0:	4005a981 	jmpi	4005a98 <__register_exitproc>

040059e4 <exit>:
 40059e4:	defffe04 	addi	sp,sp,-8
 40059e8:	000b883a 	mov	r5,zero
 40059ec:	dc000015 	stw	r16,0(sp)
 40059f0:	dfc00115 	stw	ra,4(sp)
 40059f4:	2021883a 	mov	r16,r4
 40059f8:	4005bc80 	call	4005bc8 <__call_exitprocs>
 40059fc:	00810034 	movhi	r2,1024
 4005a00:	109e3304 	addi	r2,r2,30924
 4005a04:	11000017 	ldw	r4,0(r2)
 4005a08:	20800f17 	ldw	r2,60(r4)
 4005a0c:	10000126 	beq	r2,zero,4005a14 <exit+0x30>
 4005a10:	103ee83a 	callr	r2
 4005a14:	8009883a 	mov	r4,r16
 4005a18:	4005d680 	call	4005d68 <_exit>

04005a1c <memcmp>:
 4005a1c:	01c000c4 	movi	r7,3
 4005a20:	3980192e 	bgeu	r7,r6,4005a88 <memcmp+0x6c>
 4005a24:	2904b03a 	or	r2,r5,r4
 4005a28:	11c4703a 	and	r2,r2,r7
 4005a2c:	10000f26 	beq	r2,zero,4005a6c <memcmp+0x50>
 4005a30:	20c00003 	ldbu	r3,0(r4)
 4005a34:	28800003 	ldbu	r2,0(r5)
 4005a38:	1880151e 	bne	r3,r2,4005a90 <memcmp+0x74>
 4005a3c:	31bfff84 	addi	r6,r6,-2
 4005a40:	01ffffc4 	movi	r7,-1
 4005a44:	00000406 	br	4005a58 <memcmp+0x3c>
 4005a48:	20c00003 	ldbu	r3,0(r4)
 4005a4c:	28800003 	ldbu	r2,0(r5)
 4005a50:	31bfffc4 	addi	r6,r6,-1
 4005a54:	18800e1e 	bne	r3,r2,4005a90 <memcmp+0x74>
 4005a58:	21000044 	addi	r4,r4,1
 4005a5c:	29400044 	addi	r5,r5,1
 4005a60:	31fff91e 	bne	r6,r7,4005a48 <memcmp+0x2c>
 4005a64:	0005883a 	mov	r2,zero
 4005a68:	f800283a 	ret
 4005a6c:	20c00017 	ldw	r3,0(r4)
 4005a70:	28800017 	ldw	r2,0(r5)
 4005a74:	1880041e 	bne	r3,r2,4005a88 <memcmp+0x6c>
 4005a78:	31bfff04 	addi	r6,r6,-4
 4005a7c:	21000104 	addi	r4,r4,4
 4005a80:	29400104 	addi	r5,r5,4
 4005a84:	39bff936 	bltu	r7,r6,4005a6c <memcmp+0x50>
 4005a88:	303fe91e 	bne	r6,zero,4005a30 <memcmp+0x14>
 4005a8c:	003ff506 	br	4005a64 <memcmp+0x48>
 4005a90:	1885c83a 	sub	r2,r3,r2
 4005a94:	f800283a 	ret

04005a98 <__register_exitproc>:
 4005a98:	defffa04 	addi	sp,sp,-24
 4005a9c:	00810034 	movhi	r2,1024
 4005aa0:	109e3304 	addi	r2,r2,30924
 4005aa4:	dc000315 	stw	r16,12(sp)
 4005aa8:	14000017 	ldw	r16,0(r2)
 4005aac:	dc400415 	stw	r17,16(sp)
 4005ab0:	dfc00515 	stw	ra,20(sp)
 4005ab4:	80805217 	ldw	r2,328(r16)
 4005ab8:	2023883a 	mov	r17,r4
 4005abc:	10003e26 	beq	r2,zero,4005bb8 <__register_exitproc+0x120>
 4005ac0:	10c00117 	ldw	r3,4(r2)
 4005ac4:	020007c4 	movi	r8,31
 4005ac8:	40c0180e 	bge	r8,r3,4005b2c <__register_exitproc+0x94>
 4005acc:	00800034 	movhi	r2,0
 4005ad0:	10800004 	addi	r2,r2,0
 4005ad4:	1000061e 	bne	r2,zero,4005af0 <__register_exitproc+0x58>
 4005ad8:	00bfffc4 	movi	r2,-1
 4005adc:	dfc00517 	ldw	ra,20(sp)
 4005ae0:	dc400417 	ldw	r17,16(sp)
 4005ae4:	dc000317 	ldw	r16,12(sp)
 4005ae8:	dec00604 	addi	sp,sp,24
 4005aec:	f800283a 	ret
 4005af0:	01006404 	movi	r4,400
 4005af4:	d9400015 	stw	r5,0(sp)
 4005af8:	d9800115 	stw	r6,4(sp)
 4005afc:	d9c00215 	stw	r7,8(sp)
 4005b00:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4005b04:	d9400017 	ldw	r5,0(sp)
 4005b08:	d9800117 	ldw	r6,4(sp)
 4005b0c:	d9c00217 	ldw	r7,8(sp)
 4005b10:	103ff126 	beq	r2,zero,4005ad8 <__register_exitproc+0x40>
 4005b14:	80c05217 	ldw	r3,328(r16)
 4005b18:	10000115 	stw	zero,4(r2)
 4005b1c:	10c00015 	stw	r3,0(r2)
 4005b20:	80805215 	stw	r2,328(r16)
 4005b24:	10006215 	stw	zero,392(r2)
 4005b28:	10006315 	stw	zero,396(r2)
 4005b2c:	10c00117 	ldw	r3,4(r2)
 4005b30:	88000d1e 	bne	r17,zero,4005b68 <__register_exitproc+0xd0>
 4005b34:	19000084 	addi	r4,r3,2
 4005b38:	2109883a 	add	r4,r4,r4
 4005b3c:	18c00044 	addi	r3,r3,1
 4005b40:	2109883a 	add	r4,r4,r4
 4005b44:	1109883a 	add	r4,r2,r4
 4005b48:	10c00115 	stw	r3,4(r2)
 4005b4c:	0005883a 	mov	r2,zero
 4005b50:	21400015 	stw	r5,0(r4)
 4005b54:	dfc00517 	ldw	ra,20(sp)
 4005b58:	dc400417 	ldw	r17,16(sp)
 4005b5c:	dc000317 	ldw	r16,12(sp)
 4005b60:	dec00604 	addi	sp,sp,24
 4005b64:	f800283a 	ret
 4005b68:	02400044 	movi	r9,1
 4005b6c:	12806217 	ldw	r10,392(r2)
 4005b70:	48d2983a 	sll	r9,r9,r3
 4005b74:	19000804 	addi	r4,r3,32
 4005b78:	18d1883a 	add	r8,r3,r3
 4005b7c:	2109883a 	add	r4,r4,r4
 4005b80:	4211883a 	add	r8,r8,r8
 4005b84:	2109883a 	add	r4,r4,r4
 4005b88:	1109883a 	add	r4,r2,r4
 4005b8c:	1211883a 	add	r8,r2,r8
 4005b90:	5254b03a 	or	r10,r10,r9
 4005b94:	21c02215 	stw	r7,136(r4)
 4005b98:	41802215 	stw	r6,136(r8)
 4005b9c:	12806215 	stw	r10,392(r2)
 4005ba0:	01000084 	movi	r4,2
 4005ba4:	893fe31e 	bne	r17,r4,4005b34 <__register_exitproc+0x9c>
 4005ba8:	11006317 	ldw	r4,396(r2)
 4005bac:	2252b03a 	or	r9,r4,r9
 4005bb0:	12406315 	stw	r9,396(r2)
 4005bb4:	003fdf06 	br	4005b34 <__register_exitproc+0x9c>
 4005bb8:	00810074 	movhi	r2,1025
 4005bbc:	10a55804 	addi	r2,r2,-27296
 4005bc0:	80805215 	stw	r2,328(r16)
 4005bc4:	003fbe06 	br	4005ac0 <__register_exitproc+0x28>

04005bc8 <__call_exitprocs>:
 4005bc8:	00810034 	movhi	r2,1024
 4005bcc:	109e3304 	addi	r2,r2,30924
 4005bd0:	10800017 	ldw	r2,0(r2)
 4005bd4:	defff304 	addi	sp,sp,-52
 4005bd8:	df000b15 	stw	fp,44(sp)
 4005bdc:	d8800015 	stw	r2,0(sp)
 4005be0:	10805204 	addi	r2,r2,328
 4005be4:	dd400815 	stw	r21,32(sp)
 4005be8:	dfc00c15 	stw	ra,48(sp)
 4005bec:	ddc00a15 	stw	r23,40(sp)
 4005bf0:	dd800915 	stw	r22,36(sp)
 4005bf4:	dd000715 	stw	r20,28(sp)
 4005bf8:	dcc00615 	stw	r19,24(sp)
 4005bfc:	dc800515 	stw	r18,20(sp)
 4005c00:	dc400415 	stw	r17,16(sp)
 4005c04:	dc000315 	stw	r16,12(sp)
 4005c08:	d9000115 	stw	r4,4(sp)
 4005c0c:	2839883a 	mov	fp,r5
 4005c10:	d8800215 	stw	r2,8(sp)
 4005c14:	057fffc4 	movi	r21,-1
 4005c18:	d8800017 	ldw	r2,0(sp)
 4005c1c:	ddc00217 	ldw	r23,8(sp)
 4005c20:	14805217 	ldw	r18,328(r2)
 4005c24:	90001726 	beq	r18,zero,4005c84 <__call_exitprocs+0xbc>
 4005c28:	94400117 	ldw	r17,4(r18)
 4005c2c:	8c3fffc4 	addi	r16,r17,-1
 4005c30:	80001116 	blt	r16,zero,4005c78 <__call_exitprocs+0xb0>
 4005c34:	8c400044 	addi	r17,r17,1
 4005c38:	8427883a 	add	r19,r16,r16
 4005c3c:	8c63883a 	add	r17,r17,r17
 4005c40:	95802204 	addi	r22,r18,136
 4005c44:	9ce7883a 	add	r19,r19,r19
 4005c48:	8c63883a 	add	r17,r17,r17
 4005c4c:	b4e7883a 	add	r19,r22,r19
 4005c50:	9463883a 	add	r17,r18,r17
 4005c54:	e0001726 	beq	fp,zero,4005cb4 <__call_exitprocs+0xec>
 4005c58:	8c87c83a 	sub	r3,r17,r18
 4005c5c:	b0c7883a 	add	r3,r22,r3
 4005c60:	18c01e17 	ldw	r3,120(r3)
 4005c64:	1f001326 	beq	r3,fp,4005cb4 <__call_exitprocs+0xec>
 4005c68:	843fffc4 	addi	r16,r16,-1
 4005c6c:	9cffff04 	addi	r19,r19,-4
 4005c70:	8c7fff04 	addi	r17,r17,-4
 4005c74:	857ff71e 	bne	r16,r21,4005c54 <__call_exitprocs+0x8c>
 4005c78:	00800034 	movhi	r2,0
 4005c7c:	10800004 	addi	r2,r2,0
 4005c80:	10002a1e 	bne	r2,zero,4005d2c <__call_exitprocs+0x164>
 4005c84:	dfc00c17 	ldw	ra,48(sp)
 4005c88:	df000b17 	ldw	fp,44(sp)
 4005c8c:	ddc00a17 	ldw	r23,40(sp)
 4005c90:	dd800917 	ldw	r22,36(sp)
 4005c94:	dd400817 	ldw	r21,32(sp)
 4005c98:	dd000717 	ldw	r20,28(sp)
 4005c9c:	dcc00617 	ldw	r19,24(sp)
 4005ca0:	dc800517 	ldw	r18,20(sp)
 4005ca4:	dc400417 	ldw	r17,16(sp)
 4005ca8:	dc000317 	ldw	r16,12(sp)
 4005cac:	dec00d04 	addi	sp,sp,52
 4005cb0:	f800283a 	ret
 4005cb4:	91000117 	ldw	r4,4(r18)
 4005cb8:	88c00017 	ldw	r3,0(r17)
 4005cbc:	213fffc4 	addi	r4,r4,-1
 4005cc0:	24001526 	beq	r4,r16,4005d18 <__call_exitprocs+0x150>
 4005cc4:	88000015 	stw	zero,0(r17)
 4005cc8:	183fe726 	beq	r3,zero,4005c68 <__call_exitprocs+0xa0>
 4005ccc:	00800044 	movi	r2,1
 4005cd0:	1408983a 	sll	r4,r2,r16
 4005cd4:	91406217 	ldw	r5,392(r18)
 4005cd8:	95000117 	ldw	r20,4(r18)
 4005cdc:	214a703a 	and	r5,r4,r5
 4005ce0:	28000b26 	beq	r5,zero,4005d10 <__call_exitprocs+0x148>
 4005ce4:	91406317 	ldw	r5,396(r18)
 4005ce8:	2148703a 	and	r4,r4,r5
 4005cec:	20000c1e 	bne	r4,zero,4005d20 <__call_exitprocs+0x158>
 4005cf0:	99400017 	ldw	r5,0(r19)
 4005cf4:	d9000117 	ldw	r4,4(sp)
 4005cf8:	183ee83a 	callr	r3
 4005cfc:	90c00117 	ldw	r3,4(r18)
 4005d00:	1d3fc51e 	bne	r3,r20,4005c18 <__call_exitprocs+0x50>
 4005d04:	b8c00017 	ldw	r3,0(r23)
 4005d08:	1cbfd726 	beq	r3,r18,4005c68 <__call_exitprocs+0xa0>
 4005d0c:	003fc206 	br	4005c18 <__call_exitprocs+0x50>
 4005d10:	183ee83a 	callr	r3
 4005d14:	003ff906 	br	4005cfc <__call_exitprocs+0x134>
 4005d18:	94000115 	stw	r16,4(r18)
 4005d1c:	003fea06 	br	4005cc8 <__call_exitprocs+0x100>
 4005d20:	99000017 	ldw	r4,0(r19)
 4005d24:	183ee83a 	callr	r3
 4005d28:	003ff406 	br	4005cfc <__call_exitprocs+0x134>
 4005d2c:	90c00117 	ldw	r3,4(r18)
 4005d30:	1800071e 	bne	r3,zero,4005d50 <__call_exitprocs+0x188>
 4005d34:	90c00017 	ldw	r3,0(r18)
 4005d38:	18000926 	beq	r3,zero,4005d60 <__call_exitprocs+0x198>
 4005d3c:	9009883a 	mov	r4,r18
 4005d40:	b8c00015 	stw	r3,0(r23)
 4005d44:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4005d48:	bc800017 	ldw	r18,0(r23)
 4005d4c:	003fb506 	br	4005c24 <__call_exitprocs+0x5c>
 4005d50:	90c00017 	ldw	r3,0(r18)
 4005d54:	902f883a 	mov	r23,r18
 4005d58:	1825883a 	mov	r18,r3
 4005d5c:	003fb106 	br	4005c24 <__call_exitprocs+0x5c>
 4005d60:	0007883a 	mov	r3,zero
 4005d64:	003ffb06 	br	4005d54 <__call_exitprocs+0x18c>

04005d68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005d68:	defffc04 	addi	sp,sp,-16
 4005d6c:	df000315 	stw	fp,12(sp)
 4005d70:	df000304 	addi	fp,sp,12
 4005d74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4005d78:	0001883a 	nop
 4005d7c:	e0bfff17 	ldw	r2,-4(fp)
 4005d80:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4005d84:	e0bffd17 	ldw	r2,-12(fp)
 4005d88:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005d8c:	e0bffe17 	ldw	r2,-8(fp)
 4005d90:	10000226 	beq	r2,zero,4005d9c <_exit+0x34>
    ALT_SIM_FAIL();
 4005d94:	002af070 	cmpltui	zero,zero,43969
 4005d98:	00000106 	br	4005da0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 4005d9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4005da0:	003fff06 	br	4005da0 <_exit+0x38>
