
dds2.elf:     file format elf32-littlenios2
dds2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00002ff0 memsz 0x00002ff0 flags r-x
    LOAD off    0x00004010 vaddr 0x04003010 paddr 0x04004714 align 2**12
         filesz 0x00001704 memsz 0x00001704 flags rw-
    LOAD off    0x00005e18 vaddr 0x04005e18 paddr 0x04005e18 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002e1c  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  04002fd4  04002fd4  00003fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001704  04003010  04004714  00004010  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  04005e18  04005e18  00005e18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000630  00000000  00000000  00005738  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008c18  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002f2f  00000000  00000000  0000e980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000313f  00000000  00000000  000118af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a20  00000000  00000000  000149f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000017f6  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000011fa  00000000  00000000  00016c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00017e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00017e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00019cd9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00019cdc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00019cdf  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00019ce0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00019ce1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00019ce5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00019ce9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00019ced  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00019cf1  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00019cf5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00019cf9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001b  00000000  00000000  00019cfc  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003c737  00000000  00000000  00019d17  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04002fd4 l    d  .rodata	00000000 .rodata
04003010 l    d  .rwdata	00000000 .rwdata
04005e18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../dds2_bsp//obj/HAL/src/crt0.o
04000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
040003b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400051c l     F .text	00000038 alt_dev_reg
04003010 l     O .rwdata	00001060 jtag_uart_0
04004070 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400082c l     F .text	00000204 altera_avalon_jtag_uart_irq
04000a30 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400106c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
04001320 l     F .text	00000098 altera_avalon_uart_irq
040013b8 l     F .text	000000d8 altera_avalon_uart_rxirq
04001490 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04001620 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
04001874 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04001bac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001d08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04001d34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040021d4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400230c l     F .text	00000050 alt_get_errno
0400235c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
040042dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
040004a4 g     F .text	00000078 alt_main
04005e34 g     O .bss	00000100 alt_irq
04004714 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04005e30 g     O .bss	00000004 errno
04005e1c g     O .bss	00000004 alt_argv
0400c6dc g       *ABS*	00000000 _gp
0400415c g     O .rwdata	00000180 alt_fd_list
04002798 g     F .text	00000090 alt_find_dev
04002b44 g     F .text	000000f8 memcpy
04002294 g     F .text	00000078 alt_io_redirect
04002fd4 g       *ABS*	00000000 __DTOR_END__
04000c30 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
040029f0 g     F .text	0000008c alt_icache_flush
040046f8 g     O .rwdata	00000004 alt_max_fd
0400470c g     O .rwdata	00000004 _global_impure_ptr
040060c4 g       *ABS*	00000000 __bss_end
040020e4 g     F .text	000000f0 alt_iic_isr_register
04002674 g     F .text	00000104 alt_tick
04001278 g     F .text	000000a8 altera_avalon_uart_init
04002098 g     F .text	0000004c alt_ic_irq_enabled
040025dc g     F .text	00000098 alt_alarm_stop
04005e24 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
04004134 g     O .rwdata	00000028 alt_dev_null
04001cc4 g     F .text	00000044 alt_dcache_flush_all
04004714 g       *ABS*	00000000 __ram_rwdata_end
040046f0 g     O .rwdata	00000008 alt_dev_list
04003010 g       *ABS*	00000000 __ram_rodata_end
040060c4 g       *ABS*	00000000 end
040018c4 g     F .text	000001a8 altera_avalon_uart_write
0400076c g     F .text	000000c0 altera_avalon_jtag_uart_init
04002fd4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040010e0 g     F .text	00000088 alt_avalon_timer_sc_init
040011c8 g     F .text	00000060 altera_avalon_uart_write_fd
04001228 g     F .text	00000050 altera_avalon_uart_close_fd
04000e48 g     F .text	00000224 altera_avalon_jtag_uart_write
04002df8 g     F .text	000001a0 __call_exitprocs
040001b8 g     F .text	0000004c _start
04005e28 g     O .bss	00000004 _alt_tick_rate
04005e2c g     O .bss	00000004 _alt_nticks
04000588 g     F .text	00000080 alt_sys_init
04002cc8 g     F .text	00000130 __register_exitproc
04000ad4 g     F .text	00000068 altera_avalon_jtag_uart_close
04003010 g       *ABS*	00000000 __ram_rwdata_start
04002fd4 g       *ABS*	00000000 __ram_rodata_start
04000608 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400293c g     F .text	000000b4 alt_get_fd
04002ac8 g     F .text	0000007c memcmp
040006c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040060c4 g       *ABS*	00000000 __alt_stack_base
04000718 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002828 g     F .text	00000114 alt_find_file
04001d84 g     F .text	000000a0 alt_dev_llist_insert
04005e18 g       *ABS*	00000000 __bss_start
04000264 g     F .text	00000154 main
04005e20 g     O .bss	00000004 alt_envp
04000668 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04005f34 g     O .bss	00000190 _atexit0
040046fc g     O .rwdata	00000004 alt_errno
040046dc g     O .rwdata	00000006 fore_txdata
04002fd4 g       *ABS*	00000000 __CTOR_END__
04002fd4 g       *ABS*	00000000 __flash_rodata_start
04002fd4 g       *ABS*	00000000 __DTOR_LIST__
04000204 g     F .text	00000060 delay
04000554 g     F .text	00000034 alt_irq_init
0400257c g     F .text	00000060 alt_release_fd
04002a7c g     F .text	00000014 atexit
04004710 g     O .rwdata	00000004 _impure_ptr
04005e18 g     O .bss	00000004 alt_argc
04001e80 g     F .text	0000005c _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040046e8 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04001f0c g     F .text	00000050 alt_ic_isr_register
04004714 g       *ABS*	00000000 _edata
04001168 g     F .text	00000060 altera_avalon_uart_read_fd
040060c4 g       *ABS*	00000000 _end
040001b8 g       *ABS*	00000000 __ram_exceptions_end
04000b3c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
040046e2 g     O .rwdata	00000006 latter_txdata
04001ff8 g     F .text	000000a0 alt_ic_irq_disable
04002778 g     F .text	00000020 altera_nios2_qsys_irq_init
04002a90 g     F .text	00000038 exit
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040015cc g     F .text	00000054 altera_avalon_uart_close
04002f98 g     F .text	0000003c _exit
04001a6c g     F .text	00000140 alt_alarm_start
04002c3c g     F .text	0000008c strlen
04002428 g     F .text	00000154 open
04001edc g     F .text	00000030 alt_icache_flush_all
04004700 g     O .rwdata	00000004 alt_priority_mask
04001f5c g     F .text	0000009c alt_ic_irq_enable
04001670 g     F .text	00000204 altera_avalon_uart_read
04004704 g     O .rwdata	00000008 alt_alarm_list
04001e24 g     F .text	0000005c _do_ctors
04001bfc g     F .text	000000c8 close
04000424 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406e14 	ori	at,at,440
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10034 	movhi	r3,1024
 4000130:	18d78d04 	addi	r3,r3,24116
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010034 	movhi	r4,1024
 4000148:	21178d04 	addi	r4,r4,24116
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001d4:	d6b1b714 	ori	gp,gp,50908
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001dc:	10978614 	ori	r2,r2,24088

    movhi r3, %hi(__bss_end)
 40001e0:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001e4:	18d83114 	ori	r3,r3,24772

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f8:	40004240 	call	4000424 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001fc:	40004a40 	call	40004a4 <alt_main>

04000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000200:	003fff06 	br	4000200 <alt_after_alt_main>

04000204 <delay>:

char fore_txdata[6] = {'a','c','e','m','o'};
char latter_txdata[6] = {'b','d','f','n','p'};

void delay(int z)
{
 4000204:	defffc04 	addi	sp,sp,-16
 4000208:	df000315 	stw	fp,12(sp)
 400020c:	df000304 	addi	fp,sp,12
 4000210:	e13fff15 	stw	r4,-4(fp)
	int x,y;
	for(x = z;x>0;x--)
 4000214:	e0bfff17 	ldw	r2,-4(fp)
 4000218:	e0bffd15 	stw	r2,-12(fp)
 400021c:	00000b06 	br	400024c <delay+0x48>
	for(y = 110;y>0;y--);
 4000220:	00801b84 	movi	r2,110
 4000224:	e0bffe15 	stw	r2,-8(fp)
 4000228:	00000306 	br	4000238 <delay+0x34>
 400022c:	e0bffe17 	ldw	r2,-8(fp)
 4000230:	10bfffc4 	addi	r2,r2,-1
 4000234:	e0bffe15 	stw	r2,-8(fp)
 4000238:	e0bffe17 	ldw	r2,-8(fp)
 400023c:	00bffb16 	blt	zero,r2,400022c <delay+0x28>
char latter_txdata[6] = {'b','d','f','n','p'};

void delay(int z)
{
	int x,y;
	for(x = z;x>0;x--)
 4000240:	e0bffd17 	ldw	r2,-12(fp)
 4000244:	10bfffc4 	addi	r2,r2,-1
 4000248:	e0bffd15 	stw	r2,-12(fp)
 400024c:	e0bffd17 	ldw	r2,-12(fp)
 4000250:	00bff316 	blt	zero,r2,4000220 <delay+0x1c>
	for(y = 110;y>0;y--);
}
 4000254:	e037883a 	mov	sp,fp
 4000258:	df000017 	ldw	fp,0(sp)
 400025c:	dec00104 	addi	sp,sp,4
 4000260:	f800283a 	ret

04000264 <main>:



int main()
{
 4000264:	defffd04 	addi	sp,sp,-12
 4000268:	df000215 	stw	fp,8(sp)
 400026c:	df000204 	addi	fp,sp,8
  alt_u8 dds_data2;
  alt_u8 dds_data3;

  while(1)
  {
	  dds_data = IORD_ALTERA_AVALON_PIO_DATA(DDS_DATA_BASE);
 4000270:	00820034 	movhi	r2,2048
 4000274:	10841404 	addi	r2,r2,4176
 4000278:	10800037 	ldwio	r2,0(r2)
 400027c:	e0bffe15 	stw	r2,-8(fp)
//	  delay(10000);
//	  printf("dds_data = %d\n",dds_data);

	  dds_data0 = dds_data & 255;
 4000280:	e0bffe17 	ldw	r2,-8(fp)
 4000284:	e0bfff05 	stb	r2,-4(fp)
	  dds_data1 = (dds_data >> 8) &255;
 4000288:	e0bffe17 	ldw	r2,-8(fp)
 400028c:	1005d23a 	srai	r2,r2,8
 4000290:	e0bfff45 	stb	r2,-3(fp)
	  dds_data2 = (dds_data>>16) &255;
 4000294:	e0bffe17 	ldw	r2,-8(fp)
 4000298:	1005d43a 	srai	r2,r2,16
 400029c:	e0bfff85 	stb	r2,-2(fp)
	  dds_data3 = (dds_data>>24) &255;
 40002a0:	e0bffe17 	ldw	r2,-8(fp)
 40002a4:	1004d63a 	srli	r2,r2,24
 40002a8:	e0bfffc5 	stb	r2,-1(fp)

	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40002ac:	0001883a 	nop
 40002b0:	00820034 	movhi	r2,2048
 40002b4:	10840204 	addi	r2,r2,4104
 40002b8:	10800037 	ldwio	r2,0(r2)
 40002bc:	1080100c 	andi	r2,r2,64
 40002c0:	103ffb26 	beq	r2,zero,40002b0 <main+0x4c>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, fore_txdata[0]);
 40002c4:	d0a00003 	ldbu	r2,-32768(gp)
 40002c8:	10c03fcc 	andi	r3,r2,255
 40002cc:	18c0201c 	xori	r3,r3,128
 40002d0:	18ffe004 	addi	r3,r3,-128
 40002d4:	00820034 	movhi	r2,2048
 40002d8:	10840104 	addi	r2,r2,4100
 40002dc:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 40002e0:	0001883a 	nop
 40002e4:	00820034 	movhi	r2,2048
 40002e8:	10840204 	addi	r2,r2,4104
 40002ec:	10800037 	ldwio	r2,0(r2)
 40002f0:	1080100c 	andi	r2,r2,64
 40002f4:	103ffb26 	beq	r2,zero,40002e4 <main+0x80>
	  	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, dds_data0);
 40002f8:	e0ffff03 	ldbu	r3,-4(fp)
 40002fc:	00820034 	movhi	r2,2048
 4000300:	10840104 	addi	r2,r2,4100
 4000304:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000308:	0001883a 	nop
 400030c:	00820034 	movhi	r2,2048
 4000310:	10840204 	addi	r2,r2,4104
 4000314:	10800037 	ldwio	r2,0(r2)
 4000318:	1080100c 	andi	r2,r2,64
 400031c:	103ffb26 	beq	r2,zero,400030c <main+0xa8>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, dds_data1);
 4000320:	e0ffff43 	ldbu	r3,-3(fp)
 4000324:	00820034 	movhi	r2,2048
 4000328:	10840104 	addi	r2,r2,4100
 400032c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000330:	0001883a 	nop
 4000334:	00820034 	movhi	r2,2048
 4000338:	10840204 	addi	r2,r2,4104
 400033c:	10800037 	ldwio	r2,0(r2)
 4000340:	1080100c 	andi	r2,r2,64
 4000344:	103ffb26 	beq	r2,zero,4000334 <main+0xd0>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, dds_data2);
 4000348:	e0ffff83 	ldbu	r3,-2(fp)
 400034c:	00820034 	movhi	r2,2048
 4000350:	10840104 	addi	r2,r2,4100
 4000354:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000358:	0001883a 	nop
 400035c:	00820034 	movhi	r2,2048
 4000360:	10840204 	addi	r2,r2,4104
 4000364:	10800037 	ldwio	r2,0(r2)
 4000368:	1080100c 	andi	r2,r2,64
 400036c:	103ffb26 	beq	r2,zero,400035c <main+0xf8>
	  	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, dds_data3);
 4000370:	e0ffffc3 	ldbu	r3,-1(fp)
 4000374:	00820034 	movhi	r2,2048
 4000378:	10840104 	addi	r2,r2,4100
 400037c:	10c00035 	stwio	r3,0(r2)
	  while(!(ALTERA_AVALON_UART_STATUS_TRDY_MSK & IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)));
 4000380:	0001883a 	nop
 4000384:	00820034 	movhi	r2,2048
 4000388:	10840204 	addi	r2,r2,4104
 400038c:	10800037 	ldwio	r2,0(r2)
 4000390:	1080100c 	andi	r2,r2,64
 4000394:	103ffb26 	beq	r2,zero,4000384 <main+0x120>
	  IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, latter_txdata[0]);
 4000398:	d0a00183 	ldbu	r2,-32762(gp)
 400039c:	10c03fcc 	andi	r3,r2,255
 40003a0:	18c0201c 	xori	r3,r3,128
 40003a4:	18ffe004 	addi	r3,r3,-128
 40003a8:	00820034 	movhi	r2,2048
 40003ac:	10840104 	addi	r2,r2,4100
 40003b0:	10c00035 	stwio	r3,0(r2)
  }
 40003b4:	003fae06 	br	4000270 <main+0xc>

040003b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40003b8:	defffc04 	addi	sp,sp,-16
 40003bc:	df000315 	stw	fp,12(sp)
 40003c0:	df000304 	addi	fp,sp,12
 40003c4:	e13ffd15 	stw	r4,-12(fp)
 40003c8:	e17ffe15 	stw	r5,-8(fp)
 40003cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40003d0:	e0fffe17 	ldw	r3,-8(fp)
 40003d4:	e0bffd17 	ldw	r2,-12(fp)
 40003d8:	18800e26 	beq	r3,r2,4000414 <alt_load_section+0x5c>
  {
    while( to != end )
 40003dc:	00000a06 	br	4000408 <alt_load_section+0x50>
    {
      *to++ = *from++;
 40003e0:	e0bffd17 	ldw	r2,-12(fp)
 40003e4:	10c00017 	ldw	r3,0(r2)
 40003e8:	e0bffe17 	ldw	r2,-8(fp)
 40003ec:	10c00015 	stw	r3,0(r2)
 40003f0:	e0bffe17 	ldw	r2,-8(fp)
 40003f4:	10800104 	addi	r2,r2,4
 40003f8:	e0bffe15 	stw	r2,-8(fp)
 40003fc:	e0bffd17 	ldw	r2,-12(fp)
 4000400:	10800104 	addi	r2,r2,4
 4000404:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000408:	e0fffe17 	ldw	r3,-8(fp)
 400040c:	e0bfff17 	ldw	r2,-4(fp)
 4000410:	18bff31e 	bne	r3,r2,40003e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4000414:	e037883a 	mov	sp,fp
 4000418:	df000017 	ldw	fp,0(sp)
 400041c:	dec00104 	addi	sp,sp,4
 4000420:	f800283a 	ret

04000424 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000424:	defffe04 	addi	sp,sp,-8
 4000428:	dfc00115 	stw	ra,4(sp)
 400042c:	df000015 	stw	fp,0(sp)
 4000430:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000434:	01010034 	movhi	r4,1024
 4000438:	2111c504 	addi	r4,r4,18196
 400043c:	01410034 	movhi	r5,1024
 4000440:	294c0404 	addi	r5,r5,12304
 4000444:	01810034 	movhi	r6,1024
 4000448:	3191c504 	addi	r6,r6,18196
 400044c:	40003b80 	call	40003b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000450:	01010034 	movhi	r4,1024
 4000454:	21000804 	addi	r4,r4,32
 4000458:	01410034 	movhi	r5,1024
 400045c:	29400804 	addi	r5,r5,32
 4000460:	01810034 	movhi	r6,1024
 4000464:	31806e04 	addi	r6,r6,440
 4000468:	40003b80 	call	40003b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400046c:	01010034 	movhi	r4,1024
 4000470:	210bf504 	addi	r4,r4,12244
 4000474:	01410034 	movhi	r5,1024
 4000478:	294bf504 	addi	r5,r5,12244
 400047c:	01810034 	movhi	r6,1024
 4000480:	318c0404 	addi	r6,r6,12304
 4000484:	40003b80 	call	40003b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000488:	4001cc40 	call	4001cc4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400048c:	4001edc0 	call	4001edc <alt_icache_flush_all>
}
 4000490:	e037883a 	mov	sp,fp
 4000494:	dfc00117 	ldw	ra,4(sp)
 4000498:	df000017 	ldw	fp,0(sp)
 400049c:	dec00204 	addi	sp,sp,8
 40004a0:	f800283a 	ret

040004a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40004a4:	defffd04 	addi	sp,sp,-12
 40004a8:	dfc00215 	stw	ra,8(sp)
 40004ac:	df000115 	stw	fp,4(sp)
 40004b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40004b4:	0009883a 	mov	r4,zero
 40004b8:	40005540 	call	4000554 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40004bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40004c0:	40005880 	call	4000588 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40004c4:	01010034 	movhi	r4,1024
 40004c8:	210bf504 	addi	r4,r4,12244
 40004cc:	01410034 	movhi	r5,1024
 40004d0:	294bf504 	addi	r5,r5,12244
 40004d4:	01810034 	movhi	r6,1024
 40004d8:	318bf504 	addi	r6,r6,12244
 40004dc:	40022940 	call	4002294 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40004e0:	4001e240 	call	4001e24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40004e4:	01010034 	movhi	r4,1024
 40004e8:	2107a004 	addi	r4,r4,7808
 40004ec:	4002a7c0 	call	4002a7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40004f0:	d125cf17 	ldw	r4,-26820(gp)
 40004f4:	d0e5d017 	ldw	r3,-26816(gp)
 40004f8:	d0a5d117 	ldw	r2,-26812(gp)
 40004fc:	180b883a 	mov	r5,r3
 4000500:	100d883a 	mov	r6,r2
 4000504:	40002640 	call	4000264 <main>
 4000508:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400050c:	01000044 	movi	r4,1
 4000510:	4001bfc0 	call	4001bfc <close>
  exit (result);
 4000514:	e13fff17 	ldw	r4,-4(fp)
 4000518:	4002a900 	call	4002a90 <exit>

0400051c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400051c:	defffd04 	addi	sp,sp,-12
 4000520:	dfc00215 	stw	ra,8(sp)
 4000524:	df000115 	stw	fp,4(sp)
 4000528:	df000104 	addi	fp,sp,4
 400052c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000530:	e13fff17 	ldw	r4,-4(fp)
 4000534:	01410034 	movhi	r5,1024
 4000538:	2951bc04 	addi	r5,r5,18160
 400053c:	4001d840 	call	4001d84 <alt_dev_llist_insert>
}
 4000540:	e037883a 	mov	sp,fp
 4000544:	dfc00117 	ldw	ra,4(sp)
 4000548:	df000017 	ldw	fp,0(sp)
 400054c:	dec00204 	addi	sp,sp,8
 4000550:	f800283a 	ret

04000554 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000554:	defffd04 	addi	sp,sp,-12
 4000558:	dfc00215 	stw	ra,8(sp)
 400055c:	df000115 	stw	fp,4(sp)
 4000560:	df000104 	addi	fp,sp,4
 4000564:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 4000568:	40027780 	call	4002778 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400056c:	00800044 	movi	r2,1
 4000570:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000574:	e037883a 	mov	sp,fp
 4000578:	dfc00117 	ldw	ra,4(sp)
 400057c:	df000017 	ldw	fp,0(sp)
 4000580:	dec00204 	addi	sp,sp,8
 4000584:	f800283a 	ret

04000588 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000588:	defffe04 	addi	sp,sp,-8
 400058c:	dfc00115 	stw	ra,4(sp)
 4000590:	df000015 	stw	fp,0(sp)
 4000594:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_10MS, timer_10ms);
 4000598:	01020034 	movhi	r4,2048
 400059c:	21040804 	addi	r4,r4,4128
 40005a0:	000b883a 	mov	r5,zero
 40005a4:	000d883a 	mov	r6,zero
 40005a8:	01c01904 	movi	r7,100
 40005ac:	40010e00 	call	40010e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40005b0:	01010034 	movhi	r4,1024
 40005b4:	210c0e04 	addi	r4,r4,12344
 40005b8:	000b883a 	mov	r5,zero
 40005bc:	01800044 	movi	r6,1
 40005c0:	400076c0 	call	400076c <altera_avalon_jtag_uart_init>
 40005c4:	01010034 	movhi	r4,1024
 40005c8:	210c0404 	addi	r4,r4,12304
 40005cc:	400051c0 	call	400051c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
 40005d0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 40005d4:	01010034 	movhi	r4,1024
 40005d8:	21102604 	addi	r4,r4,16536
 40005dc:	000b883a 	mov	r5,zero
 40005e0:	01800084 	movi	r6,2
 40005e4:	40012780 	call	4001278 <altera_avalon_uart_init>
 40005e8:	01010034 	movhi	r4,1024
 40005ec:	21101c04 	addi	r4,r4,16496
 40005f0:	400051c0 	call	400051c <alt_dev_reg>
}
 40005f4:	e037883a 	mov	sp,fp
 40005f8:	dfc00117 	ldw	ra,4(sp)
 40005fc:	df000017 	ldw	fp,0(sp)
 4000600:	dec00204 	addi	sp,sp,8
 4000604:	f800283a 	ret

04000608 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4000608:	defffa04 	addi	sp,sp,-24
 400060c:	dfc00515 	stw	ra,20(sp)
 4000610:	df000415 	stw	fp,16(sp)
 4000614:	df000404 	addi	fp,sp,16
 4000618:	e13ffd15 	stw	r4,-12(fp)
 400061c:	e17ffe15 	stw	r5,-8(fp)
 4000620:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000624:	e0bffd17 	ldw	r2,-12(fp)
 4000628:	10800017 	ldw	r2,0(r2)
 400062c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4000630:	e0bffc17 	ldw	r2,-16(fp)
 4000634:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4000638:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400063c:	10800217 	ldw	r2,8(r2)
 4000640:	1809883a 	mov	r4,r3
 4000644:	e17ffe17 	ldw	r5,-8(fp)
 4000648:	e1bfff17 	ldw	r6,-4(fp)
 400064c:	100f883a 	mov	r7,r2
 4000650:	4000c300 	call	4000c30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4000654:	e037883a 	mov	sp,fp
 4000658:	dfc00117 	ldw	ra,4(sp)
 400065c:	df000017 	ldw	fp,0(sp)
 4000660:	dec00204 	addi	sp,sp,8
 4000664:	f800283a 	ret

04000668 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4000668:	defffa04 	addi	sp,sp,-24
 400066c:	dfc00515 	stw	ra,20(sp)
 4000670:	df000415 	stw	fp,16(sp)
 4000674:	df000404 	addi	fp,sp,16
 4000678:	e13ffd15 	stw	r4,-12(fp)
 400067c:	e17ffe15 	stw	r5,-8(fp)
 4000680:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4000684:	e0bffd17 	ldw	r2,-12(fp)
 4000688:	10800017 	ldw	r2,0(r2)
 400068c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4000690:	e0bffc17 	ldw	r2,-16(fp)
 4000694:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4000698:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400069c:	10800217 	ldw	r2,8(r2)
 40006a0:	1809883a 	mov	r4,r3
 40006a4:	e17ffe17 	ldw	r5,-8(fp)
 40006a8:	e1bfff17 	ldw	r6,-4(fp)
 40006ac:	100f883a 	mov	r7,r2
 40006b0:	4000e480 	call	4000e48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40006b4:	e037883a 	mov	sp,fp
 40006b8:	dfc00117 	ldw	ra,4(sp)
 40006bc:	df000017 	ldw	fp,0(sp)
 40006c0:	dec00204 	addi	sp,sp,8
 40006c4:	f800283a 	ret

040006c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40006c8:	defffc04 	addi	sp,sp,-16
 40006cc:	dfc00315 	stw	ra,12(sp)
 40006d0:	df000215 	stw	fp,8(sp)
 40006d4:	df000204 	addi	fp,sp,8
 40006d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40006dc:	e0bfff17 	ldw	r2,-4(fp)
 40006e0:	10800017 	ldw	r2,0(r2)
 40006e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40006e8:	e0bffe17 	ldw	r2,-8(fp)
 40006ec:	10c00a04 	addi	r3,r2,40
 40006f0:	e0bfff17 	ldw	r2,-4(fp)
 40006f4:	10800217 	ldw	r2,8(r2)
 40006f8:	1809883a 	mov	r4,r3
 40006fc:	100b883a 	mov	r5,r2
 4000700:	4000ad40 	call	4000ad4 <altera_avalon_jtag_uart_close>
}
 4000704:	e037883a 	mov	sp,fp
 4000708:	dfc00117 	ldw	ra,4(sp)
 400070c:	df000017 	ldw	fp,0(sp)
 4000710:	dec00204 	addi	sp,sp,8
 4000714:	f800283a 	ret

04000718 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4000718:	defffa04 	addi	sp,sp,-24
 400071c:	dfc00515 	stw	ra,20(sp)
 4000720:	df000415 	stw	fp,16(sp)
 4000724:	df000404 	addi	fp,sp,16
 4000728:	e13ffd15 	stw	r4,-12(fp)
 400072c:	e17ffe15 	stw	r5,-8(fp)
 4000730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4000734:	e0bffd17 	ldw	r2,-12(fp)
 4000738:	10800017 	ldw	r2,0(r2)
 400073c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4000740:	e0bffc17 	ldw	r2,-16(fp)
 4000744:	10800a04 	addi	r2,r2,40
 4000748:	1009883a 	mov	r4,r2
 400074c:	e17ffe17 	ldw	r5,-8(fp)
 4000750:	e1bfff17 	ldw	r6,-4(fp)
 4000754:	4000b3c0 	call	4000b3c <altera_avalon_jtag_uart_ioctl>
}
 4000758:	e037883a 	mov	sp,fp
 400075c:	dfc00117 	ldw	ra,4(sp)
 4000760:	df000017 	ldw	fp,0(sp)
 4000764:	dec00204 	addi	sp,sp,8
 4000768:	f800283a 	ret

0400076c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400076c:	defffa04 	addi	sp,sp,-24
 4000770:	dfc00515 	stw	ra,20(sp)
 4000774:	df000415 	stw	fp,16(sp)
 4000778:	df000404 	addi	fp,sp,16
 400077c:	e13ffd15 	stw	r4,-12(fp)
 4000780:	e17ffe15 	stw	r5,-8(fp)
 4000784:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000788:	e0bffd17 	ldw	r2,-12(fp)
 400078c:	00c00044 	movi	r3,1
 4000790:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4000794:	e0bffd17 	ldw	r2,-12(fp)
 4000798:	10800017 	ldw	r2,0(r2)
 400079c:	10800104 	addi	r2,r2,4
 40007a0:	e0fffd17 	ldw	r3,-12(fp)
 40007a4:	18c00817 	ldw	r3,32(r3)
 40007a8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40007ac:	e0fffe17 	ldw	r3,-8(fp)
 40007b0:	e0bfff17 	ldw	r2,-4(fp)
 40007b4:	d8000015 	stw	zero,0(sp)
 40007b8:	1809883a 	mov	r4,r3
 40007bc:	100b883a 	mov	r5,r2
 40007c0:	01810034 	movhi	r6,1024
 40007c4:	31820b04 	addi	r6,r6,2092
 40007c8:	e1fffd17 	ldw	r7,-12(fp)
 40007cc:	4001f0c0 	call	4001f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40007d0:	e0bffd17 	ldw	r2,-12(fp)
 40007d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40007d8:	e0bffd17 	ldw	r2,-12(fp)
 40007dc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40007e0:	00810034 	movhi	r2,1024
 40007e4:	10978a04 	addi	r2,r2,24104
 40007e8:	10800017 	ldw	r2,0(r2)
 40007ec:	1809883a 	mov	r4,r3
 40007f0:	100b883a 	mov	r5,r2
 40007f4:	01810034 	movhi	r6,1024
 40007f8:	31828c04 	addi	r6,r6,2608
 40007fc:	e1fffd17 	ldw	r7,-12(fp)
 4000800:	4001a6c0 	call	4001a6c <alt_alarm_start>
 4000804:	1000040e 	bge	r2,zero,4000818 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4000808:	e0bffd17 	ldw	r2,-12(fp)
 400080c:	00e00034 	movhi	r3,32768
 4000810:	18ffffc4 	addi	r3,r3,-1
 4000814:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4000818:	e037883a 	mov	sp,fp
 400081c:	dfc00117 	ldw	ra,4(sp)
 4000820:	df000017 	ldw	fp,0(sp)
 4000824:	dec00204 	addi	sp,sp,8
 4000828:	f800283a 	ret

0400082c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400082c:	defff804 	addi	sp,sp,-32
 4000830:	df000715 	stw	fp,28(sp)
 4000834:	df000704 	addi	fp,sp,28
 4000838:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400083c:	e0bfff17 	ldw	r2,-4(fp)
 4000840:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4000844:	e0bffb17 	ldw	r2,-20(fp)
 4000848:	10800017 	ldw	r2,0(r2)
 400084c:	e0bffc15 	stw	r2,-16(fp)
 4000850:	00000106 	br	4000858 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 4000854:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000858:	e0bffc17 	ldw	r2,-16(fp)
 400085c:	10800104 	addi	r2,r2,4
 4000860:	10800037 	ldwio	r2,0(r2)
 4000864:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4000868:	e0bffd17 	ldw	r2,-12(fp)
 400086c:	1080c00c 	andi	r2,r2,768
 4000870:	10006a26 	beq	r2,zero,4000a1c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4000874:	e0bffd17 	ldw	r2,-12(fp)
 4000878:	1080400c 	andi	r2,r2,256
 400087c:	10003326 	beq	r2,zero,400094c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4000880:	00800074 	movhi	r2,1
 4000884:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000888:	e0bffb17 	ldw	r2,-20(fp)
 400088c:	10800a17 	ldw	r2,40(r2)
 4000890:	10800044 	addi	r2,r2,1
 4000894:	1081ffcc 	andi	r2,r2,2047
 4000898:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400089c:	e0bffb17 	ldw	r2,-20(fp)
 40008a0:	10c00b17 	ldw	r3,44(r2)
 40008a4:	e0bffe17 	ldw	r2,-8(fp)
 40008a8:	18801426 	beq	r3,r2,40008fc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40008ac:	e0bffc17 	ldw	r2,-16(fp)
 40008b0:	10800037 	ldwio	r2,0(r2)
 40008b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40008b8:	e0bff917 	ldw	r2,-28(fp)
 40008bc:	10a0000c 	andi	r2,r2,32768
 40008c0:	10001026 	beq	r2,zero,4000904 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40008c4:	e0bffb17 	ldw	r2,-20(fp)
 40008c8:	10800a17 	ldw	r2,40(r2)
 40008cc:	e0fff917 	ldw	r3,-28(fp)
 40008d0:	e13ffb17 	ldw	r4,-20(fp)
 40008d4:	2085883a 	add	r2,r4,r2
 40008d8:	10800e04 	addi	r2,r2,56
 40008dc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40008e0:	e0bffb17 	ldw	r2,-20(fp)
 40008e4:	10800a17 	ldw	r2,40(r2)
 40008e8:	10800044 	addi	r2,r2,1
 40008ec:	10c1ffcc 	andi	r3,r2,2047
 40008f0:	e0bffb17 	ldw	r2,-20(fp)
 40008f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40008f8:	003fe306 	br	4000888 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40008fc:	0001883a 	nop
 4000900:	00000106 	br	4000908 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4000904:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4000908:	e0bff917 	ldw	r2,-28(fp)
 400090c:	10bfffec 	andhi	r2,r2,65535
 4000910:	10000e26 	beq	r2,zero,400094c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000914:	e0bffb17 	ldw	r2,-20(fp)
 4000918:	10c00817 	ldw	r3,32(r2)
 400091c:	00bfff84 	movi	r2,-2
 4000920:	1886703a 	and	r3,r3,r2
 4000924:	e0bffb17 	ldw	r2,-20(fp)
 4000928:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400092c:	e0bffc17 	ldw	r2,-16(fp)
 4000930:	10800104 	addi	r2,r2,4
 4000934:	e0fffb17 	ldw	r3,-20(fp)
 4000938:	18c00817 	ldw	r3,32(r3)
 400093c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000940:	e0bffc17 	ldw	r2,-16(fp)
 4000944:	10800104 	addi	r2,r2,4
 4000948:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400094c:	e0bffd17 	ldw	r2,-12(fp)
 4000950:	1080800c 	andi	r2,r2,512
 4000954:	103fbf26 	beq	r2,zero,4000854 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4000958:	e0bffd17 	ldw	r2,-12(fp)
 400095c:	1004d43a 	srli	r2,r2,16
 4000960:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4000964:	00001406 	br	40009b8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4000968:	e0bffc17 	ldw	r2,-16(fp)
 400096c:	e0fffb17 	ldw	r3,-20(fp)
 4000970:	18c00d17 	ldw	r3,52(r3)
 4000974:	e13ffb17 	ldw	r4,-20(fp)
 4000978:	20c7883a 	add	r3,r4,r3
 400097c:	18c20e04 	addi	r3,r3,2104
 4000980:	18c00003 	ldbu	r3,0(r3)
 4000984:	18c03fcc 	andi	r3,r3,255
 4000988:	18c0201c 	xori	r3,r3,128
 400098c:	18ffe004 	addi	r3,r3,-128
 4000990:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000994:	e0bffb17 	ldw	r2,-20(fp)
 4000998:	10800d17 	ldw	r2,52(r2)
 400099c:	10800044 	addi	r2,r2,1
 40009a0:	10c1ffcc 	andi	r3,r2,2047
 40009a4:	e0bffb17 	ldw	r2,-20(fp)
 40009a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40009ac:	e0bffa17 	ldw	r2,-24(fp)
 40009b0:	10bfffc4 	addi	r2,r2,-1
 40009b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40009b8:	e0bffa17 	ldw	r2,-24(fp)
 40009bc:	10000526 	beq	r2,zero,40009d4 <altera_avalon_jtag_uart_irq+0x1a8>
 40009c0:	e0bffb17 	ldw	r2,-20(fp)
 40009c4:	10c00d17 	ldw	r3,52(r2)
 40009c8:	e0bffb17 	ldw	r2,-20(fp)
 40009cc:	10800c17 	ldw	r2,48(r2)
 40009d0:	18bfe51e 	bne	r3,r2,4000968 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40009d4:	e0bffa17 	ldw	r2,-24(fp)
 40009d8:	103f9e26 	beq	r2,zero,4000854 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40009dc:	e0bffb17 	ldw	r2,-20(fp)
 40009e0:	10c00817 	ldw	r3,32(r2)
 40009e4:	00bfff44 	movi	r2,-3
 40009e8:	1886703a 	and	r3,r3,r2
 40009ec:	e0bffb17 	ldw	r2,-20(fp)
 40009f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40009f4:	e0bffb17 	ldw	r2,-20(fp)
 40009f8:	10800017 	ldw	r2,0(r2)
 40009fc:	10800104 	addi	r2,r2,4
 4000a00:	e0fffb17 	ldw	r3,-20(fp)
 4000a04:	18c00817 	ldw	r3,32(r3)
 4000a08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4000a0c:	e0bffc17 	ldw	r2,-16(fp)
 4000a10:	10800104 	addi	r2,r2,4
 4000a14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4000a18:	003f8e06 	br	4000854 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4000a1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4000a20:	e037883a 	mov	sp,fp
 4000a24:	df000017 	ldw	fp,0(sp)
 4000a28:	dec00104 	addi	sp,sp,4
 4000a2c:	f800283a 	ret

04000a30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4000a30:	defffc04 	addi	sp,sp,-16
 4000a34:	df000315 	stw	fp,12(sp)
 4000a38:	df000304 	addi	fp,sp,12
 4000a3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4000a40:	e0bfff17 	ldw	r2,-4(fp)
 4000a44:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4000a48:	e0bffd17 	ldw	r2,-12(fp)
 4000a4c:	10800017 	ldw	r2,0(r2)
 4000a50:	10800104 	addi	r2,r2,4
 4000a54:	10800037 	ldwio	r2,0(r2)
 4000a58:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4000a5c:	e0bffe17 	ldw	r2,-8(fp)
 4000a60:	1081000c 	andi	r2,r2,1024
 4000a64:	10000a26 	beq	r2,zero,4000a90 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4000a68:	e0bffd17 	ldw	r2,-12(fp)
 4000a6c:	10800017 	ldw	r2,0(r2)
 4000a70:	10800104 	addi	r2,r2,4
 4000a74:	e0fffd17 	ldw	r3,-12(fp)
 4000a78:	18c00817 	ldw	r3,32(r3)
 4000a7c:	18c10014 	ori	r3,r3,1024
 4000a80:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4000a84:	e0bffd17 	ldw	r2,-12(fp)
 4000a88:	10000915 	stw	zero,36(r2)
 4000a8c:	00000a06 	br	4000ab8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4000a90:	e0bffd17 	ldw	r2,-12(fp)
 4000a94:	10800917 	ldw	r2,36(r2)
 4000a98:	00e00034 	movhi	r3,32768
 4000a9c:	18ffff04 	addi	r3,r3,-4
 4000aa0:	18800536 	bltu	r3,r2,4000ab8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 4000aa4:	e0bffd17 	ldw	r2,-12(fp)
 4000aa8:	10800917 	ldw	r2,36(r2)
 4000aac:	10c00044 	addi	r3,r2,1
 4000ab0:	e0bffd17 	ldw	r2,-12(fp)
 4000ab4:	10c00915 	stw	r3,36(r2)
 4000ab8:	00810034 	movhi	r2,1024
 4000abc:	10978a04 	addi	r2,r2,24104
 4000ac0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4000ac4:	e037883a 	mov	sp,fp
 4000ac8:	df000017 	ldw	fp,0(sp)
 4000acc:	dec00104 	addi	sp,sp,4
 4000ad0:	f800283a 	ret

04000ad4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4000ad4:	defffd04 	addi	sp,sp,-12
 4000ad8:	df000215 	stw	fp,8(sp)
 4000adc:	df000204 	addi	fp,sp,8
 4000ae0:	e13ffe15 	stw	r4,-8(fp)
 4000ae4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000ae8:	00000506 	br	4000b00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4000aec:	e0bfff17 	ldw	r2,-4(fp)
 4000af0:	1090000c 	andi	r2,r2,16384
 4000af4:	10000226 	beq	r2,zero,4000b00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4000af8:	00bffd44 	movi	r2,-11
 4000afc:	00000b06 	br	4000b2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4000b00:	e0bffe17 	ldw	r2,-8(fp)
 4000b04:	10c00d17 	ldw	r3,52(r2)
 4000b08:	e0bffe17 	ldw	r2,-8(fp)
 4000b0c:	10800c17 	ldw	r2,48(r2)
 4000b10:	18800526 	beq	r3,r2,4000b28 <altera_avalon_jtag_uart_close+0x54>
 4000b14:	e0bffe17 	ldw	r2,-8(fp)
 4000b18:	10c00917 	ldw	r3,36(r2)
 4000b1c:	e0bffe17 	ldw	r2,-8(fp)
 4000b20:	10800117 	ldw	r2,4(r2)
 4000b24:	18bff136 	bltu	r3,r2,4000aec <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4000b28:	0005883a 	mov	r2,zero
}
 4000b2c:	e037883a 	mov	sp,fp
 4000b30:	df000017 	ldw	fp,0(sp)
 4000b34:	dec00104 	addi	sp,sp,4
 4000b38:	f800283a 	ret

04000b3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4000b3c:	defffa04 	addi	sp,sp,-24
 4000b40:	df000515 	stw	fp,20(sp)
 4000b44:	df000504 	addi	fp,sp,20
 4000b48:	e13ffd15 	stw	r4,-12(fp)
 4000b4c:	e17ffe15 	stw	r5,-8(fp)
 4000b50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4000b54:	00bff9c4 	movi	r2,-25
 4000b58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4000b5c:	e0bffe17 	ldw	r2,-8(fp)
 4000b60:	10da8060 	cmpeqi	r3,r2,27137
 4000b64:	1800031e 	bne	r3,zero,4000b74 <altera_avalon_jtag_uart_ioctl+0x38>
 4000b68:	109a80a0 	cmpeqi	r2,r2,27138
 4000b6c:	1000181e 	bne	r2,zero,4000bd0 <altera_avalon_jtag_uart_ioctl+0x94>
 4000b70:	00002606 	br	4000c0c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4000b74:	e0bffd17 	ldw	r2,-12(fp)
 4000b78:	10c00117 	ldw	r3,4(r2)
 4000b7c:	00a00034 	movhi	r2,32768
 4000b80:	10bfffc4 	addi	r2,r2,-1
 4000b84:	18802226 	beq	r3,r2,4000c10 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 4000b88:	e0bfff17 	ldw	r2,-4(fp)
 4000b8c:	10800017 	ldw	r2,0(r2)
 4000b90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4000b94:	e0bffc17 	ldw	r2,-16(fp)
 4000b98:	10800090 	cmplti	r2,r2,2
 4000b9c:	1000061e 	bne	r2,zero,4000bb8 <altera_avalon_jtag_uart_ioctl+0x7c>
 4000ba0:	e0fffc17 	ldw	r3,-16(fp)
 4000ba4:	00a00034 	movhi	r2,32768
 4000ba8:	10bfffc4 	addi	r2,r2,-1
 4000bac:	18800226 	beq	r3,r2,4000bb8 <altera_avalon_jtag_uart_ioctl+0x7c>
 4000bb0:	e0bffc17 	ldw	r2,-16(fp)
 4000bb4:	00000206 	br	4000bc0 <altera_avalon_jtag_uart_ioctl+0x84>
 4000bb8:	00a00034 	movhi	r2,32768
 4000bbc:	10bfff84 	addi	r2,r2,-2
 4000bc0:	e0fffd17 	ldw	r3,-12(fp)
 4000bc4:	18800115 	stw	r2,4(r3)
      rc = 0;
 4000bc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000bcc:	00001006 	br	4000c10 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4000bd0:	e0bffd17 	ldw	r2,-12(fp)
 4000bd4:	10c00117 	ldw	r3,4(r2)
 4000bd8:	00a00034 	movhi	r2,32768
 4000bdc:	10bfffc4 	addi	r2,r2,-1
 4000be0:	18800d26 	beq	r3,r2,4000c18 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4000be4:	e0bffd17 	ldw	r2,-12(fp)
 4000be8:	10c00917 	ldw	r3,36(r2)
 4000bec:	e0bffd17 	ldw	r2,-12(fp)
 4000bf0:	10800117 	ldw	r2,4(r2)
 4000bf4:	1885803a 	cmpltu	r2,r3,r2
 4000bf8:	10c03fcc 	andi	r3,r2,255
 4000bfc:	e0bfff17 	ldw	r2,-4(fp)
 4000c00:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4000c04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4000c08:	00000306 	br	4000c18 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 4000c0c:	00000306 	br	4000c1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4000c10:	0001883a 	nop
 4000c14:	00000106 	br	4000c1c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4000c18:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4000c1c:	e0bffb17 	ldw	r2,-20(fp)
}
 4000c20:	e037883a 	mov	sp,fp
 4000c24:	df000017 	ldw	fp,0(sp)
 4000c28:	dec00104 	addi	sp,sp,4
 4000c2c:	f800283a 	ret

04000c30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4000c30:	defff304 	addi	sp,sp,-52
 4000c34:	dfc00c15 	stw	ra,48(sp)
 4000c38:	df000b15 	stw	fp,44(sp)
 4000c3c:	df000b04 	addi	fp,sp,44
 4000c40:	e13ffc15 	stw	r4,-16(fp)
 4000c44:	e17ffd15 	stw	r5,-12(fp)
 4000c48:	e1bffe15 	stw	r6,-8(fp)
 4000c4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4000c50:	e0bffd17 	ldw	r2,-12(fp)
 4000c54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000c58:	00004706 	br	4000d78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4000c5c:	e0bffc17 	ldw	r2,-16(fp)
 4000c60:	10800a17 	ldw	r2,40(r2)
 4000c64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4000c68:	e0bffc17 	ldw	r2,-16(fp)
 4000c6c:	10800b17 	ldw	r2,44(r2)
 4000c70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4000c74:	e0fff717 	ldw	r3,-36(fp)
 4000c78:	e0bff817 	ldw	r2,-32(fp)
 4000c7c:	18800536 	bltu	r3,r2,4000c94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4000c80:	e0fff717 	ldw	r3,-36(fp)
 4000c84:	e0bff817 	ldw	r2,-32(fp)
 4000c88:	1885c83a 	sub	r2,r3,r2
 4000c8c:	e0bff615 	stw	r2,-40(fp)
 4000c90:	00000406 	br	4000ca4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4000c94:	00c20004 	movi	r3,2048
 4000c98:	e0bff817 	ldw	r2,-32(fp)
 4000c9c:	1885c83a 	sub	r2,r3,r2
 4000ca0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4000ca4:	e0bff617 	ldw	r2,-40(fp)
 4000ca8:	10001e26 	beq	r2,zero,4000d24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4000cac:	e0fffe17 	ldw	r3,-8(fp)
 4000cb0:	e0bff617 	ldw	r2,-40(fp)
 4000cb4:	1880022e 	bgeu	r3,r2,4000cc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4000cb8:	e0bffe17 	ldw	r2,-8(fp)
 4000cbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4000cc0:	e0bff817 	ldw	r2,-32(fp)
 4000cc4:	10800e04 	addi	r2,r2,56
 4000cc8:	e0fffc17 	ldw	r3,-16(fp)
 4000ccc:	1885883a 	add	r2,r3,r2
 4000cd0:	e13ff517 	ldw	r4,-44(fp)
 4000cd4:	100b883a 	mov	r5,r2
 4000cd8:	e1bff617 	ldw	r6,-40(fp)
 4000cdc:	4002b440 	call	4002b44 <memcpy>
      ptr   += n;
 4000ce0:	e0fff517 	ldw	r3,-44(fp)
 4000ce4:	e0bff617 	ldw	r2,-40(fp)
 4000ce8:	1885883a 	add	r2,r3,r2
 4000cec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4000cf0:	e0fffe17 	ldw	r3,-8(fp)
 4000cf4:	e0bff617 	ldw	r2,-40(fp)
 4000cf8:	1885c83a 	sub	r2,r3,r2
 4000cfc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000d00:	e0fff817 	ldw	r3,-32(fp)
 4000d04:	e0bff617 	ldw	r2,-40(fp)
 4000d08:	1885883a 	add	r2,r3,r2
 4000d0c:	10c1ffcc 	andi	r3,r2,2047
 4000d10:	e0bffc17 	ldw	r2,-16(fp)
 4000d14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4000d18:	e0bffe17 	ldw	r2,-8(fp)
 4000d1c:	00bfcf16 	blt	zero,r2,4000c5c <altera_avalon_jtag_uart_read+0x2c>
 4000d20:	00000106 	br	4000d28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4000d24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4000d28:	e0fff517 	ldw	r3,-44(fp)
 4000d2c:	e0bffd17 	ldw	r2,-12(fp)
 4000d30:	1880141e 	bne	r3,r2,4000d84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	1090000c 	andi	r2,r2,16384
 4000d3c:	1000131e 	bne	r2,zero,4000d8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4000d40:	0001883a 	nop
 4000d44:	e0bffc17 	ldw	r2,-16(fp)
 4000d48:	10c00a17 	ldw	r3,40(r2)
 4000d4c:	e0bff717 	ldw	r2,-36(fp)
 4000d50:	1880051e 	bne	r3,r2,4000d68 <altera_avalon_jtag_uart_read+0x138>
 4000d54:	e0bffc17 	ldw	r2,-16(fp)
 4000d58:	10c00917 	ldw	r3,36(r2)
 4000d5c:	e0bffc17 	ldw	r2,-16(fp)
 4000d60:	10800117 	ldw	r2,4(r2)
 4000d64:	18bff736 	bltu	r3,r2,4000d44 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4000d68:	e0bffc17 	ldw	r2,-16(fp)
 4000d6c:	10c00a17 	ldw	r3,40(r2)
 4000d70:	e0bff717 	ldw	r2,-36(fp)
 4000d74:	18800726 	beq	r3,r2,4000d94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4000d78:	e0bffe17 	ldw	r2,-8(fp)
 4000d7c:	00bfb716 	blt	zero,r2,4000c5c <altera_avalon_jtag_uart_read+0x2c>
 4000d80:	00000506 	br	4000d98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4000d84:	0001883a 	nop
 4000d88:	00000306 	br	4000d98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4000d8c:	0001883a 	nop
 4000d90:	00000106 	br	4000d98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4000d94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4000d98:	e0fff517 	ldw	r3,-44(fp)
 4000d9c:	e0bffd17 	ldw	r2,-12(fp)
 4000da0:	18801726 	beq	r3,r2,4000e00 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000da4:	0005303a 	rdctl	r2,status
 4000da8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000dac:	e0fffa17 	ldw	r3,-24(fp)
 4000db0:	00bfff84 	movi	r2,-2
 4000db4:	1884703a 	and	r2,r3,r2
 4000db8:	1001703a 	wrctl	status,r2
  
  return context;
 4000dbc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4000dc0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4000dc4:	e0bffc17 	ldw	r2,-16(fp)
 4000dc8:	10800817 	ldw	r2,32(r2)
 4000dcc:	10c00054 	ori	r3,r2,1
 4000dd0:	e0bffc17 	ldw	r2,-16(fp)
 4000dd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000dd8:	e0bffc17 	ldw	r2,-16(fp)
 4000ddc:	10800017 	ldw	r2,0(r2)
 4000de0:	10800104 	addi	r2,r2,4
 4000de4:	e0fffc17 	ldw	r3,-16(fp)
 4000de8:	18c00817 	ldw	r3,32(r3)
 4000dec:	10c00035 	stwio	r3,0(r2)
 4000df0:	e0bff917 	ldw	r2,-28(fp)
 4000df4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000df8:	e0bffb17 	ldw	r2,-20(fp)
 4000dfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4000e00:	e0fff517 	ldw	r3,-44(fp)
 4000e04:	e0bffd17 	ldw	r2,-12(fp)
 4000e08:	18800426 	beq	r3,r2,4000e1c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 4000e0c:	e0fff517 	ldw	r3,-44(fp)
 4000e10:	e0bffd17 	ldw	r2,-12(fp)
 4000e14:	1885c83a 	sub	r2,r3,r2
 4000e18:	00000606 	br	4000e34 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 4000e1c:	e0bfff17 	ldw	r2,-4(fp)
 4000e20:	1090000c 	andi	r2,r2,16384
 4000e24:	10000226 	beq	r2,zero,4000e30 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 4000e28:	00bffd44 	movi	r2,-11
 4000e2c:	00000106 	br	4000e34 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 4000e30:	00bffec4 	movi	r2,-5
}
 4000e34:	e037883a 	mov	sp,fp
 4000e38:	dfc00117 	ldw	ra,4(sp)
 4000e3c:	df000017 	ldw	fp,0(sp)
 4000e40:	dec00204 	addi	sp,sp,8
 4000e44:	f800283a 	ret

04000e48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000e48:	defff304 	addi	sp,sp,-52
 4000e4c:	dfc00c15 	stw	ra,48(sp)
 4000e50:	df000b15 	stw	fp,44(sp)
 4000e54:	df000b04 	addi	fp,sp,44
 4000e58:	e13ffc15 	stw	r4,-16(fp)
 4000e5c:	e17ffd15 	stw	r5,-12(fp)
 4000e60:	e1bffe15 	stw	r6,-8(fp)
 4000e64:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4000e68:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4000e6c:	e0bffd17 	ldw	r2,-12(fp)
 4000e70:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000e74:	00003706 	br	4000f54 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4000e78:	e0bffc17 	ldw	r2,-16(fp)
 4000e7c:	10800c17 	ldw	r2,48(r2)
 4000e80:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 4000e84:	e0bffc17 	ldw	r2,-16(fp)
 4000e88:	10800d17 	ldw	r2,52(r2)
 4000e8c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4000e90:	e0fff817 	ldw	r3,-32(fp)
 4000e94:	e0bff517 	ldw	r2,-44(fp)
 4000e98:	1880062e 	bgeu	r3,r2,4000eb4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4000e9c:	e0fff517 	ldw	r3,-44(fp)
 4000ea0:	e0bff817 	ldw	r2,-32(fp)
 4000ea4:	1885c83a 	sub	r2,r3,r2
 4000ea8:	10bfffc4 	addi	r2,r2,-1
 4000eac:	e0bff615 	stw	r2,-40(fp)
 4000eb0:	00000b06 	br	4000ee0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4000eb4:	e0bff517 	ldw	r2,-44(fp)
 4000eb8:	10000526 	beq	r2,zero,4000ed0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4000ebc:	00c20004 	movi	r3,2048
 4000ec0:	e0bff817 	ldw	r2,-32(fp)
 4000ec4:	1885c83a 	sub	r2,r3,r2
 4000ec8:	e0bff615 	stw	r2,-40(fp)
 4000ecc:	00000406 	br	4000ee0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4000ed0:	00c1ffc4 	movi	r3,2047
 4000ed4:	e0bff817 	ldw	r2,-32(fp)
 4000ed8:	1885c83a 	sub	r2,r3,r2
 4000edc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4000ee0:	e0bff617 	ldw	r2,-40(fp)
 4000ee4:	10001e26 	beq	r2,zero,4000f60 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4000ee8:	e0fffe17 	ldw	r3,-8(fp)
 4000eec:	e0bff617 	ldw	r2,-40(fp)
 4000ef0:	1880022e 	bgeu	r3,r2,4000efc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4000ef4:	e0bffe17 	ldw	r2,-8(fp)
 4000ef8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4000efc:	e0bff817 	ldw	r2,-32(fp)
 4000f00:	10820e04 	addi	r2,r2,2104
 4000f04:	e0fffc17 	ldw	r3,-16(fp)
 4000f08:	1885883a 	add	r2,r3,r2
 4000f0c:	1009883a 	mov	r4,r2
 4000f10:	e17ffd17 	ldw	r5,-12(fp)
 4000f14:	e1bff617 	ldw	r6,-40(fp)
 4000f18:	4002b440 	call	4002b44 <memcpy>
      ptr   += n;
 4000f1c:	e0fffd17 	ldw	r3,-12(fp)
 4000f20:	e0bff617 	ldw	r2,-40(fp)
 4000f24:	1885883a 	add	r2,r3,r2
 4000f28:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4000f2c:	e0fffe17 	ldw	r3,-8(fp)
 4000f30:	e0bff617 	ldw	r2,-40(fp)
 4000f34:	1885c83a 	sub	r2,r3,r2
 4000f38:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4000f3c:	e0fff817 	ldw	r3,-32(fp)
 4000f40:	e0bff617 	ldw	r2,-40(fp)
 4000f44:	1885883a 	add	r2,r3,r2
 4000f48:	10c1ffcc 	andi	r3,r2,2047
 4000f4c:	e0bffc17 	ldw	r2,-16(fp)
 4000f50:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4000f54:	e0bffe17 	ldw	r2,-8(fp)
 4000f58:	00bfc716 	blt	zero,r2,4000e78 <altera_avalon_jtag_uart_write+0x30>
 4000f5c:	00000106 	br	4000f64 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4000f60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000f64:	0005303a 	rdctl	r2,status
 4000f68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000f6c:	e0fffa17 	ldw	r3,-24(fp)
 4000f70:	00bfff84 	movi	r2,-2
 4000f74:	1884703a 	and	r2,r3,r2
 4000f78:	1001703a 	wrctl	status,r2
  
  return context;
 4000f7c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4000f80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4000f84:	e0bffc17 	ldw	r2,-16(fp)
 4000f88:	10800817 	ldw	r2,32(r2)
 4000f8c:	10c00094 	ori	r3,r2,2
 4000f90:	e0bffc17 	ldw	r2,-16(fp)
 4000f94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4000f98:	e0bffc17 	ldw	r2,-16(fp)
 4000f9c:	10800017 	ldw	r2,0(r2)
 4000fa0:	10800104 	addi	r2,r2,4
 4000fa4:	e0fffc17 	ldw	r3,-16(fp)
 4000fa8:	18c00817 	ldw	r3,32(r3)
 4000fac:	10c00035 	stwio	r3,0(r2)
 4000fb0:	e0bff917 	ldw	r2,-28(fp)
 4000fb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000fb8:	e0bffb17 	ldw	r2,-20(fp)
 4000fbc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4000fc0:	e0bffe17 	ldw	r2,-8(fp)
 4000fc4:	0080110e 	bge	zero,r2,400100c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4000fc8:	e0bfff17 	ldw	r2,-4(fp)
 4000fcc:	1090000c 	andi	r2,r2,16384
 4000fd0:	1000111e 	bne	r2,zero,4001018 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4000fd4:	0001883a 	nop
 4000fd8:	e0bffc17 	ldw	r2,-16(fp)
 4000fdc:	10c00d17 	ldw	r3,52(r2)
 4000fe0:	e0bff517 	ldw	r2,-44(fp)
 4000fe4:	1880051e 	bne	r3,r2,4000ffc <altera_avalon_jtag_uart_write+0x1b4>
 4000fe8:	e0bffc17 	ldw	r2,-16(fp)
 4000fec:	10c00917 	ldw	r3,36(r2)
 4000ff0:	e0bffc17 	ldw	r2,-16(fp)
 4000ff4:	10800117 	ldw	r2,4(r2)
 4000ff8:	18bff736 	bltu	r3,r2,4000fd8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4000ffc:	e0bffc17 	ldw	r2,-16(fp)
 4001000:	10c00d17 	ldw	r3,52(r2)
 4001004:	e0bff517 	ldw	r2,-44(fp)
 4001008:	18800526 	beq	r3,r2,4001020 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400100c:	e0bffe17 	ldw	r2,-8(fp)
 4001010:	00bfd016 	blt	zero,r2,4000f54 <altera_avalon_jtag_uart_write+0x10c>
 4001014:	00000306 	br	4001024 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4001018:	0001883a 	nop
 400101c:	00000106 	br	4001024 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 4001020:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4001024:	e0fffd17 	ldw	r3,-12(fp)
 4001028:	e0bff717 	ldw	r2,-36(fp)
 400102c:	18800426 	beq	r3,r2,4001040 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4001030:	e0fffd17 	ldw	r3,-12(fp)
 4001034:	e0bff717 	ldw	r2,-36(fp)
 4001038:	1885c83a 	sub	r2,r3,r2
 400103c:	00000606 	br	4001058 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4001040:	e0bfff17 	ldw	r2,-4(fp)
 4001044:	1090000c 	andi	r2,r2,16384
 4001048:	10000226 	beq	r2,zero,4001054 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400104c:	00bffd44 	movi	r2,-11
 4001050:	00000106 	br	4001058 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4001054:	00bffec4 	movi	r2,-5
}
 4001058:	e037883a 	mov	sp,fp
 400105c:	dfc00117 	ldw	ra,4(sp)
 4001060:	df000017 	ldw	fp,0(sp)
 4001064:	dec00204 	addi	sp,sp,8
 4001068:	f800283a 	ret

0400106c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400106c:	defffa04 	addi	sp,sp,-24
 4001070:	dfc00515 	stw	ra,20(sp)
 4001074:	df000415 	stw	fp,16(sp)
 4001078:	df000404 	addi	fp,sp,16
 400107c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4001080:	0007883a 	mov	r3,zero
 4001084:	e0bfff17 	ldw	r2,-4(fp)
 4001088:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400108c:	e0bfff17 	ldw	r2,-4(fp)
 4001090:	10800104 	addi	r2,r2,4
 4001094:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001098:	0005303a 	rdctl	r2,status
 400109c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40010a0:	e0fffd17 	ldw	r3,-12(fp)
 40010a4:	00bfff84 	movi	r2,-2
 40010a8:	1884703a 	and	r2,r3,r2
 40010ac:	1001703a 	wrctl	status,r2
  
  return context;
 40010b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40010b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40010b8:	40026740 	call	4002674 <alt_tick>
 40010bc:	e0bffc17 	ldw	r2,-16(fp)
 40010c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40010c4:	e0bffe17 	ldw	r2,-8(fp)
 40010c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40010cc:	e037883a 	mov	sp,fp
 40010d0:	dfc00117 	ldw	ra,4(sp)
 40010d4:	df000017 	ldw	fp,0(sp)
 40010d8:	dec00204 	addi	sp,sp,8
 40010dc:	f800283a 	ret

040010e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40010e0:	defff804 	addi	sp,sp,-32
 40010e4:	dfc00715 	stw	ra,28(sp)
 40010e8:	df000615 	stw	fp,24(sp)
 40010ec:	df000604 	addi	fp,sp,24
 40010f0:	e13ffc15 	stw	r4,-16(fp)
 40010f4:	e17ffd15 	stw	r5,-12(fp)
 40010f8:	e1bffe15 	stw	r6,-8(fp)
 40010fc:	e1ffff15 	stw	r7,-4(fp)
 4001100:	e0bfff17 	ldw	r2,-4(fp)
 4001104:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4001108:	00810034 	movhi	r2,1024
 400110c:	10978a04 	addi	r2,r2,24104
 4001110:	10800017 	ldw	r2,0(r2)
 4001114:	1000041e 	bne	r2,zero,4001128 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 4001118:	00810034 	movhi	r2,1024
 400111c:	10978a04 	addi	r2,r2,24104
 4001120:	e0fffb17 	ldw	r3,-20(fp)
 4001124:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4001128:	e0bffc17 	ldw	r2,-16(fp)
 400112c:	10800104 	addi	r2,r2,4
 4001130:	00c001c4 	movi	r3,7
 4001134:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4001138:	d8000015 	stw	zero,0(sp)
 400113c:	e13ffd17 	ldw	r4,-12(fp)
 4001140:	e17ffe17 	ldw	r5,-8(fp)
 4001144:	01810034 	movhi	r6,1024
 4001148:	31841b04 	addi	r6,r6,4204
 400114c:	e1fffc17 	ldw	r7,-16(fp)
 4001150:	4001f0c0 	call	4001f0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4001154:	e037883a 	mov	sp,fp
 4001158:	dfc00117 	ldw	ra,4(sp)
 400115c:	df000017 	ldw	fp,0(sp)
 4001160:	dec00204 	addi	sp,sp,8
 4001164:	f800283a 	ret

04001168 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4001168:	defffa04 	addi	sp,sp,-24
 400116c:	dfc00515 	stw	ra,20(sp)
 4001170:	df000415 	stw	fp,16(sp)
 4001174:	df000404 	addi	fp,sp,16
 4001178:	e13ffd15 	stw	r4,-12(fp)
 400117c:	e17ffe15 	stw	r5,-8(fp)
 4001180:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4001184:	e0bffd17 	ldw	r2,-12(fp)
 4001188:	10800017 	ldw	r2,0(r2)
 400118c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4001190:	e0bffc17 	ldw	r2,-16(fp)
 4001194:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4001198:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 400119c:	10800217 	ldw	r2,8(r2)
 40011a0:	1809883a 	mov	r4,r3
 40011a4:	e17ffe17 	ldw	r5,-8(fp)
 40011a8:	e1bfff17 	ldw	r6,-4(fp)
 40011ac:	100f883a 	mov	r7,r2
 40011b0:	40016700 	call	4001670 <altera_avalon_uart_read>
      fd->fd_flags);
}
 40011b4:	e037883a 	mov	sp,fp
 40011b8:	dfc00117 	ldw	ra,4(sp)
 40011bc:	df000017 	ldw	fp,0(sp)
 40011c0:	dec00204 	addi	sp,sp,8
 40011c4:	f800283a 	ret

040011c8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40011c8:	defffa04 	addi	sp,sp,-24
 40011cc:	dfc00515 	stw	ra,20(sp)
 40011d0:	df000415 	stw	fp,16(sp)
 40011d4:	df000404 	addi	fp,sp,16
 40011d8:	e13ffd15 	stw	r4,-12(fp)
 40011dc:	e17ffe15 	stw	r5,-8(fp)
 40011e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40011e4:	e0bffd17 	ldw	r2,-12(fp)
 40011e8:	10800017 	ldw	r2,0(r2)
 40011ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40011f0:	e0bffc17 	ldw	r2,-16(fp)
 40011f4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 40011f8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40011fc:	10800217 	ldw	r2,8(r2)
 4001200:	1809883a 	mov	r4,r3
 4001204:	e17ffe17 	ldw	r5,-8(fp)
 4001208:	e1bfff17 	ldw	r6,-4(fp)
 400120c:	100f883a 	mov	r7,r2
 4001210:	40018c40 	call	40018c4 <altera_avalon_uart_write>
      fd->fd_flags);
}
 4001214:	e037883a 	mov	sp,fp
 4001218:	dfc00117 	ldw	ra,4(sp)
 400121c:	df000017 	ldw	fp,0(sp)
 4001220:	dec00204 	addi	sp,sp,8
 4001224:	f800283a 	ret

04001228 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4001228:	defffc04 	addi	sp,sp,-16
 400122c:	dfc00315 	stw	ra,12(sp)
 4001230:	df000215 	stw	fp,8(sp)
 4001234:	df000204 	addi	fp,sp,8
 4001238:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400123c:	e0bfff17 	ldw	r2,-4(fp)
 4001240:	10800017 	ldw	r2,0(r2)
 4001244:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4001248:	e0bffe17 	ldw	r2,-8(fp)
 400124c:	10c00a04 	addi	r3,r2,40
 4001250:	e0bfff17 	ldw	r2,-4(fp)
 4001254:	10800217 	ldw	r2,8(r2)
 4001258:	1809883a 	mov	r4,r3
 400125c:	100b883a 	mov	r5,r2
 4001260:	40015cc0 	call	40015cc <altera_avalon_uart_close>
}
 4001264:	e037883a 	mov	sp,fp
 4001268:	dfc00117 	ldw	ra,4(sp)
 400126c:	df000017 	ldw	fp,0(sp)
 4001270:	dec00204 	addi	sp,sp,8
 4001274:	f800283a 	ret

04001278 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4001278:	defff804 	addi	sp,sp,-32
 400127c:	dfc00715 	stw	ra,28(sp)
 4001280:	df000615 	stw	fp,24(sp)
 4001284:	df000604 	addi	fp,sp,24
 4001288:	e13ffd15 	stw	r4,-12(fp)
 400128c:	e17ffe15 	stw	r5,-8(fp)
 4001290:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 4001294:	e0bffd17 	ldw	r2,-12(fp)
 4001298:	10800017 	ldw	r2,0(r2)
 400129c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 40012a0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 40012a4:	1000041e 	bne	r2,zero,40012b8 <altera_avalon_uart_init+0x40>
 40012a8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 40012ac:	1000021e 	bne	r2,zero,40012b8 <altera_avalon_uart_init+0x40>
 40012b0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 40012b4:	10000226 	beq	r2,zero,40012c0 <altera_avalon_uart_init+0x48>
 40012b8:	00800044 	movi	r2,1
 40012bc:	00000106 	br	40012c4 <altera_avalon_uart_init+0x4c>
 40012c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 40012c4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 40012c8:	e0bffc17 	ldw	r2,-16(fp)
 40012cc:	10000f1e 	bne	r2,zero,400130c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 40012d0:	e0bffd17 	ldw	r2,-12(fp)
 40012d4:	00c32004 	movi	r3,3200
 40012d8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 40012dc:	e0bffb17 	ldw	r2,-20(fp)
 40012e0:	10800304 	addi	r2,r2,12
 40012e4:	e0fffd17 	ldw	r3,-12(fp)
 40012e8:	18c00117 	ldw	r3,4(r3)
 40012ec:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 40012f0:	d8000015 	stw	zero,0(sp)
 40012f4:	e13ffe17 	ldw	r4,-8(fp)
 40012f8:	e17fff17 	ldw	r5,-4(fp)
 40012fc:	01810034 	movhi	r6,1024
 4001300:	3184c804 	addi	r6,r6,4896
 4001304:	e1fffd17 	ldw	r7,-12(fp)
 4001308:	4001f0c0 	call	4001f0c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 400130c:	e037883a 	mov	sp,fp
 4001310:	dfc00117 	ldw	ra,4(sp)
 4001314:	df000017 	ldw	fp,0(sp)
 4001318:	dec00204 	addi	sp,sp,8
 400131c:	f800283a 	ret

04001320 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 4001320:	defffa04 	addi	sp,sp,-24
 4001324:	dfc00515 	stw	ra,20(sp)
 4001328:	df000415 	stw	fp,16(sp)
 400132c:	df000404 	addi	fp,sp,16
 4001330:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 4001334:	e0bfff17 	ldw	r2,-4(fp)
 4001338:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 400133c:	e0bffc17 	ldw	r2,-16(fp)
 4001340:	10800017 	ldw	r2,0(r2)
 4001344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4001348:	e0bffd17 	ldw	r2,-12(fp)
 400134c:	10800204 	addi	r2,r2,8
 4001350:	10800037 	ldwio	r2,0(r2)
 4001354:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4001358:	e0bffd17 	ldw	r2,-12(fp)
 400135c:	10800204 	addi	r2,r2,8
 4001360:	0007883a 	mov	r3,zero
 4001364:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4001368:	e0bffd17 	ldw	r2,-12(fp)
 400136c:	10800204 	addi	r2,r2,8
 4001370:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4001374:	e0bffe17 	ldw	r2,-8(fp)
 4001378:	1080200c 	andi	r2,r2,128
 400137c:	10000326 	beq	r2,zero,400138c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4001380:	e13ffc17 	ldw	r4,-16(fp)
 4001384:	e17ffe17 	ldw	r5,-8(fp)
 4001388:	40013b80 	call	40013b8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 400138c:	e0bffe17 	ldw	r2,-8(fp)
 4001390:	1081100c 	andi	r2,r2,1088
 4001394:	10000326 	beq	r2,zero,40013a4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4001398:	e13ffc17 	ldw	r4,-16(fp)
 400139c:	e17ffe17 	ldw	r5,-8(fp)
 40013a0:	40014900 	call	4001490 <altera_avalon_uart_txirq>
  }
  

}
 40013a4:	e037883a 	mov	sp,fp
 40013a8:	dfc00117 	ldw	ra,4(sp)
 40013ac:	df000017 	ldw	fp,0(sp)
 40013b0:	dec00204 	addi	sp,sp,8
 40013b4:	f800283a 	ret

040013b8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 40013b8:	defffc04 	addi	sp,sp,-16
 40013bc:	df000315 	stw	fp,12(sp)
 40013c0:	df000304 	addi	fp,sp,12
 40013c4:	e13ffe15 	stw	r4,-8(fp)
 40013c8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 40013cc:	e0bfff17 	ldw	r2,-4(fp)
 40013d0:	108000cc 	andi	r2,r2,3
 40013d4:	1000291e 	bne	r2,zero,400147c <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 40013d8:	e0bffe17 	ldw	r2,-8(fp)
 40013dc:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40013e0:	e0bffe17 	ldw	r2,-8(fp)
 40013e4:	10800317 	ldw	r2,12(r2)
 40013e8:	10800044 	addi	r2,r2,1
 40013ec:	10800fcc 	andi	r2,r2,63
 40013f0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 40013f4:	e0bffe17 	ldw	r2,-8(fp)
 40013f8:	10800317 	ldw	r2,12(r2)
 40013fc:	e0fffe17 	ldw	r3,-8(fp)
 4001400:	18c00017 	ldw	r3,0(r3)
 4001404:	18c00037 	ldwio	r3,0(r3)
 4001408:	e13ffe17 	ldw	r4,-8(fp)
 400140c:	2085883a 	add	r2,r4,r2
 4001410:	10800704 	addi	r2,r2,28
 4001414:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 4001418:	e0bffe17 	ldw	r2,-8(fp)
 400141c:	e0fffd17 	ldw	r3,-12(fp)
 4001420:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4001424:	e0bffe17 	ldw	r2,-8(fp)
 4001428:	10800317 	ldw	r2,12(r2)
 400142c:	10800044 	addi	r2,r2,1
 4001430:	10800fcc 	andi	r2,r2,63
 4001434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4001438:	e0bffe17 	ldw	r2,-8(fp)
 400143c:	10c00217 	ldw	r3,8(r2)
 4001440:	e0bffd17 	ldw	r2,-12(fp)
 4001444:	18800e1e 	bne	r3,r2,4001480 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4001448:	e0bffe17 	ldw	r2,-8(fp)
 400144c:	10c00117 	ldw	r3,4(r2)
 4001450:	00bfdfc4 	movi	r2,-129
 4001454:	1886703a 	and	r3,r3,r2
 4001458:	e0bffe17 	ldw	r2,-8(fp)
 400145c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4001460:	e0bffe17 	ldw	r2,-8(fp)
 4001464:	10800017 	ldw	r2,0(r2)
 4001468:	10800304 	addi	r2,r2,12
 400146c:	e0fffe17 	ldw	r3,-8(fp)
 4001470:	18c00117 	ldw	r3,4(r3)
 4001474:	10c00035 	stwio	r3,0(r2)
 4001478:	00000106 	br	4001480 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 400147c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4001480:	e037883a 	mov	sp,fp
 4001484:	df000017 	ldw	fp,0(sp)
 4001488:	dec00104 	addi	sp,sp,4
 400148c:	f800283a 	ret

04001490 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4001490:	defffd04 	addi	sp,sp,-12
 4001494:	df000215 	stw	fp,8(sp)
 4001498:	df000204 	addi	fp,sp,8
 400149c:	e13ffe15 	stw	r4,-8(fp)
 40014a0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 40014a4:	e0bffe17 	ldw	r2,-8(fp)
 40014a8:	10c00417 	ldw	r3,16(r2)
 40014ac:	e0bffe17 	ldw	r2,-8(fp)
 40014b0:	10800517 	ldw	r2,20(r2)
 40014b4:	18803026 	beq	r3,r2,4001578 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40014b8:	e0bffe17 	ldw	r2,-8(fp)
 40014bc:	10800617 	ldw	r2,24(r2)
 40014c0:	1080008c 	andi	r2,r2,2
 40014c4:	10000326 	beq	r2,zero,40014d4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 40014c8:	e0bfff17 	ldw	r2,-4(fp)
 40014cc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40014d0:	10001b26 	beq	r2,zero,4001540 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 40014d4:	e0bffe17 	ldw	r2,-8(fp)
 40014d8:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 40014dc:	e0bffe17 	ldw	r2,-8(fp)
 40014e0:	10800017 	ldw	r2,0(r2)
 40014e4:	10800104 	addi	r2,r2,4
 40014e8:	e0fffe17 	ldw	r3,-8(fp)
 40014ec:	18c00417 	ldw	r3,16(r3)
 40014f0:	e13ffe17 	ldw	r4,-8(fp)
 40014f4:	20c7883a 	add	r3,r4,r3
 40014f8:	18c01704 	addi	r3,r3,92
 40014fc:	18c00003 	ldbu	r3,0(r3)
 4001500:	18c03fcc 	andi	r3,r3,255
 4001504:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 4001508:	e0bffe17 	ldw	r2,-8(fp)
 400150c:	10800417 	ldw	r2,16(r2)
 4001510:	10800044 	addi	r2,r2,1
 4001514:	e0fffe17 	ldw	r3,-8(fp)
 4001518:	18800415 	stw	r2,16(r3)
 400151c:	10c00fcc 	andi	r3,r2,63
 4001520:	e0bffe17 	ldw	r2,-8(fp)
 4001524:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4001528:	e0bffe17 	ldw	r2,-8(fp)
 400152c:	10800117 	ldw	r2,4(r2)
 4001530:	10c01014 	ori	r3,r2,64
 4001534:	e0bffe17 	ldw	r2,-8(fp)
 4001538:	10c00115 	stw	r3,4(r2)
 400153c:	00000e06 	br	4001578 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4001540:	e0bffe17 	ldw	r2,-8(fp)
 4001544:	10800017 	ldw	r2,0(r2)
 4001548:	10800204 	addi	r2,r2,8
 400154c:	10800037 	ldwio	r2,0(r2)
 4001550:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4001554:	e0bfff17 	ldw	r2,-4(fp)
 4001558:	1082000c 	andi	r2,r2,2048
 400155c:	1000061e 	bne	r2,zero,4001578 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4001560:	e0bffe17 	ldw	r2,-8(fp)
 4001564:	10c00117 	ldw	r3,4(r2)
 4001568:	00bfefc4 	movi	r2,-65
 400156c:	1886703a 	and	r3,r3,r2
 4001570:	e0bffe17 	ldw	r2,-8(fp)
 4001574:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4001578:	e0bffe17 	ldw	r2,-8(fp)
 400157c:	10c00417 	ldw	r3,16(r2)
 4001580:	e0bffe17 	ldw	r2,-8(fp)
 4001584:	10800517 	ldw	r2,20(r2)
 4001588:	1880061e 	bne	r3,r2,40015a4 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400158c:	e0bffe17 	ldw	r2,-8(fp)
 4001590:	10c00117 	ldw	r3,4(r2)
 4001594:	00beefc4 	movi	r2,-1089
 4001598:	1886703a 	and	r3,r3,r2
 400159c:	e0bffe17 	ldw	r2,-8(fp)
 40015a0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40015a4:	e0bffe17 	ldw	r2,-8(fp)
 40015a8:	10800017 	ldw	r2,0(r2)
 40015ac:	10800304 	addi	r2,r2,12
 40015b0:	e0fffe17 	ldw	r3,-8(fp)
 40015b4:	18c00117 	ldw	r3,4(r3)
 40015b8:	10c00035 	stwio	r3,0(r2)
}
 40015bc:	e037883a 	mov	sp,fp
 40015c0:	df000017 	ldw	fp,0(sp)
 40015c4:	dec00104 	addi	sp,sp,4
 40015c8:	f800283a 	ret

040015cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 40015cc:	defffd04 	addi	sp,sp,-12
 40015d0:	df000215 	stw	fp,8(sp)
 40015d4:	df000204 	addi	fp,sp,8
 40015d8:	e13ffe15 	stw	r4,-8(fp)
 40015dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40015e0:	00000506 	br	40015f8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40015e4:	e0bfff17 	ldw	r2,-4(fp)
 40015e8:	1090000c 	andi	r2,r2,16384
 40015ec:	10000226 	beq	r2,zero,40015f8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40015f0:	00bffd44 	movi	r2,-11
 40015f4:	00000606 	br	4001610 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40015f8:	e0bffe17 	ldw	r2,-8(fp)
 40015fc:	10c00417 	ldw	r3,16(r2)
 4001600:	e0bffe17 	ldw	r2,-8(fp)
 4001604:	10800517 	ldw	r2,20(r2)
 4001608:	18bff61e 	bne	r3,r2,40015e4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400160c:	0005883a 	mov	r2,zero
}
 4001610:	e037883a 	mov	sp,fp
 4001614:	df000017 	ldw	fp,0(sp)
 4001618:	dec00104 	addi	sp,sp,4
 400161c:	f800283a 	ret

04001620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001620:	defffe04 	addi	sp,sp,-8
 4001624:	dfc00115 	stw	ra,4(sp)
 4001628:	df000015 	stw	fp,0(sp)
 400162c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001630:	00810034 	movhi	r2,1024
 4001634:	1091bf04 	addi	r2,r2,18172
 4001638:	10800017 	ldw	r2,0(r2)
 400163c:	10000526 	beq	r2,zero,4001654 <alt_get_errno+0x34>
 4001640:	00810034 	movhi	r2,1024
 4001644:	1091bf04 	addi	r2,r2,18172
 4001648:	10800017 	ldw	r2,0(r2)
 400164c:	103ee83a 	callr	r2
 4001650:	00000206 	br	400165c <alt_get_errno+0x3c>
 4001654:	00810034 	movhi	r2,1024
 4001658:	10978c04 	addi	r2,r2,24112
}
 400165c:	e037883a 	mov	sp,fp
 4001660:	dfc00117 	ldw	ra,4(sp)
 4001664:	df000017 	ldw	fp,0(sp)
 4001668:	dec00204 	addi	sp,sp,8
 400166c:	f800283a 	ret

04001670 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4001670:	defff104 	addi	sp,sp,-60
 4001674:	dfc00e15 	stw	ra,56(sp)
 4001678:	df000d15 	stw	fp,52(sp)
 400167c:	df000d04 	addi	fp,sp,52
 4001680:	e13ffc15 	stw	r4,-16(fp)
 4001684:	e17ffd15 	stw	r5,-12(fp)
 4001688:	e1bffe15 	stw	r6,-8(fp)
 400168c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 4001690:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 4001694:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4001698:	e0bfff17 	ldw	r2,-4(fp)
 400169c:	1090000c 	andi	r2,r2,16384
 40016a0:	1005003a 	cmpeq	r2,r2,zero
 40016a4:	10803fcc 	andi	r2,r2,255
 40016a8:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 40016ac:	e0bffc17 	ldw	r2,-16(fp)
 40016b0:	10800217 	ldw	r2,8(r2)
 40016b4:	10800044 	addi	r2,r2,1
 40016b8:	10800fcc 	andi	r2,r2,63
 40016bc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40016c0:	00001906 	br	4001728 <altera_avalon_uart_read+0xb8>
    {
      count++;
 40016c4:	e0bff417 	ldw	r2,-48(fp)
 40016c8:	10800044 	addi	r2,r2,1
 40016cc:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 40016d0:	e0bffc17 	ldw	r2,-16(fp)
 40016d4:	10800217 	ldw	r2,8(r2)
 40016d8:	e0fffc17 	ldw	r3,-16(fp)
 40016dc:	1885883a 	add	r2,r3,r2
 40016e0:	10800704 	addi	r2,r2,28
 40016e4:	10800003 	ldbu	r2,0(r2)
 40016e8:	1007883a 	mov	r3,r2
 40016ec:	e0bffd17 	ldw	r2,-12(fp)
 40016f0:	10c00005 	stb	r3,0(r2)
 40016f4:	e0bffd17 	ldw	r2,-12(fp)
 40016f8:	10800044 	addi	r2,r2,1
 40016fc:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 4001700:	e0bffc17 	ldw	r2,-16(fp)
 4001704:	10800217 	ldw	r2,8(r2)
 4001708:	10c00044 	addi	r3,r2,1
 400170c:	e0bffc17 	ldw	r2,-16(fp)
 4001710:	10c00215 	stw	r3,8(r2)
 4001714:	e0bffc17 	ldw	r2,-16(fp)
 4001718:	10800217 	ldw	r2,8(r2)
 400171c:	10c00fcc 	andi	r3,r2,63
 4001720:	e0bffc17 	ldw	r2,-16(fp)
 4001724:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4001728:	e0fff417 	ldw	r3,-48(fp)
 400172c:	e0bffe17 	ldw	r2,-8(fp)
 4001730:	1880050e 	bge	r3,r2,4001748 <altera_avalon_uart_read+0xd8>
 4001734:	e0bffc17 	ldw	r2,-16(fp)
 4001738:	10c00217 	ldw	r3,8(r2)
 400173c:	e0bffc17 	ldw	r2,-16(fp)
 4001740:	10800317 	ldw	r2,12(r2)
 4001744:	18bfdf1e 	bne	r3,r2,40016c4 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4001748:	e0bff417 	ldw	r2,-48(fp)
 400174c:	1000241e 	bne	r2,zero,40017e0 <altera_avalon_uart_read+0x170>
 4001750:	e0bffc17 	ldw	r2,-16(fp)
 4001754:	10c00217 	ldw	r3,8(r2)
 4001758:	e0bffc17 	ldw	r2,-16(fp)
 400175c:	10800317 	ldw	r2,12(r2)
 4001760:	18801f1e 	bne	r3,r2,40017e0 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 4001764:	e0bff517 	ldw	r2,-44(fp)
 4001768:	1000061e 	bne	r2,zero,4001784 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 400176c:	40016200 	call	4001620 <alt_get_errno>
 4001770:	00c002c4 	movi	r3,11
 4001774:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 4001778:	00800044 	movi	r2,1
 400177c:	e0bff305 	stb	r2,-52(fp)
        break;
 4001780:	00001b06 	br	40017f0 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001784:	0005303a 	rdctl	r2,status
 4001788:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400178c:	e0fff817 	ldw	r3,-32(fp)
 4001790:	00bfff84 	movi	r2,-2
 4001794:	1884703a 	and	r2,r3,r2
 4001798:	1001703a 	wrctl	status,r2
  
  return context;
 400179c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 40017a0:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40017a4:	e0bffc17 	ldw	r2,-16(fp)
 40017a8:	10800117 	ldw	r2,4(r2)
 40017ac:	10c02014 	ori	r3,r2,128
 40017b0:	e0bffc17 	ldw	r2,-16(fp)
 40017b4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40017b8:	e0bffc17 	ldw	r2,-16(fp)
 40017bc:	10800017 	ldw	r2,0(r2)
 40017c0:	10800304 	addi	r2,r2,12
 40017c4:	e0fffc17 	ldw	r3,-16(fp)
 40017c8:	18c00117 	ldw	r3,4(r3)
 40017cc:	10c00035 	stwio	r3,0(r2)
 40017d0:	e0bff717 	ldw	r2,-36(fp)
 40017d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40017d8:	e0bff917 	ldw	r2,-28(fp)
 40017dc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 40017e0:	e0bff417 	ldw	r2,-48(fp)
 40017e4:	1000021e 	bne	r2,zero,40017f0 <altera_avalon_uart_read+0x180>
 40017e8:	e0bffe17 	ldw	r2,-8(fp)
 40017ec:	103fce1e 	bne	r2,zero,4001728 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40017f0:	0005303a 	rdctl	r2,status
 40017f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40017f8:	e0fffa17 	ldw	r3,-24(fp)
 40017fc:	00bfff84 	movi	r2,-2
 4001800:	1884703a 	and	r2,r3,r2
 4001804:	1001703a 	wrctl	status,r2
  
  return context;
 4001808:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 400180c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4001810:	e0bffc17 	ldw	r2,-16(fp)
 4001814:	10800117 	ldw	r2,4(r2)
 4001818:	10c02014 	ori	r3,r2,128
 400181c:	e0bffc17 	ldw	r2,-16(fp)
 4001820:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4001824:	e0bffc17 	ldw	r2,-16(fp)
 4001828:	10800017 	ldw	r2,0(r2)
 400182c:	10800304 	addi	r2,r2,12
 4001830:	e0fffc17 	ldw	r3,-16(fp)
 4001834:	18c00117 	ldw	r3,4(r3)
 4001838:	10c00035 	stwio	r3,0(r2)
 400183c:	e0bff717 	ldw	r2,-36(fp)
 4001840:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001844:	e0bffb17 	ldw	r2,-20(fp)
 4001848:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 400184c:	e0bff303 	ldbu	r2,-52(fp)
 4001850:	10000226 	beq	r2,zero,400185c <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 4001854:	00bffd44 	movi	r2,-11
 4001858:	00000106 	br	4001860 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 400185c:	e0bff417 	ldw	r2,-48(fp)
  }
}
 4001860:	e037883a 	mov	sp,fp
 4001864:	dfc00117 	ldw	ra,4(sp)
 4001868:	df000017 	ldw	fp,0(sp)
 400186c:	dec00204 	addi	sp,sp,8
 4001870:	f800283a 	ret

04001874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001874:	defffe04 	addi	sp,sp,-8
 4001878:	dfc00115 	stw	ra,4(sp)
 400187c:	df000015 	stw	fp,0(sp)
 4001880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001884:	00810034 	movhi	r2,1024
 4001888:	1091bf04 	addi	r2,r2,18172
 400188c:	10800017 	ldw	r2,0(r2)
 4001890:	10000526 	beq	r2,zero,40018a8 <alt_get_errno+0x34>
 4001894:	00810034 	movhi	r2,1024
 4001898:	1091bf04 	addi	r2,r2,18172
 400189c:	10800017 	ldw	r2,0(r2)
 40018a0:	103ee83a 	callr	r2
 40018a4:	00000206 	br	40018b0 <alt_get_errno+0x3c>
 40018a8:	00810034 	movhi	r2,1024
 40018ac:	10978c04 	addi	r2,r2,24112
}
 40018b0:	e037883a 	mov	sp,fp
 40018b4:	dfc00117 	ldw	ra,4(sp)
 40018b8:	df000017 	ldw	fp,0(sp)
 40018bc:	dec00204 	addi	sp,sp,8
 40018c0:	f800283a 	ret

040018c4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 40018c4:	defff204 	addi	sp,sp,-56
 40018c8:	dfc00d15 	stw	ra,52(sp)
 40018cc:	df000c15 	stw	fp,48(sp)
 40018d0:	df000c04 	addi	fp,sp,48
 40018d4:	e13ffc15 	stw	r4,-16(fp)
 40018d8:	e17ffd15 	stw	r5,-12(fp)
 40018dc:	e1bffe15 	stw	r6,-8(fp)
 40018e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 40018e4:	e0bffe17 	ldw	r2,-8(fp)
 40018e8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 40018ec:	e0bfff17 	ldw	r2,-4(fp)
 40018f0:	1090000c 	andi	r2,r2,16384
 40018f4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 40018f8:	00003b06 	br	40019e8 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40018fc:	e0bffc17 	ldw	r2,-16(fp)
 4001900:	10800517 	ldw	r2,20(r2)
 4001904:	10800044 	addi	r2,r2,1
 4001908:	10800fcc 	andi	r2,r2,63
 400190c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4001910:	e0bffc17 	ldw	r2,-16(fp)
 4001914:	10c00417 	ldw	r3,16(r2)
 4001918:	e0bff617 	ldw	r2,-40(fp)
 400191c:	1880211e 	bne	r3,r2,40019a4 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 4001920:	e0bff517 	ldw	r2,-44(fp)
 4001924:	10000426 	beq	r2,zero,4001938 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 4001928:	40018740 	call	4001874 <alt_get_errno>
 400192c:	00c002c4 	movi	r3,11
 4001930:	10c00015 	stw	r3,0(r2)
        break;
 4001934:	00002e06 	br	40019f0 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001938:	0005303a 	rdctl	r2,status
 400193c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001940:	e0fff817 	ldw	r3,-32(fp)
 4001944:	00bfff84 	movi	r2,-2
 4001948:	1884703a 	and	r2,r3,r2
 400194c:	1001703a 	wrctl	status,r2
  
  return context;
 4001950:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 4001954:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4001958:	e0bffc17 	ldw	r2,-16(fp)
 400195c:	10800117 	ldw	r2,4(r2)
 4001960:	10c11014 	ori	r3,r2,1088
 4001964:	e0bffc17 	ldw	r2,-16(fp)
 4001968:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400196c:	e0bffc17 	ldw	r2,-16(fp)
 4001970:	10800017 	ldw	r2,0(r2)
 4001974:	10800304 	addi	r2,r2,12
 4001978:	e0fffc17 	ldw	r3,-16(fp)
 400197c:	18c00117 	ldw	r3,4(r3)
 4001980:	10c00035 	stwio	r3,0(r2)
 4001984:	e0bff717 	ldw	r2,-36(fp)
 4001988:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400198c:	e0bff917 	ldw	r2,-28(fp)
 4001990:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 4001994:	e0bffc17 	ldw	r2,-16(fp)
 4001998:	10c00417 	ldw	r3,16(r2)
 400199c:	e0bff617 	ldw	r2,-40(fp)
 40019a0:	18bffc26 	beq	r3,r2,4001994 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 40019a4:	e0bff417 	ldw	r2,-48(fp)
 40019a8:	10bfffc4 	addi	r2,r2,-1
 40019ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 40019b0:	e0bffc17 	ldw	r2,-16(fp)
 40019b4:	10800517 	ldw	r2,20(r2)
 40019b8:	e0fffd17 	ldw	r3,-12(fp)
 40019bc:	18c00003 	ldbu	r3,0(r3)
 40019c0:	e13ffc17 	ldw	r4,-16(fp)
 40019c4:	2085883a 	add	r2,r4,r2
 40019c8:	10801704 	addi	r2,r2,92
 40019cc:	10c00005 	stb	r3,0(r2)
 40019d0:	e0bffd17 	ldw	r2,-12(fp)
 40019d4:	10800044 	addi	r2,r2,1
 40019d8:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 40019dc:	e0bffc17 	ldw	r2,-16(fp)
 40019e0:	e0fff617 	ldw	r3,-40(fp)
 40019e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 40019e8:	e0bff417 	ldw	r2,-48(fp)
 40019ec:	103fc31e 	bne	r2,zero,40018fc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40019f0:	0005303a 	rdctl	r2,status
 40019f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40019f8:	e0fffa17 	ldw	r3,-24(fp)
 40019fc:	00bfff84 	movi	r2,-2
 4001a00:	1884703a 	and	r2,r3,r2
 4001a04:	1001703a 	wrctl	status,r2
  
  return context;
 4001a08:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4001a0c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4001a10:	e0bffc17 	ldw	r2,-16(fp)
 4001a14:	10800117 	ldw	r2,4(r2)
 4001a18:	10c11014 	ori	r3,r2,1088
 4001a1c:	e0bffc17 	ldw	r2,-16(fp)
 4001a20:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4001a24:	e0bffc17 	ldw	r2,-16(fp)
 4001a28:	10800017 	ldw	r2,0(r2)
 4001a2c:	10800304 	addi	r2,r2,12
 4001a30:	e0fffc17 	ldw	r3,-16(fp)
 4001a34:	18c00117 	ldw	r3,4(r3)
 4001a38:	10c00035 	stwio	r3,0(r2)
 4001a3c:	e0bff717 	ldw	r2,-36(fp)
 4001a40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001a44:	e0bffb17 	ldw	r2,-20(fp)
 4001a48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 4001a4c:	e0fffe17 	ldw	r3,-8(fp)
 4001a50:	e0bff417 	ldw	r2,-48(fp)
 4001a54:	1885c83a 	sub	r2,r3,r2
}
 4001a58:	e037883a 	mov	sp,fp
 4001a5c:	dfc00117 	ldw	ra,4(sp)
 4001a60:	df000017 	ldw	fp,0(sp)
 4001a64:	dec00204 	addi	sp,sp,8
 4001a68:	f800283a 	ret

04001a6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4001a6c:	defff504 	addi	sp,sp,-44
 4001a70:	df000a15 	stw	fp,40(sp)
 4001a74:	df000a04 	addi	fp,sp,40
 4001a78:	e13ffc15 	stw	r4,-16(fp)
 4001a7c:	e17ffd15 	stw	r5,-12(fp)
 4001a80:	e1bffe15 	stw	r6,-8(fp)
 4001a84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4001a88:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001a8c:	00810034 	movhi	r2,1024
 4001a90:	10978a04 	addi	r2,r2,24104
 4001a94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4001a98:	10003f26 	beq	r2,zero,4001b98 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4001a9c:	e0bffc17 	ldw	r2,-16(fp)
 4001aa0:	10003b26 	beq	r2,zero,4001b90 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4001aa4:	e0bffc17 	ldw	r2,-16(fp)
 4001aa8:	e0fffe17 	ldw	r3,-8(fp)
 4001aac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4001ab0:	e0bffc17 	ldw	r2,-16(fp)
 4001ab4:	e0ffff17 	ldw	r3,-4(fp)
 4001ab8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001abc:	0005303a 	rdctl	r2,status
 4001ac0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001ac4:	e0fff817 	ldw	r3,-32(fp)
 4001ac8:	00bfff84 	movi	r2,-2
 4001acc:	1884703a 	and	r2,r3,r2
 4001ad0:	1001703a 	wrctl	status,r2
  
  return context;
 4001ad4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4001ad8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001adc:	00810034 	movhi	r2,1024
 4001ae0:	10978b04 	addi	r2,r2,24108
 4001ae4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4001ae8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4001aec:	e0fffd17 	ldw	r3,-12(fp)
 4001af0:	e0bff617 	ldw	r2,-40(fp)
 4001af4:	1885883a 	add	r2,r3,r2
 4001af8:	10c00044 	addi	r3,r2,1
 4001afc:	e0bffc17 	ldw	r2,-16(fp)
 4001b00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4001b04:	e0bffc17 	ldw	r2,-16(fp)
 4001b08:	10c00217 	ldw	r3,8(r2)
 4001b0c:	e0bff617 	ldw	r2,-40(fp)
 4001b10:	1880042e 	bgeu	r3,r2,4001b24 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4001b14:	e0bffc17 	ldw	r2,-16(fp)
 4001b18:	00c00044 	movi	r3,1
 4001b1c:	10c00405 	stb	r3,16(r2)
 4001b20:	00000206 	br	4001b2c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4001b24:	e0bffc17 	ldw	r2,-16(fp)
 4001b28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4001b2c:	e0bffc17 	ldw	r2,-16(fp)
 4001b30:	00c10034 	movhi	r3,1024
 4001b34:	18d1c104 	addi	r3,r3,18180
 4001b38:	e0fff915 	stw	r3,-28(fp)
 4001b3c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001b40:	e0bffa17 	ldw	r2,-24(fp)
 4001b44:	e0fff917 	ldw	r3,-28(fp)
 4001b48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001b4c:	e0bff917 	ldw	r2,-28(fp)
 4001b50:	10c00017 	ldw	r3,0(r2)
 4001b54:	e0bffa17 	ldw	r2,-24(fp)
 4001b58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4001b5c:	e0bff917 	ldw	r2,-28(fp)
 4001b60:	10800017 	ldw	r2,0(r2)
 4001b64:	e0fffa17 	ldw	r3,-24(fp)
 4001b68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4001b6c:	e0bff917 	ldw	r2,-28(fp)
 4001b70:	e0fffa17 	ldw	r3,-24(fp)
 4001b74:	10c00015 	stw	r3,0(r2)
 4001b78:	e0bff717 	ldw	r2,-36(fp)
 4001b7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001b80:	e0bffb17 	ldw	r2,-20(fp)
 4001b84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4001b88:	0005883a 	mov	r2,zero
 4001b8c:	00000306 	br	4001b9c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4001b90:	00bffa84 	movi	r2,-22
 4001b94:	00000106 	br	4001b9c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4001b98:	00bfde84 	movi	r2,-134
  }
}
 4001b9c:	e037883a 	mov	sp,fp
 4001ba0:	df000017 	ldw	fp,0(sp)
 4001ba4:	dec00104 	addi	sp,sp,4
 4001ba8:	f800283a 	ret

04001bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001bac:	defffe04 	addi	sp,sp,-8
 4001bb0:	dfc00115 	stw	ra,4(sp)
 4001bb4:	df000015 	stw	fp,0(sp)
 4001bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001bbc:	00810034 	movhi	r2,1024
 4001bc0:	1091bf04 	addi	r2,r2,18172
 4001bc4:	10800017 	ldw	r2,0(r2)
 4001bc8:	10000526 	beq	r2,zero,4001be0 <alt_get_errno+0x34>
 4001bcc:	00810034 	movhi	r2,1024
 4001bd0:	1091bf04 	addi	r2,r2,18172
 4001bd4:	10800017 	ldw	r2,0(r2)
 4001bd8:	103ee83a 	callr	r2
 4001bdc:	00000206 	br	4001be8 <alt_get_errno+0x3c>
 4001be0:	00810034 	movhi	r2,1024
 4001be4:	10978c04 	addi	r2,r2,24112
}
 4001be8:	e037883a 	mov	sp,fp
 4001bec:	dfc00117 	ldw	ra,4(sp)
 4001bf0:	df000017 	ldw	fp,0(sp)
 4001bf4:	dec00204 	addi	sp,sp,8
 4001bf8:	f800283a 	ret

04001bfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4001bfc:	defffb04 	addi	sp,sp,-20
 4001c00:	dfc00415 	stw	ra,16(sp)
 4001c04:	df000315 	stw	fp,12(sp)
 4001c08:	df000304 	addi	fp,sp,12
 4001c0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4001c10:	e0bfff17 	ldw	r2,-4(fp)
 4001c14:	10000616 	blt	r2,zero,4001c30 <close+0x34>
 4001c18:	e0bfff17 	ldw	r2,-4(fp)
 4001c1c:	10c00324 	muli	r3,r2,12
 4001c20:	00810034 	movhi	r2,1024
 4001c24:	10905704 	addi	r2,r2,16732
 4001c28:	1885883a 	add	r2,r3,r2
 4001c2c:	00000106 	br	4001c34 <close+0x38>
 4001c30:	0005883a 	mov	r2,zero
 4001c34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4001c38:	e0bffd17 	ldw	r2,-12(fp)
 4001c3c:	10001826 	beq	r2,zero,4001ca0 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4001c40:	e0bffd17 	ldw	r2,-12(fp)
 4001c44:	10800017 	ldw	r2,0(r2)
 4001c48:	10800417 	ldw	r2,16(r2)
 4001c4c:	10000626 	beq	r2,zero,4001c68 <close+0x6c>
 4001c50:	e0bffd17 	ldw	r2,-12(fp)
 4001c54:	10800017 	ldw	r2,0(r2)
 4001c58:	10800417 	ldw	r2,16(r2)
 4001c5c:	e13ffd17 	ldw	r4,-12(fp)
 4001c60:	103ee83a 	callr	r2
 4001c64:	00000106 	br	4001c6c <close+0x70>
 4001c68:	0005883a 	mov	r2,zero
 4001c6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4001c70:	e13fff17 	ldw	r4,-4(fp)
 4001c74:	400257c0 	call	400257c <alt_release_fd>
    if (rval < 0)
 4001c78:	e0bffe17 	ldw	r2,-8(fp)
 4001c7c:	1000060e 	bge	r2,zero,4001c98 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 4001c80:	4001bac0 	call	4001bac <alt_get_errno>
 4001c84:	e0fffe17 	ldw	r3,-8(fp)
 4001c88:	00c7c83a 	sub	r3,zero,r3
 4001c8c:	10c00015 	stw	r3,0(r2)
      return -1;
 4001c90:	00bfffc4 	movi	r2,-1
 4001c94:	00000606 	br	4001cb0 <close+0xb4>
    }
    return 0;
 4001c98:	0005883a 	mov	r2,zero
 4001c9c:	00000406 	br	4001cb0 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4001ca0:	4001bac0 	call	4001bac <alt_get_errno>
 4001ca4:	00c01444 	movi	r3,81
 4001ca8:	10c00015 	stw	r3,0(r2)
    return -1;
 4001cac:	00bfffc4 	movi	r2,-1
  }
}
 4001cb0:	e037883a 	mov	sp,fp
 4001cb4:	dfc00117 	ldw	ra,4(sp)
 4001cb8:	df000017 	ldw	fp,0(sp)
 4001cbc:	dec00204 	addi	sp,sp,8
 4001cc0:	f800283a 	ret

04001cc4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4001cc4:	defffe04 	addi	sp,sp,-8
 4001cc8:	df000115 	stw	fp,4(sp)
 4001ccc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001cd0:	e03fff15 	stw	zero,-4(fp)
 4001cd4:	00000506 	br	4001cec <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4001cd8:	e0bfff17 	ldw	r2,-4(fp)
 4001cdc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001ce0:	e0bfff17 	ldw	r2,-4(fp)
 4001ce4:	10800804 	addi	r2,r2,32
 4001ce8:	e0bfff15 	stw	r2,-4(fp)
 4001cec:	e0bfff17 	ldw	r2,-4(fp)
 4001cf0:	10820030 	cmpltui	r2,r2,2048
 4001cf4:	103ff81e 	bne	r2,zero,4001cd8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001cf8:	e037883a 	mov	sp,fp
 4001cfc:	df000017 	ldw	fp,0(sp)
 4001d00:	dec00104 	addi	sp,sp,4
 4001d04:	f800283a 	ret

04001d08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4001d08:	defffc04 	addi	sp,sp,-16
 4001d0c:	df000315 	stw	fp,12(sp)
 4001d10:	df000304 	addi	fp,sp,12
 4001d14:	e13ffd15 	stw	r4,-12(fp)
 4001d18:	e17ffe15 	stw	r5,-8(fp)
 4001d1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4001d20:	e0bfff17 	ldw	r2,-4(fp)
}
 4001d24:	e037883a 	mov	sp,fp
 4001d28:	df000017 	ldw	fp,0(sp)
 4001d2c:	dec00104 	addi	sp,sp,4
 4001d30:	f800283a 	ret

04001d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4001d34:	defffe04 	addi	sp,sp,-8
 4001d38:	dfc00115 	stw	ra,4(sp)
 4001d3c:	df000015 	stw	fp,0(sp)
 4001d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001d44:	00810034 	movhi	r2,1024
 4001d48:	1091bf04 	addi	r2,r2,18172
 4001d4c:	10800017 	ldw	r2,0(r2)
 4001d50:	10000526 	beq	r2,zero,4001d68 <alt_get_errno+0x34>
 4001d54:	00810034 	movhi	r2,1024
 4001d58:	1091bf04 	addi	r2,r2,18172
 4001d5c:	10800017 	ldw	r2,0(r2)
 4001d60:	103ee83a 	callr	r2
 4001d64:	00000206 	br	4001d70 <alt_get_errno+0x3c>
 4001d68:	00810034 	movhi	r2,1024
 4001d6c:	10978c04 	addi	r2,r2,24112
}
 4001d70:	e037883a 	mov	sp,fp
 4001d74:	dfc00117 	ldw	ra,4(sp)
 4001d78:	df000017 	ldw	fp,0(sp)
 4001d7c:	dec00204 	addi	sp,sp,8
 4001d80:	f800283a 	ret

04001d84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001d84:	defffa04 	addi	sp,sp,-24
 4001d88:	dfc00515 	stw	ra,20(sp)
 4001d8c:	df000415 	stw	fp,16(sp)
 4001d90:	df000404 	addi	fp,sp,16
 4001d94:	e13ffe15 	stw	r4,-8(fp)
 4001d98:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001d9c:	e0bffe17 	ldw	r2,-8(fp)
 4001da0:	10000326 	beq	r2,zero,4001db0 <alt_dev_llist_insert+0x2c>
 4001da4:	e0bffe17 	ldw	r2,-8(fp)
 4001da8:	10800217 	ldw	r2,8(r2)
 4001dac:	1000051e 	bne	r2,zero,4001dc4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 4001db0:	4001d340 	call	4001d34 <alt_get_errno>
 4001db4:	00c00584 	movi	r3,22
 4001db8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001dbc:	00bffa84 	movi	r2,-22
 4001dc0:	00001306 	br	4001e10 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4001dc4:	e0bffe17 	ldw	r2,-8(fp)
 4001dc8:	e0ffff17 	ldw	r3,-4(fp)
 4001dcc:	e0fffc15 	stw	r3,-16(fp)
 4001dd0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001dd4:	e0bffd17 	ldw	r2,-12(fp)
 4001dd8:	e0fffc17 	ldw	r3,-16(fp)
 4001ddc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4001de0:	e0bffc17 	ldw	r2,-16(fp)
 4001de4:	10c00017 	ldw	r3,0(r2)
 4001de8:	e0bffd17 	ldw	r2,-12(fp)
 4001dec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4001df0:	e0bffc17 	ldw	r2,-16(fp)
 4001df4:	10800017 	ldw	r2,0(r2)
 4001df8:	e0fffd17 	ldw	r3,-12(fp)
 4001dfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4001e00:	e0bffc17 	ldw	r2,-16(fp)
 4001e04:	e0fffd17 	ldw	r3,-12(fp)
 4001e08:	10c00015 	stw	r3,0(r2)

  return 0;  
 4001e0c:	0005883a 	mov	r2,zero
}
 4001e10:	e037883a 	mov	sp,fp
 4001e14:	dfc00117 	ldw	ra,4(sp)
 4001e18:	df000017 	ldw	fp,0(sp)
 4001e1c:	dec00204 	addi	sp,sp,8
 4001e20:	f800283a 	ret

04001e24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4001e24:	defffd04 	addi	sp,sp,-12
 4001e28:	dfc00215 	stw	ra,8(sp)
 4001e2c:	df000115 	stw	fp,4(sp)
 4001e30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4001e34:	00810034 	movhi	r2,1024
 4001e38:	108bf404 	addi	r2,r2,12240
 4001e3c:	e0bfff15 	stw	r2,-4(fp)
 4001e40:	00000606 	br	4001e5c <_do_ctors+0x38>
        (*ctor) (); 
 4001e44:	e0bfff17 	ldw	r2,-4(fp)
 4001e48:	10800017 	ldw	r2,0(r2)
 4001e4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4001e50:	e0bfff17 	ldw	r2,-4(fp)
 4001e54:	10bfff04 	addi	r2,r2,-4
 4001e58:	e0bfff15 	stw	r2,-4(fp)
 4001e5c:	e0ffff17 	ldw	r3,-4(fp)
 4001e60:	00810034 	movhi	r2,1024
 4001e64:	108bf504 	addi	r2,r2,12244
 4001e68:	18bff62e 	bgeu	r3,r2,4001e44 <_do_ctors+0x20>
        (*ctor) (); 
}
 4001e6c:	e037883a 	mov	sp,fp
 4001e70:	dfc00117 	ldw	ra,4(sp)
 4001e74:	df000017 	ldw	fp,0(sp)
 4001e78:	dec00204 	addi	sp,sp,8
 4001e7c:	f800283a 	ret

04001e80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4001e80:	defffd04 	addi	sp,sp,-12
 4001e84:	dfc00215 	stw	ra,8(sp)
 4001e88:	df000115 	stw	fp,4(sp)
 4001e8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001e90:	00810034 	movhi	r2,1024
 4001e94:	108bf404 	addi	r2,r2,12240
 4001e98:	e0bfff15 	stw	r2,-4(fp)
 4001e9c:	00000606 	br	4001eb8 <_do_dtors+0x38>
        (*dtor) (); 
 4001ea0:	e0bfff17 	ldw	r2,-4(fp)
 4001ea4:	10800017 	ldw	r2,0(r2)
 4001ea8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4001eac:	e0bfff17 	ldw	r2,-4(fp)
 4001eb0:	10bfff04 	addi	r2,r2,-4
 4001eb4:	e0bfff15 	stw	r2,-4(fp)
 4001eb8:	e0ffff17 	ldw	r3,-4(fp)
 4001ebc:	00810034 	movhi	r2,1024
 4001ec0:	108bf504 	addi	r2,r2,12244
 4001ec4:	18bff62e 	bgeu	r3,r2,4001ea0 <_do_dtors+0x20>
        (*dtor) (); 
}
 4001ec8:	e037883a 	mov	sp,fp
 4001ecc:	dfc00117 	ldw	ra,4(sp)
 4001ed0:	df000017 	ldw	fp,0(sp)
 4001ed4:	dec00204 	addi	sp,sp,8
 4001ed8:	f800283a 	ret

04001edc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4001edc:	defffe04 	addi	sp,sp,-8
 4001ee0:	dfc00115 	stw	ra,4(sp)
 4001ee4:	df000015 	stw	fp,0(sp)
 4001ee8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001eec:	0009883a 	mov	r4,zero
 4001ef0:	01440004 	movi	r5,4096
 4001ef4:	40029f00 	call	40029f0 <alt_icache_flush>
#endif
}
 4001ef8:	e037883a 	mov	sp,fp
 4001efc:	dfc00117 	ldw	ra,4(sp)
 4001f00:	df000017 	ldw	fp,0(sp)
 4001f04:	dec00204 	addi	sp,sp,8
 4001f08:	f800283a 	ret

04001f0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4001f0c:	defff904 	addi	sp,sp,-28
 4001f10:	dfc00615 	stw	ra,24(sp)
 4001f14:	df000515 	stw	fp,20(sp)
 4001f18:	df000504 	addi	fp,sp,20
 4001f1c:	e13ffc15 	stw	r4,-16(fp)
 4001f20:	e17ffd15 	stw	r5,-12(fp)
 4001f24:	e1bffe15 	stw	r6,-8(fp)
 4001f28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4001f2c:	e0800217 	ldw	r2,8(fp)
 4001f30:	d8800015 	stw	r2,0(sp)
 4001f34:	e13ffc17 	ldw	r4,-16(fp)
 4001f38:	e17ffd17 	ldw	r5,-12(fp)
 4001f3c:	e1bffe17 	ldw	r6,-8(fp)
 4001f40:	e1ffff17 	ldw	r7,-4(fp)
 4001f44:	40020e40 	call	40020e4 <alt_iic_isr_register>
}  
 4001f48:	e037883a 	mov	sp,fp
 4001f4c:	dfc00117 	ldw	ra,4(sp)
 4001f50:	df000017 	ldw	fp,0(sp)
 4001f54:	dec00204 	addi	sp,sp,8
 4001f58:	f800283a 	ret

04001f5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4001f5c:	defff904 	addi	sp,sp,-28
 4001f60:	df000615 	stw	fp,24(sp)
 4001f64:	df000604 	addi	fp,sp,24
 4001f68:	e13ffe15 	stw	r4,-8(fp)
 4001f6c:	e17fff15 	stw	r5,-4(fp)
 4001f70:	e0bfff17 	ldw	r2,-4(fp)
 4001f74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001f78:	0005303a 	rdctl	r2,status
 4001f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001f80:	e0fffb17 	ldw	r3,-20(fp)
 4001f84:	00bfff84 	movi	r2,-2
 4001f88:	1884703a 	and	r2,r3,r2
 4001f8c:	1001703a 	wrctl	status,r2
  
  return context;
 4001f90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4001f94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4001f98:	e0bffa17 	ldw	r2,-24(fp)
 4001f9c:	00c00044 	movi	r3,1
 4001fa0:	1884983a 	sll	r2,r3,r2
 4001fa4:	1007883a 	mov	r3,r2
 4001fa8:	00810034 	movhi	r2,1024
 4001fac:	10978904 	addi	r2,r2,24100
 4001fb0:	10800017 	ldw	r2,0(r2)
 4001fb4:	1886b03a 	or	r3,r3,r2
 4001fb8:	00810034 	movhi	r2,1024
 4001fbc:	10978904 	addi	r2,r2,24100
 4001fc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4001fc4:	00810034 	movhi	r2,1024
 4001fc8:	10978904 	addi	r2,r2,24100
 4001fcc:	10800017 	ldw	r2,0(r2)
 4001fd0:	100170fa 	wrctl	ienable,r2
 4001fd4:	e0bffc17 	ldw	r2,-16(fp)
 4001fd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001fdc:	e0bffd17 	ldw	r2,-12(fp)
 4001fe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4001fe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4001fe8:	e037883a 	mov	sp,fp
 4001fec:	df000017 	ldw	fp,0(sp)
 4001ff0:	dec00104 	addi	sp,sp,4
 4001ff4:	f800283a 	ret

04001ff8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4001ff8:	defff904 	addi	sp,sp,-28
 4001ffc:	df000615 	stw	fp,24(sp)
 4002000:	df000604 	addi	fp,sp,24
 4002004:	e13ffe15 	stw	r4,-8(fp)
 4002008:	e17fff15 	stw	r5,-4(fp)
 400200c:	e0bfff17 	ldw	r2,-4(fp)
 4002010:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002014:	0005303a 	rdctl	r2,status
 4002018:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400201c:	e0fffb17 	ldw	r3,-20(fp)
 4002020:	00bfff84 	movi	r2,-2
 4002024:	1884703a 	and	r2,r3,r2
 4002028:	1001703a 	wrctl	status,r2
  
  return context;
 400202c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4002030:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4002034:	e0bffa17 	ldw	r2,-24(fp)
 4002038:	00c00044 	movi	r3,1
 400203c:	1884983a 	sll	r2,r3,r2
 4002040:	0084303a 	nor	r2,zero,r2
 4002044:	1007883a 	mov	r3,r2
 4002048:	00810034 	movhi	r2,1024
 400204c:	10978904 	addi	r2,r2,24100
 4002050:	10800017 	ldw	r2,0(r2)
 4002054:	1886703a 	and	r3,r3,r2
 4002058:	00810034 	movhi	r2,1024
 400205c:	10978904 	addi	r2,r2,24100
 4002060:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002064:	00810034 	movhi	r2,1024
 4002068:	10978904 	addi	r2,r2,24100
 400206c:	10800017 	ldw	r2,0(r2)
 4002070:	100170fa 	wrctl	ienable,r2
 4002074:	e0bffc17 	ldw	r2,-16(fp)
 4002078:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400207c:	e0bffd17 	ldw	r2,-12(fp)
 4002080:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4002084:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4002088:	e037883a 	mov	sp,fp
 400208c:	df000017 	ldw	fp,0(sp)
 4002090:	dec00104 	addi	sp,sp,4
 4002094:	f800283a 	ret

04002098 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4002098:	defffc04 	addi	sp,sp,-16
 400209c:	df000315 	stw	fp,12(sp)
 40020a0:	df000304 	addi	fp,sp,12
 40020a4:	e13ffe15 	stw	r4,-8(fp)
 40020a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40020ac:	000530fa 	rdctl	r2,ienable
 40020b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40020b4:	e0bfff17 	ldw	r2,-4(fp)
 40020b8:	00c00044 	movi	r3,1
 40020bc:	1884983a 	sll	r2,r3,r2
 40020c0:	1007883a 	mov	r3,r2
 40020c4:	e0bffd17 	ldw	r2,-12(fp)
 40020c8:	1884703a 	and	r2,r3,r2
 40020cc:	1004c03a 	cmpne	r2,r2,zero
 40020d0:	10803fcc 	andi	r2,r2,255
}
 40020d4:	e037883a 	mov	sp,fp
 40020d8:	df000017 	ldw	fp,0(sp)
 40020dc:	dec00104 	addi	sp,sp,4
 40020e0:	f800283a 	ret

040020e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40020e4:	defff504 	addi	sp,sp,-44
 40020e8:	dfc00a15 	stw	ra,40(sp)
 40020ec:	df000915 	stw	fp,36(sp)
 40020f0:	df000904 	addi	fp,sp,36
 40020f4:	e13ffc15 	stw	r4,-16(fp)
 40020f8:	e17ffd15 	stw	r5,-12(fp)
 40020fc:	e1bffe15 	stw	r6,-8(fp)
 4002100:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4002104:	00bffa84 	movi	r2,-22
 4002108:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400210c:	e0bffd17 	ldw	r2,-12(fp)
 4002110:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4002114:	e0bff817 	ldw	r2,-32(fp)
 4002118:	10800808 	cmpgei	r2,r2,32
 400211c:	1000271e 	bne	r2,zero,40021bc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002120:	0005303a 	rdctl	r2,status
 4002124:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002128:	e0fffa17 	ldw	r3,-24(fp)
 400212c:	00bfff84 	movi	r2,-2
 4002130:	1884703a 	and	r2,r3,r2
 4002134:	1001703a 	wrctl	status,r2
  
  return context;
 4002138:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400213c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 4002140:	00c10034 	movhi	r3,1024
 4002144:	18d78d04 	addi	r3,r3,24116
 4002148:	e0bff817 	ldw	r2,-32(fp)
 400214c:	100490fa 	slli	r2,r2,3
 4002150:	1885883a 	add	r2,r3,r2
 4002154:	e0fffe17 	ldw	r3,-8(fp)
 4002158:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400215c:	00c10034 	movhi	r3,1024
 4002160:	18d78d04 	addi	r3,r3,24116
 4002164:	e0bff817 	ldw	r2,-32(fp)
 4002168:	100490fa 	slli	r2,r2,3
 400216c:	1885883a 	add	r2,r3,r2
 4002170:	10800104 	addi	r2,r2,4
 4002174:	e0ffff17 	ldw	r3,-4(fp)
 4002178:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400217c:	e0bffe17 	ldw	r2,-8(fp)
 4002180:	10000526 	beq	r2,zero,4002198 <alt_iic_isr_register+0xb4>
 4002184:	e0bff817 	ldw	r2,-32(fp)
 4002188:	e13ffc17 	ldw	r4,-16(fp)
 400218c:	100b883a 	mov	r5,r2
 4002190:	4001f5c0 	call	4001f5c <alt_ic_irq_enable>
 4002194:	00000406 	br	40021a8 <alt_iic_isr_register+0xc4>
 4002198:	e0bff817 	ldw	r2,-32(fp)
 400219c:	e13ffc17 	ldw	r4,-16(fp)
 40021a0:	100b883a 	mov	r5,r2
 40021a4:	4001ff80 	call	4001ff8 <alt_ic_irq_disable>
 40021a8:	e0bff715 	stw	r2,-36(fp)
 40021ac:	e0bff917 	ldw	r2,-28(fp)
 40021b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40021b4:	e0bffb17 	ldw	r2,-20(fp)
 40021b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40021bc:	e0bff717 	ldw	r2,-36(fp)
}
 40021c0:	e037883a 	mov	sp,fp
 40021c4:	dfc00117 	ldw	ra,4(sp)
 40021c8:	df000017 	ldw	fp,0(sp)
 40021cc:	dec00204 	addi	sp,sp,8
 40021d0:	f800283a 	ret

040021d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40021d4:	defff904 	addi	sp,sp,-28
 40021d8:	dfc00615 	stw	ra,24(sp)
 40021dc:	df000515 	stw	fp,20(sp)
 40021e0:	df000504 	addi	fp,sp,20
 40021e4:	e13ffc15 	stw	r4,-16(fp)
 40021e8:	e17ffd15 	stw	r5,-12(fp)
 40021ec:	e1bffe15 	stw	r6,-8(fp)
 40021f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40021f4:	e13ffd17 	ldw	r4,-12(fp)
 40021f8:	e17ffe17 	ldw	r5,-8(fp)
 40021fc:	e1bfff17 	ldw	r6,-4(fp)
 4002200:	40024280 	call	4002428 <open>
 4002204:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4002208:	e0bffb17 	ldw	r2,-20(fp)
 400220c:	10001c16 	blt	r2,zero,4002280 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4002210:	00c10034 	movhi	r3,1024
 4002214:	18d05704 	addi	r3,r3,16732
 4002218:	e0bffb17 	ldw	r2,-20(fp)
 400221c:	10800324 	muli	r2,r2,12
 4002220:	1885883a 	add	r2,r3,r2
 4002224:	10c00017 	ldw	r3,0(r2)
 4002228:	e0bffc17 	ldw	r2,-16(fp)
 400222c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4002230:	00c10034 	movhi	r3,1024
 4002234:	18d05704 	addi	r3,r3,16732
 4002238:	e0bffb17 	ldw	r2,-20(fp)
 400223c:	10800324 	muli	r2,r2,12
 4002240:	1885883a 	add	r2,r3,r2
 4002244:	10800104 	addi	r2,r2,4
 4002248:	10c00017 	ldw	r3,0(r2)
 400224c:	e0bffc17 	ldw	r2,-16(fp)
 4002250:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002254:	00c10034 	movhi	r3,1024
 4002258:	18d05704 	addi	r3,r3,16732
 400225c:	e0bffb17 	ldw	r2,-20(fp)
 4002260:	10800324 	muli	r2,r2,12
 4002264:	1885883a 	add	r2,r3,r2
 4002268:	10800204 	addi	r2,r2,8
 400226c:	10c00017 	ldw	r3,0(r2)
 4002270:	e0bffc17 	ldw	r2,-16(fp)
 4002274:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4002278:	e13ffb17 	ldw	r4,-20(fp)
 400227c:	400257c0 	call	400257c <alt_release_fd>
  }
} 
 4002280:	e037883a 	mov	sp,fp
 4002284:	dfc00117 	ldw	ra,4(sp)
 4002288:	df000017 	ldw	fp,0(sp)
 400228c:	dec00204 	addi	sp,sp,8
 4002290:	f800283a 	ret

04002294 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002294:	defffb04 	addi	sp,sp,-20
 4002298:	dfc00415 	stw	ra,16(sp)
 400229c:	df000315 	stw	fp,12(sp)
 40022a0:	df000304 	addi	fp,sp,12
 40022a4:	e13ffd15 	stw	r4,-12(fp)
 40022a8:	e17ffe15 	stw	r5,-8(fp)
 40022ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40022b0:	01010034 	movhi	r4,1024
 40022b4:	21105a04 	addi	r4,r4,16744
 40022b8:	e17ffd17 	ldw	r5,-12(fp)
 40022bc:	01800044 	movi	r6,1
 40022c0:	01c07fc4 	movi	r7,511
 40022c4:	40021d40 	call	40021d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40022c8:	01010034 	movhi	r4,1024
 40022cc:	21105704 	addi	r4,r4,16732
 40022d0:	e17ffe17 	ldw	r5,-8(fp)
 40022d4:	000d883a 	mov	r6,zero
 40022d8:	01c07fc4 	movi	r7,511
 40022dc:	40021d40 	call	40021d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40022e0:	01010034 	movhi	r4,1024
 40022e4:	21105d04 	addi	r4,r4,16756
 40022e8:	e17fff17 	ldw	r5,-4(fp)
 40022ec:	01800044 	movi	r6,1
 40022f0:	01c07fc4 	movi	r7,511
 40022f4:	40021d40 	call	40021d4 <alt_open_fd>
}  
 40022f8:	e037883a 	mov	sp,fp
 40022fc:	dfc00117 	ldw	ra,4(sp)
 4002300:	df000017 	ldw	fp,0(sp)
 4002304:	dec00204 	addi	sp,sp,8
 4002308:	f800283a 	ret

0400230c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400230c:	defffe04 	addi	sp,sp,-8
 4002310:	dfc00115 	stw	ra,4(sp)
 4002314:	df000015 	stw	fp,0(sp)
 4002318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400231c:	00810034 	movhi	r2,1024
 4002320:	1091bf04 	addi	r2,r2,18172
 4002324:	10800017 	ldw	r2,0(r2)
 4002328:	10000526 	beq	r2,zero,4002340 <alt_get_errno+0x34>
 400232c:	00810034 	movhi	r2,1024
 4002330:	1091bf04 	addi	r2,r2,18172
 4002334:	10800017 	ldw	r2,0(r2)
 4002338:	103ee83a 	callr	r2
 400233c:	00000206 	br	4002348 <alt_get_errno+0x3c>
 4002340:	00810034 	movhi	r2,1024
 4002344:	10978c04 	addi	r2,r2,24112
}
 4002348:	e037883a 	mov	sp,fp
 400234c:	dfc00117 	ldw	ra,4(sp)
 4002350:	df000017 	ldw	fp,0(sp)
 4002354:	dec00204 	addi	sp,sp,8
 4002358:	f800283a 	ret

0400235c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400235c:	defffd04 	addi	sp,sp,-12
 4002360:	df000215 	stw	fp,8(sp)
 4002364:	df000204 	addi	fp,sp,8
 4002368:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400236c:	e0bfff17 	ldw	r2,-4(fp)
 4002370:	10800217 	ldw	r2,8(r2)
 4002374:	10d00034 	orhi	r3,r2,16384
 4002378:	e0bfff17 	ldw	r2,-4(fp)
 400237c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002380:	e03ffe15 	stw	zero,-8(fp)
 4002384:	00001d06 	br	40023fc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002388:	00c10034 	movhi	r3,1024
 400238c:	18d05704 	addi	r3,r3,16732
 4002390:	e0bffe17 	ldw	r2,-8(fp)
 4002394:	10800324 	muli	r2,r2,12
 4002398:	1885883a 	add	r2,r3,r2
 400239c:	10c00017 	ldw	r3,0(r2)
 40023a0:	e0bfff17 	ldw	r2,-4(fp)
 40023a4:	10800017 	ldw	r2,0(r2)
 40023a8:	1880111e 	bne	r3,r2,40023f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40023ac:	00c10034 	movhi	r3,1024
 40023b0:	18d05704 	addi	r3,r3,16732
 40023b4:	e0bffe17 	ldw	r2,-8(fp)
 40023b8:	10800324 	muli	r2,r2,12
 40023bc:	1885883a 	add	r2,r3,r2
 40023c0:	10800204 	addi	r2,r2,8
 40023c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40023c8:	1000090e 	bge	r2,zero,40023f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40023cc:	e0bffe17 	ldw	r2,-8(fp)
 40023d0:	10c00324 	muli	r3,r2,12
 40023d4:	00810034 	movhi	r2,1024
 40023d8:	10905704 	addi	r2,r2,16732
 40023dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40023e0:	e0bfff17 	ldw	r2,-4(fp)
 40023e4:	18800226 	beq	r3,r2,40023f0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40023e8:	00bffcc4 	movi	r2,-13
 40023ec:	00000a06 	br	4002418 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40023f0:	e0bffe17 	ldw	r2,-8(fp)
 40023f4:	10800044 	addi	r2,r2,1
 40023f8:	e0bffe15 	stw	r2,-8(fp)
 40023fc:	00810034 	movhi	r2,1024
 4002400:	1091be04 	addi	r2,r2,18168
 4002404:	10800017 	ldw	r2,0(r2)
 4002408:	1007883a 	mov	r3,r2
 400240c:	e0bffe17 	ldw	r2,-8(fp)
 4002410:	18bfdd2e 	bgeu	r3,r2,4002388 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4002414:	0005883a 	mov	r2,zero
}
 4002418:	e037883a 	mov	sp,fp
 400241c:	df000017 	ldw	fp,0(sp)
 4002420:	dec00104 	addi	sp,sp,4
 4002424:	f800283a 	ret

04002428 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4002428:	defff604 	addi	sp,sp,-40
 400242c:	dfc00915 	stw	ra,36(sp)
 4002430:	df000815 	stw	fp,32(sp)
 4002434:	df000804 	addi	fp,sp,32
 4002438:	e13ffd15 	stw	r4,-12(fp)
 400243c:	e17ffe15 	stw	r5,-8(fp)
 4002440:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4002444:	00bfffc4 	movi	r2,-1
 4002448:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400244c:	00bffb44 	movi	r2,-19
 4002450:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4002454:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002458:	e13ffd17 	ldw	r4,-12(fp)
 400245c:	01410034 	movhi	r5,1024
 4002460:	2951bc04 	addi	r5,r5,18160
 4002464:	40027980 	call	4002798 <alt_find_dev>
 4002468:	e0bff815 	stw	r2,-32(fp)
 400246c:	e0bff817 	ldw	r2,-32(fp)
 4002470:	1000051e 	bne	r2,zero,4002488 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002474:	e13ffd17 	ldw	r4,-12(fp)
 4002478:	40028280 	call	4002828 <alt_find_file>
 400247c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4002480:	00800044 	movi	r2,1
 4002484:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002488:	e0bff817 	ldw	r2,-32(fp)
 400248c:	10002926 	beq	r2,zero,4002534 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4002490:	e13ff817 	ldw	r4,-32(fp)
 4002494:	400293c0 	call	400293c <alt_get_fd>
 4002498:	e0bff915 	stw	r2,-28(fp)
 400249c:	e0bff917 	ldw	r2,-28(fp)
 40024a0:	1000030e 	bge	r2,zero,40024b0 <open+0x88>
    {
      status = index;
 40024a4:	e0bff917 	ldw	r2,-28(fp)
 40024a8:	e0bffa15 	stw	r2,-24(fp)
 40024ac:	00002306 	br	400253c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 40024b0:	e0bff917 	ldw	r2,-28(fp)
 40024b4:	10c00324 	muli	r3,r2,12
 40024b8:	00810034 	movhi	r2,1024
 40024bc:	10905704 	addi	r2,r2,16732
 40024c0:	1885883a 	add	r2,r3,r2
 40024c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40024c8:	e0fffe17 	ldw	r3,-8(fp)
 40024cc:	00900034 	movhi	r2,16384
 40024d0:	10bfffc4 	addi	r2,r2,-1
 40024d4:	1886703a 	and	r3,r3,r2
 40024d8:	e0bffc17 	ldw	r2,-16(fp)
 40024dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40024e0:	e0bffb17 	ldw	r2,-20(fp)
 40024e4:	1000051e 	bne	r2,zero,40024fc <open+0xd4>
 40024e8:	e13ffc17 	ldw	r4,-16(fp)
 40024ec:	400235c0 	call	400235c <alt_file_locked>
 40024f0:	e0bffa15 	stw	r2,-24(fp)
 40024f4:	e0bffa17 	ldw	r2,-24(fp)
 40024f8:	10001016 	blt	r2,zero,400253c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40024fc:	e0bff817 	ldw	r2,-32(fp)
 4002500:	10800317 	ldw	r2,12(r2)
 4002504:	10000826 	beq	r2,zero,4002528 <open+0x100>
 4002508:	e0bff817 	ldw	r2,-32(fp)
 400250c:	10800317 	ldw	r2,12(r2)
 4002510:	e13ffc17 	ldw	r4,-16(fp)
 4002514:	e17ffd17 	ldw	r5,-12(fp)
 4002518:	e1bffe17 	ldw	r6,-8(fp)
 400251c:	e1ffff17 	ldw	r7,-4(fp)
 4002520:	103ee83a 	callr	r2
 4002524:	00000106 	br	400252c <open+0x104>
 4002528:	0005883a 	mov	r2,zero
 400252c:	e0bffa15 	stw	r2,-24(fp)
 4002530:	00000206 	br	400253c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4002534:	00bffb44 	movi	r2,-19
 4002538:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400253c:	e0bffa17 	ldw	r2,-24(fp)
 4002540:	1000080e 	bge	r2,zero,4002564 <open+0x13c>
  {
    alt_release_fd (index);  
 4002544:	e13ff917 	ldw	r4,-28(fp)
 4002548:	400257c0 	call	400257c <alt_release_fd>
    ALT_ERRNO = -status;
 400254c:	400230c0 	call	400230c <alt_get_errno>
 4002550:	e0fffa17 	ldw	r3,-24(fp)
 4002554:	00c7c83a 	sub	r3,zero,r3
 4002558:	10c00015 	stw	r3,0(r2)
    return -1;
 400255c:	00bfffc4 	movi	r2,-1
 4002560:	00000106 	br	4002568 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4002564:	e0bff917 	ldw	r2,-28(fp)
}
 4002568:	e037883a 	mov	sp,fp
 400256c:	dfc00117 	ldw	ra,4(sp)
 4002570:	df000017 	ldw	fp,0(sp)
 4002574:	dec00204 	addi	sp,sp,8
 4002578:	f800283a 	ret

0400257c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400257c:	defffe04 	addi	sp,sp,-8
 4002580:	df000115 	stw	fp,4(sp)
 4002584:	df000104 	addi	fp,sp,4
 4002588:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400258c:	e0bfff17 	ldw	r2,-4(fp)
 4002590:	108000d0 	cmplti	r2,r2,3
 4002594:	10000d1e 	bne	r2,zero,40025cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4002598:	00c10034 	movhi	r3,1024
 400259c:	18d05704 	addi	r3,r3,16732
 40025a0:	e0bfff17 	ldw	r2,-4(fp)
 40025a4:	10800324 	muli	r2,r2,12
 40025a8:	1885883a 	add	r2,r3,r2
 40025ac:	10800204 	addi	r2,r2,8
 40025b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40025b4:	00c10034 	movhi	r3,1024
 40025b8:	18d05704 	addi	r3,r3,16732
 40025bc:	e0bfff17 	ldw	r2,-4(fp)
 40025c0:	10800324 	muli	r2,r2,12
 40025c4:	1885883a 	add	r2,r3,r2
 40025c8:	10000015 	stw	zero,0(r2)
  }
}
 40025cc:	e037883a 	mov	sp,fp
 40025d0:	df000017 	ldw	fp,0(sp)
 40025d4:	dec00104 	addi	sp,sp,4
 40025d8:	f800283a 	ret

040025dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40025dc:	defffa04 	addi	sp,sp,-24
 40025e0:	df000515 	stw	fp,20(sp)
 40025e4:	df000504 	addi	fp,sp,20
 40025e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40025ec:	0005303a 	rdctl	r2,status
 40025f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40025f4:	e0fffc17 	ldw	r3,-16(fp)
 40025f8:	00bfff84 	movi	r2,-2
 40025fc:	1884703a 	and	r2,r3,r2
 4002600:	1001703a 	wrctl	status,r2
  
  return context;
 4002604:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4002608:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400260c:	e0bfff17 	ldw	r2,-4(fp)
 4002610:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4002614:	e0bffd17 	ldw	r2,-12(fp)
 4002618:	10800017 	ldw	r2,0(r2)
 400261c:	e0fffd17 	ldw	r3,-12(fp)
 4002620:	18c00117 	ldw	r3,4(r3)
 4002624:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4002628:	e0bffd17 	ldw	r2,-12(fp)
 400262c:	10800117 	ldw	r2,4(r2)
 4002630:	e0fffd17 	ldw	r3,-12(fp)
 4002634:	18c00017 	ldw	r3,0(r3)
 4002638:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400263c:	e0bffd17 	ldw	r2,-12(fp)
 4002640:	e0fffd17 	ldw	r3,-12(fp)
 4002644:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4002648:	e0bffd17 	ldw	r2,-12(fp)
 400264c:	e0fffd17 	ldw	r3,-12(fp)
 4002650:	10c00015 	stw	r3,0(r2)
 4002654:	e0bffb17 	ldw	r2,-20(fp)
 4002658:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400265c:	e0bffe17 	ldw	r2,-8(fp)
 4002660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4002664:	e037883a 	mov	sp,fp
 4002668:	df000017 	ldw	fp,0(sp)
 400266c:	dec00104 	addi	sp,sp,4
 4002670:	f800283a 	ret

04002674 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4002674:	defffb04 	addi	sp,sp,-20
 4002678:	dfc00415 	stw	ra,16(sp)
 400267c:	df000315 	stw	fp,12(sp)
 4002680:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4002684:	d0a00a17 	ldw	r2,-32728(gp)
 4002688:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400268c:	d0a5d417 	ldw	r2,-26800(gp)
 4002690:	10800044 	addi	r2,r2,1
 4002694:	d0a5d415 	stw	r2,-26800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002698:	00002e06 	br	4002754 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400269c:	e0bffd17 	ldw	r2,-12(fp)
 40026a0:	10800017 	ldw	r2,0(r2)
 40026a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40026a8:	e0bffd17 	ldw	r2,-12(fp)
 40026ac:	10800403 	ldbu	r2,16(r2)
 40026b0:	10803fcc 	andi	r2,r2,255
 40026b4:	10000426 	beq	r2,zero,40026c8 <alt_tick+0x54>
 40026b8:	d0a5d417 	ldw	r2,-26800(gp)
 40026bc:	1000021e 	bne	r2,zero,40026c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40026c0:	e0bffd17 	ldw	r2,-12(fp)
 40026c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40026c8:	e0bffd17 	ldw	r2,-12(fp)
 40026cc:	10800217 	ldw	r2,8(r2)
 40026d0:	d0e5d417 	ldw	r3,-26800(gp)
 40026d4:	18801d36 	bltu	r3,r2,400274c <alt_tick+0xd8>
 40026d8:	e0bffd17 	ldw	r2,-12(fp)
 40026dc:	10800403 	ldbu	r2,16(r2)
 40026e0:	10803fcc 	andi	r2,r2,255
 40026e4:	1000191e 	bne	r2,zero,400274c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40026e8:	e0bffd17 	ldw	r2,-12(fp)
 40026ec:	10c00317 	ldw	r3,12(r2)
 40026f0:	e0bffd17 	ldw	r2,-12(fp)
 40026f4:	10800517 	ldw	r2,20(r2)
 40026f8:	1009883a 	mov	r4,r2
 40026fc:	183ee83a 	callr	r3
 4002700:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4002704:	e0bfff17 	ldw	r2,-4(fp)
 4002708:	1000031e 	bne	r2,zero,4002718 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400270c:	e13ffd17 	ldw	r4,-12(fp)
 4002710:	40025dc0 	call	40025dc <alt_alarm_stop>
 4002714:	00000d06 	br	400274c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4002718:	e0bffd17 	ldw	r2,-12(fp)
 400271c:	10c00217 	ldw	r3,8(r2)
 4002720:	e0bfff17 	ldw	r2,-4(fp)
 4002724:	1887883a 	add	r3,r3,r2
 4002728:	e0bffd17 	ldw	r2,-12(fp)
 400272c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4002730:	e0bffd17 	ldw	r2,-12(fp)
 4002734:	10c00217 	ldw	r3,8(r2)
 4002738:	d0a5d417 	ldw	r2,-26800(gp)
 400273c:	1880032e 	bgeu	r3,r2,400274c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4002740:	e0bffd17 	ldw	r2,-12(fp)
 4002744:	00c00044 	movi	r3,1
 4002748:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400274c:	e0bffe17 	ldw	r2,-8(fp)
 4002750:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002754:	e0fffd17 	ldw	r3,-12(fp)
 4002758:	d0a00a04 	addi	r2,gp,-32728
 400275c:	18bfcf1e 	bne	r3,r2,400269c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4002760:	0001883a 	nop
}
 4002764:	e037883a 	mov	sp,fp
 4002768:	dfc00117 	ldw	ra,4(sp)
 400276c:	df000017 	ldw	fp,0(sp)
 4002770:	dec00204 	addi	sp,sp,8
 4002774:	f800283a 	ret

04002778 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4002778:	deffff04 	addi	sp,sp,-4
 400277c:	df000015 	stw	fp,0(sp)
 4002780:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4002784:	000170fa 	wrctl	ienable,zero
}
 4002788:	e037883a 	mov	sp,fp
 400278c:	df000017 	ldw	fp,0(sp)
 4002790:	dec00104 	addi	sp,sp,4
 4002794:	f800283a 	ret

04002798 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4002798:	defffa04 	addi	sp,sp,-24
 400279c:	dfc00515 	stw	ra,20(sp)
 40027a0:	df000415 	stw	fp,16(sp)
 40027a4:	df000404 	addi	fp,sp,16
 40027a8:	e13ffe15 	stw	r4,-8(fp)
 40027ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40027b0:	e0bfff17 	ldw	r2,-4(fp)
 40027b4:	10800017 	ldw	r2,0(r2)
 40027b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40027bc:	e13ffe17 	ldw	r4,-8(fp)
 40027c0:	4002c3c0 	call	4002c3c <strlen>
 40027c4:	10800044 	addi	r2,r2,1
 40027c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40027cc:	00000d06 	br	4002804 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40027d0:	e0bffc17 	ldw	r2,-16(fp)
 40027d4:	10c00217 	ldw	r3,8(r2)
 40027d8:	e0bffd17 	ldw	r2,-12(fp)
 40027dc:	1809883a 	mov	r4,r3
 40027e0:	e17ffe17 	ldw	r5,-8(fp)
 40027e4:	100d883a 	mov	r6,r2
 40027e8:	4002ac80 	call	4002ac8 <memcmp>
 40027ec:	1000021e 	bne	r2,zero,40027f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40027f0:	e0bffc17 	ldw	r2,-16(fp)
 40027f4:	00000706 	br	4002814 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40027f8:	e0bffc17 	ldw	r2,-16(fp)
 40027fc:	10800017 	ldw	r2,0(r2)
 4002800:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002804:	e0fffc17 	ldw	r3,-16(fp)
 4002808:	e0bfff17 	ldw	r2,-4(fp)
 400280c:	18bff01e 	bne	r3,r2,40027d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4002810:	0005883a 	mov	r2,zero
}
 4002814:	e037883a 	mov	sp,fp
 4002818:	dfc00117 	ldw	ra,4(sp)
 400281c:	df000017 	ldw	fp,0(sp)
 4002820:	dec00204 	addi	sp,sp,8
 4002824:	f800283a 	ret

04002828 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4002828:	defffb04 	addi	sp,sp,-20
 400282c:	dfc00415 	stw	ra,16(sp)
 4002830:	df000315 	stw	fp,12(sp)
 4002834:	df000304 	addi	fp,sp,12
 4002838:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400283c:	00810034 	movhi	r2,1024
 4002840:	1091ba04 	addi	r2,r2,18152
 4002844:	10800017 	ldw	r2,0(r2)
 4002848:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400284c:	00003106 	br	4002914 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 4002850:	e0bffd17 	ldw	r2,-12(fp)
 4002854:	10800217 	ldw	r2,8(r2)
 4002858:	1009883a 	mov	r4,r2
 400285c:	4002c3c0 	call	4002c3c <strlen>
 4002860:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4002864:	e0bffd17 	ldw	r2,-12(fp)
 4002868:	10c00217 	ldw	r3,8(r2)
 400286c:	e0bffe17 	ldw	r2,-8(fp)
 4002870:	10bfffc4 	addi	r2,r2,-1
 4002874:	1885883a 	add	r2,r3,r2
 4002878:	10800003 	ldbu	r2,0(r2)
 400287c:	10803fcc 	andi	r2,r2,255
 4002880:	1080201c 	xori	r2,r2,128
 4002884:	10bfe004 	addi	r2,r2,-128
 4002888:	10800bd8 	cmpnei	r2,r2,47
 400288c:	1000031e 	bne	r2,zero,400289c <alt_find_file+0x74>
    {
      len -= 1;
 4002890:	e0bffe17 	ldw	r2,-8(fp)
 4002894:	10bfffc4 	addi	r2,r2,-1
 4002898:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400289c:	e0bffe17 	ldw	r2,-8(fp)
 40028a0:	e0ffff17 	ldw	r3,-4(fp)
 40028a4:	1885883a 	add	r2,r3,r2
 40028a8:	10800003 	ldbu	r2,0(r2)
 40028ac:	10803fcc 	andi	r2,r2,255
 40028b0:	1080201c 	xori	r2,r2,128
 40028b4:	10bfe004 	addi	r2,r2,-128
 40028b8:	10800be0 	cmpeqi	r2,r2,47
 40028bc:	1000081e 	bne	r2,zero,40028e0 <alt_find_file+0xb8>
 40028c0:	e0bffe17 	ldw	r2,-8(fp)
 40028c4:	e0ffff17 	ldw	r3,-4(fp)
 40028c8:	1885883a 	add	r2,r3,r2
 40028cc:	10800003 	ldbu	r2,0(r2)
 40028d0:	10803fcc 	andi	r2,r2,255
 40028d4:	1080201c 	xori	r2,r2,128
 40028d8:	10bfe004 	addi	r2,r2,-128
 40028dc:	10000a1e 	bne	r2,zero,4002908 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 40028e0:	e0bffd17 	ldw	r2,-12(fp)
 40028e4:	10c00217 	ldw	r3,8(r2)
 40028e8:	e0bffe17 	ldw	r2,-8(fp)
 40028ec:	1809883a 	mov	r4,r3
 40028f0:	e17fff17 	ldw	r5,-4(fp)
 40028f4:	100d883a 	mov	r6,r2
 40028f8:	4002ac80 	call	4002ac8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40028fc:	1000021e 	bne	r2,zero,4002908 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4002900:	e0bffd17 	ldw	r2,-12(fp)
 4002904:	00000806 	br	4002928 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 4002908:	e0bffd17 	ldw	r2,-12(fp)
 400290c:	10800017 	ldw	r2,0(r2)
 4002910:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4002914:	e0fffd17 	ldw	r3,-12(fp)
 4002918:	00810034 	movhi	r2,1024
 400291c:	1091ba04 	addi	r2,r2,18152
 4002920:	18bfcb1e 	bne	r3,r2,4002850 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4002924:	0005883a 	mov	r2,zero
}
 4002928:	e037883a 	mov	sp,fp
 400292c:	dfc00117 	ldw	ra,4(sp)
 4002930:	df000017 	ldw	fp,0(sp)
 4002934:	dec00204 	addi	sp,sp,8
 4002938:	f800283a 	ret

0400293c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400293c:	defffc04 	addi	sp,sp,-16
 4002940:	df000315 	stw	fp,12(sp)
 4002944:	df000304 	addi	fp,sp,12
 4002948:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400294c:	00bffa04 	movi	r2,-24
 4002950:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002954:	e03ffd15 	stw	zero,-12(fp)
 4002958:	00001d06 	br	40029d0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 400295c:	00c10034 	movhi	r3,1024
 4002960:	18d05704 	addi	r3,r3,16732
 4002964:	e0bffd17 	ldw	r2,-12(fp)
 4002968:	10800324 	muli	r2,r2,12
 400296c:	1885883a 	add	r2,r3,r2
 4002970:	10800017 	ldw	r2,0(r2)
 4002974:	1000131e 	bne	r2,zero,40029c4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4002978:	00c10034 	movhi	r3,1024
 400297c:	18d05704 	addi	r3,r3,16732
 4002980:	e0bffd17 	ldw	r2,-12(fp)
 4002984:	10800324 	muli	r2,r2,12
 4002988:	1885883a 	add	r2,r3,r2
 400298c:	e0ffff17 	ldw	r3,-4(fp)
 4002990:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4002994:	00810034 	movhi	r2,1024
 4002998:	1091be04 	addi	r2,r2,18168
 400299c:	10c00017 	ldw	r3,0(r2)
 40029a0:	e0bffd17 	ldw	r2,-12(fp)
 40029a4:	1880040e 	bge	r3,r2,40029b8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 40029a8:	00810034 	movhi	r2,1024
 40029ac:	1091be04 	addi	r2,r2,18168
 40029b0:	e0fffd17 	ldw	r3,-12(fp)
 40029b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 40029b8:	e0bffd17 	ldw	r2,-12(fp)
 40029bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40029c0:	00000606 	br	40029dc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40029c4:	e0bffd17 	ldw	r2,-12(fp)
 40029c8:	10800044 	addi	r2,r2,1
 40029cc:	e0bffd15 	stw	r2,-12(fp)
 40029d0:	e0bffd17 	ldw	r2,-12(fp)
 40029d4:	10800810 	cmplti	r2,r2,32
 40029d8:	103fe01e 	bne	r2,zero,400295c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40029dc:	e0bffe17 	ldw	r2,-8(fp)
}
 40029e0:	e037883a 	mov	sp,fp
 40029e4:	df000017 	ldw	fp,0(sp)
 40029e8:	dec00104 	addi	sp,sp,4
 40029ec:	f800283a 	ret

040029f0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40029f0:	defffb04 	addi	sp,sp,-20
 40029f4:	df000415 	stw	fp,16(sp)
 40029f8:	df000404 	addi	fp,sp,16
 40029fc:	e13ffe15 	stw	r4,-8(fp)
 4002a00:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4002a04:	e0bfff17 	ldw	r2,-4(fp)
 4002a08:	10840070 	cmpltui	r2,r2,4097
 4002a0c:	1000021e 	bne	r2,zero,4002a18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4002a10:	00840004 	movi	r2,4096
 4002a14:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4002a18:	e0fffe17 	ldw	r3,-8(fp)
 4002a1c:	e0bfff17 	ldw	r2,-4(fp)
 4002a20:	1885883a 	add	r2,r3,r2
 4002a24:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4002a28:	e0bffe17 	ldw	r2,-8(fp)
 4002a2c:	e0bffc15 	stw	r2,-16(fp)
 4002a30:	00000506 	br	4002a48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4002a34:	e0bffc17 	ldw	r2,-16(fp)
 4002a38:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4002a3c:	e0bffc17 	ldw	r2,-16(fp)
 4002a40:	10800804 	addi	r2,r2,32
 4002a44:	e0bffc15 	stw	r2,-16(fp)
 4002a48:	e0fffc17 	ldw	r3,-16(fp)
 4002a4c:	e0bffd17 	ldw	r2,-12(fp)
 4002a50:	18bff836 	bltu	r3,r2,4002a34 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4002a54:	e0bffe17 	ldw	r2,-8(fp)
 4002a58:	108007cc 	andi	r2,r2,31
 4002a5c:	10000226 	beq	r2,zero,4002a68 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4002a60:	e0bffc17 	ldw	r2,-16(fp)
 4002a64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4002a68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4002a6c:	e037883a 	mov	sp,fp
 4002a70:	df000017 	ldw	fp,0(sp)
 4002a74:	dec00104 	addi	sp,sp,4
 4002a78:	f800283a 	ret

04002a7c <atexit>:
 4002a7c:	200b883a 	mov	r5,r4
 4002a80:	000d883a 	mov	r6,zero
 4002a84:	0009883a 	mov	r4,zero
 4002a88:	000f883a 	mov	r7,zero
 4002a8c:	4002cc81 	jmpi	4002cc8 <__register_exitproc>

04002a90 <exit>:
 4002a90:	defffe04 	addi	sp,sp,-8
 4002a94:	000b883a 	mov	r5,zero
 4002a98:	dc000015 	stw	r16,0(sp)
 4002a9c:	dfc00115 	stw	ra,4(sp)
 4002aa0:	2021883a 	mov	r16,r4
 4002aa4:	4002df80 	call	4002df8 <__call_exitprocs>
 4002aa8:	00810034 	movhi	r2,1024
 4002aac:	1091c304 	addi	r2,r2,18188
 4002ab0:	11000017 	ldw	r4,0(r2)
 4002ab4:	20800f17 	ldw	r2,60(r4)
 4002ab8:	10000126 	beq	r2,zero,4002ac0 <exit+0x30>
 4002abc:	103ee83a 	callr	r2
 4002ac0:	8009883a 	mov	r4,r16
 4002ac4:	4002f980 	call	4002f98 <_exit>

04002ac8 <memcmp>:
 4002ac8:	01c000c4 	movi	r7,3
 4002acc:	3980192e 	bgeu	r7,r6,4002b34 <memcmp+0x6c>
 4002ad0:	2904b03a 	or	r2,r5,r4
 4002ad4:	11c4703a 	and	r2,r2,r7
 4002ad8:	10000f26 	beq	r2,zero,4002b18 <memcmp+0x50>
 4002adc:	20c00003 	ldbu	r3,0(r4)
 4002ae0:	28800003 	ldbu	r2,0(r5)
 4002ae4:	1880151e 	bne	r3,r2,4002b3c <memcmp+0x74>
 4002ae8:	31bfff84 	addi	r6,r6,-2
 4002aec:	01ffffc4 	movi	r7,-1
 4002af0:	00000406 	br	4002b04 <memcmp+0x3c>
 4002af4:	20c00003 	ldbu	r3,0(r4)
 4002af8:	28800003 	ldbu	r2,0(r5)
 4002afc:	31bfffc4 	addi	r6,r6,-1
 4002b00:	18800e1e 	bne	r3,r2,4002b3c <memcmp+0x74>
 4002b04:	21000044 	addi	r4,r4,1
 4002b08:	29400044 	addi	r5,r5,1
 4002b0c:	31fff91e 	bne	r6,r7,4002af4 <memcmp+0x2c>
 4002b10:	0005883a 	mov	r2,zero
 4002b14:	f800283a 	ret
 4002b18:	20c00017 	ldw	r3,0(r4)
 4002b1c:	28800017 	ldw	r2,0(r5)
 4002b20:	1880041e 	bne	r3,r2,4002b34 <memcmp+0x6c>
 4002b24:	31bfff04 	addi	r6,r6,-4
 4002b28:	21000104 	addi	r4,r4,4
 4002b2c:	29400104 	addi	r5,r5,4
 4002b30:	39bff936 	bltu	r7,r6,4002b18 <memcmp+0x50>
 4002b34:	303fe91e 	bne	r6,zero,4002adc <memcmp+0x14>
 4002b38:	003ff506 	br	4002b10 <memcmp+0x48>
 4002b3c:	1885c83a 	sub	r2,r3,r2
 4002b40:	f800283a 	ret

04002b44 <memcpy>:
 4002b44:	00c003c4 	movi	r3,15
 4002b48:	2005883a 	mov	r2,r4
 4002b4c:	3009883a 	mov	r4,r6
 4002b50:	1980032e 	bgeu	r3,r6,4002b60 <memcpy+0x1c>
 4002b54:	2886b03a 	or	r3,r5,r2
 4002b58:	18c000cc 	andi	r3,r3,3
 4002b5c:	18000926 	beq	r3,zero,4002b84 <memcpy+0x40>
 4002b60:	1007883a 	mov	r3,r2
 4002b64:	290f883a 	add	r7,r5,r4
 4002b68:	20000526 	beq	r4,zero,4002b80 <memcpy+0x3c>
 4002b6c:	29800003 	ldbu	r6,0(r5)
 4002b70:	18c00044 	addi	r3,r3,1
 4002b74:	29400044 	addi	r5,r5,1
 4002b78:	19bfffc5 	stb	r6,-1(r3)
 4002b7c:	29fffb1e 	bne	r5,r7,4002b6c <memcpy+0x28>
 4002b80:	f800283a 	ret
 4002b84:	327ffc04 	addi	r9,r6,-16
 4002b88:	4812d13a 	srli	r9,r9,4
 4002b8c:	11000404 	addi	r4,r2,16
 4002b90:	1007883a 	mov	r3,r2
 4002b94:	4810913a 	slli	r8,r9,4
 4002b98:	280f883a 	mov	r7,r5
 4002b9c:	2209883a 	add	r4,r4,r8
 4002ba0:	3a000017 	ldw	r8,0(r7)
 4002ba4:	18c00404 	addi	r3,r3,16
 4002ba8:	39c00404 	addi	r7,r7,16
 4002bac:	1a3ffc15 	stw	r8,-16(r3)
 4002bb0:	3a3ffd17 	ldw	r8,-12(r7)
 4002bb4:	1a3ffd15 	stw	r8,-12(r3)
 4002bb8:	3a3ffe17 	ldw	r8,-8(r7)
 4002bbc:	1a3ffe15 	stw	r8,-8(r3)
 4002bc0:	3a3fff17 	ldw	r8,-4(r7)
 4002bc4:	1a3fff15 	stw	r8,-4(r3)
 4002bc8:	193ff51e 	bne	r3,r4,4002ba0 <memcpy+0x5c>
 4002bcc:	49c00044 	addi	r7,r9,1
 4002bd0:	380e913a 	slli	r7,r7,4
 4002bd4:	310003cc 	andi	r4,r6,15
 4002bd8:	018000c4 	movi	r6,3
 4002bdc:	11c7883a 	add	r3,r2,r7
 4002be0:	29cb883a 	add	r5,r5,r7
 4002be4:	313fdf2e 	bgeu	r6,r4,4002b64 <memcpy+0x20>
 4002be8:	213fff04 	addi	r4,r4,-4
 4002bec:	2014d0ba 	srli	r10,r4,2
 4002bf0:	1a400104 	addi	r9,r3,4
 4002bf4:	180d883a 	mov	r6,r3
 4002bf8:	528f883a 	add	r7,r10,r10
 4002bfc:	39cf883a 	add	r7,r7,r7
 4002c00:	49d3883a 	add	r9,r9,r7
 4002c04:	280f883a 	mov	r7,r5
 4002c08:	3a000017 	ldw	r8,0(r7)
 4002c0c:	31800104 	addi	r6,r6,4
 4002c10:	39c00104 	addi	r7,r7,4
 4002c14:	323fff15 	stw	r8,-4(r6)
 4002c18:	327ffb1e 	bne	r6,r9,4002c08 <memcpy+0xc4>
 4002c1c:	51800044 	addi	r6,r10,1
 4002c20:	52bfff24 	muli	r10,r10,-4
 4002c24:	318d883a 	add	r6,r6,r6
 4002c28:	318d883a 	add	r6,r6,r6
 4002c2c:	5109883a 	add	r4,r10,r4
 4002c30:	298b883a 	add	r5,r5,r6
 4002c34:	1987883a 	add	r3,r3,r6
 4002c38:	003fca06 	br	4002b64 <memcpy+0x20>

04002c3c <strlen>:
 4002c3c:	208000cc 	andi	r2,r4,3
 4002c40:	10001f1e 	bne	r2,zero,4002cc0 <strlen+0x84>
 4002c44:	20800017 	ldw	r2,0(r4)
 4002c48:	01ffbff4 	movhi	r7,65279
 4002c4c:	39ffbfc4 	addi	r7,r7,-257
 4002c50:	01a02074 	movhi	r6,32897
 4002c54:	31a02004 	addi	r6,r6,-32640
 4002c58:	11c7883a 	add	r3,r2,r7
 4002c5c:	0084303a 	nor	r2,zero,r2
 4002c60:	1886703a 	and	r3,r3,r2
 4002c64:	1986703a 	and	r3,r3,r6
 4002c68:	2005883a 	mov	r2,r4
 4002c6c:	1800101e 	bne	r3,zero,4002cb0 <strlen+0x74>
 4002c70:	10800104 	addi	r2,r2,4
 4002c74:	10c00017 	ldw	r3,0(r2)
 4002c78:	19cb883a 	add	r5,r3,r7
 4002c7c:	00c6303a 	nor	r3,zero,r3
 4002c80:	28c6703a 	and	r3,r5,r3
 4002c84:	1986703a 	and	r3,r3,r6
 4002c88:	1800091e 	bne	r3,zero,4002cb0 <strlen+0x74>
 4002c8c:	10800104 	addi	r2,r2,4
 4002c90:	10c00017 	ldw	r3,0(r2)
 4002c94:	19cb883a 	add	r5,r3,r7
 4002c98:	00c6303a 	nor	r3,zero,r3
 4002c9c:	28c6703a 	and	r3,r5,r3
 4002ca0:	1986703a 	and	r3,r3,r6
 4002ca4:	183ff226 	beq	r3,zero,4002c70 <strlen+0x34>
 4002ca8:	00000106 	br	4002cb0 <strlen+0x74>
 4002cac:	10800044 	addi	r2,r2,1
 4002cb0:	10c00007 	ldb	r3,0(r2)
 4002cb4:	183ffd1e 	bne	r3,zero,4002cac <strlen+0x70>
 4002cb8:	1105c83a 	sub	r2,r2,r4
 4002cbc:	f800283a 	ret
 4002cc0:	2005883a 	mov	r2,r4
 4002cc4:	003ffa06 	br	4002cb0 <strlen+0x74>

04002cc8 <__register_exitproc>:
 4002cc8:	defffa04 	addi	sp,sp,-24
 4002ccc:	00810034 	movhi	r2,1024
 4002cd0:	1091c304 	addi	r2,r2,18188
 4002cd4:	dc000315 	stw	r16,12(sp)
 4002cd8:	14000017 	ldw	r16,0(r2)
 4002cdc:	dc400415 	stw	r17,16(sp)
 4002ce0:	dfc00515 	stw	ra,20(sp)
 4002ce4:	80805217 	ldw	r2,328(r16)
 4002ce8:	2023883a 	mov	r17,r4
 4002cec:	10003e26 	beq	r2,zero,4002de8 <__register_exitproc+0x120>
 4002cf0:	10c00117 	ldw	r3,4(r2)
 4002cf4:	020007c4 	movi	r8,31
 4002cf8:	40c0180e 	bge	r8,r3,4002d5c <__register_exitproc+0x94>
 4002cfc:	00800034 	movhi	r2,0
 4002d00:	10800004 	addi	r2,r2,0
 4002d04:	1000061e 	bne	r2,zero,4002d20 <__register_exitproc+0x58>
 4002d08:	00bfffc4 	movi	r2,-1
 4002d0c:	dfc00517 	ldw	ra,20(sp)
 4002d10:	dc400417 	ldw	r17,16(sp)
 4002d14:	dc000317 	ldw	r16,12(sp)
 4002d18:	dec00604 	addi	sp,sp,24
 4002d1c:	f800283a 	ret
 4002d20:	01006404 	movi	r4,400
 4002d24:	d9400015 	stw	r5,0(sp)
 4002d28:	d9800115 	stw	r6,4(sp)
 4002d2c:	d9c00215 	stw	r7,8(sp)
 4002d30:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4002d34:	d9400017 	ldw	r5,0(sp)
 4002d38:	d9800117 	ldw	r6,4(sp)
 4002d3c:	d9c00217 	ldw	r7,8(sp)
 4002d40:	103ff126 	beq	r2,zero,4002d08 <__register_exitproc+0x40>
 4002d44:	80c05217 	ldw	r3,328(r16)
 4002d48:	10000115 	stw	zero,4(r2)
 4002d4c:	10c00015 	stw	r3,0(r2)
 4002d50:	80805215 	stw	r2,328(r16)
 4002d54:	10006215 	stw	zero,392(r2)
 4002d58:	10006315 	stw	zero,396(r2)
 4002d5c:	10c00117 	ldw	r3,4(r2)
 4002d60:	88000d1e 	bne	r17,zero,4002d98 <__register_exitproc+0xd0>
 4002d64:	19000084 	addi	r4,r3,2
 4002d68:	2109883a 	add	r4,r4,r4
 4002d6c:	18c00044 	addi	r3,r3,1
 4002d70:	2109883a 	add	r4,r4,r4
 4002d74:	1109883a 	add	r4,r2,r4
 4002d78:	10c00115 	stw	r3,4(r2)
 4002d7c:	0005883a 	mov	r2,zero
 4002d80:	21400015 	stw	r5,0(r4)
 4002d84:	dfc00517 	ldw	ra,20(sp)
 4002d88:	dc400417 	ldw	r17,16(sp)
 4002d8c:	dc000317 	ldw	r16,12(sp)
 4002d90:	dec00604 	addi	sp,sp,24
 4002d94:	f800283a 	ret
 4002d98:	02400044 	movi	r9,1
 4002d9c:	12806217 	ldw	r10,392(r2)
 4002da0:	48d2983a 	sll	r9,r9,r3
 4002da4:	19000804 	addi	r4,r3,32
 4002da8:	18d1883a 	add	r8,r3,r3
 4002dac:	2109883a 	add	r4,r4,r4
 4002db0:	4211883a 	add	r8,r8,r8
 4002db4:	2109883a 	add	r4,r4,r4
 4002db8:	1109883a 	add	r4,r2,r4
 4002dbc:	1211883a 	add	r8,r2,r8
 4002dc0:	5254b03a 	or	r10,r10,r9
 4002dc4:	21c02215 	stw	r7,136(r4)
 4002dc8:	41802215 	stw	r6,136(r8)
 4002dcc:	12806215 	stw	r10,392(r2)
 4002dd0:	01000084 	movi	r4,2
 4002dd4:	893fe31e 	bne	r17,r4,4002d64 <__register_exitproc+0x9c>
 4002dd8:	11006317 	ldw	r4,396(r2)
 4002ddc:	2252b03a 	or	r9,r4,r9
 4002de0:	12406315 	stw	r9,396(r2)
 4002de4:	003fdf06 	br	4002d64 <__register_exitproc+0x9c>
 4002de8:	00810034 	movhi	r2,1024
 4002dec:	1097cd04 	addi	r2,r2,24372
 4002df0:	80805215 	stw	r2,328(r16)
 4002df4:	003fbe06 	br	4002cf0 <__register_exitproc+0x28>

04002df8 <__call_exitprocs>:
 4002df8:	00810034 	movhi	r2,1024
 4002dfc:	1091c304 	addi	r2,r2,18188
 4002e00:	10800017 	ldw	r2,0(r2)
 4002e04:	defff304 	addi	sp,sp,-52
 4002e08:	df000b15 	stw	fp,44(sp)
 4002e0c:	d8800015 	stw	r2,0(sp)
 4002e10:	10805204 	addi	r2,r2,328
 4002e14:	dd400815 	stw	r21,32(sp)
 4002e18:	dfc00c15 	stw	ra,48(sp)
 4002e1c:	ddc00a15 	stw	r23,40(sp)
 4002e20:	dd800915 	stw	r22,36(sp)
 4002e24:	dd000715 	stw	r20,28(sp)
 4002e28:	dcc00615 	stw	r19,24(sp)
 4002e2c:	dc800515 	stw	r18,20(sp)
 4002e30:	dc400415 	stw	r17,16(sp)
 4002e34:	dc000315 	stw	r16,12(sp)
 4002e38:	d9000115 	stw	r4,4(sp)
 4002e3c:	2839883a 	mov	fp,r5
 4002e40:	d8800215 	stw	r2,8(sp)
 4002e44:	057fffc4 	movi	r21,-1
 4002e48:	d8800017 	ldw	r2,0(sp)
 4002e4c:	ddc00217 	ldw	r23,8(sp)
 4002e50:	14805217 	ldw	r18,328(r2)
 4002e54:	90001726 	beq	r18,zero,4002eb4 <__call_exitprocs+0xbc>
 4002e58:	94400117 	ldw	r17,4(r18)
 4002e5c:	8c3fffc4 	addi	r16,r17,-1
 4002e60:	80001116 	blt	r16,zero,4002ea8 <__call_exitprocs+0xb0>
 4002e64:	8c400044 	addi	r17,r17,1
 4002e68:	8427883a 	add	r19,r16,r16
 4002e6c:	8c63883a 	add	r17,r17,r17
 4002e70:	95802204 	addi	r22,r18,136
 4002e74:	9ce7883a 	add	r19,r19,r19
 4002e78:	8c63883a 	add	r17,r17,r17
 4002e7c:	b4e7883a 	add	r19,r22,r19
 4002e80:	9463883a 	add	r17,r18,r17
 4002e84:	e0001726 	beq	fp,zero,4002ee4 <__call_exitprocs+0xec>
 4002e88:	8c87c83a 	sub	r3,r17,r18
 4002e8c:	b0c7883a 	add	r3,r22,r3
 4002e90:	18c01e17 	ldw	r3,120(r3)
 4002e94:	1f001326 	beq	r3,fp,4002ee4 <__call_exitprocs+0xec>
 4002e98:	843fffc4 	addi	r16,r16,-1
 4002e9c:	9cffff04 	addi	r19,r19,-4
 4002ea0:	8c7fff04 	addi	r17,r17,-4
 4002ea4:	857ff71e 	bne	r16,r21,4002e84 <__call_exitprocs+0x8c>
 4002ea8:	00800034 	movhi	r2,0
 4002eac:	10800004 	addi	r2,r2,0
 4002eb0:	10002a1e 	bne	r2,zero,4002f5c <__call_exitprocs+0x164>
 4002eb4:	dfc00c17 	ldw	ra,48(sp)
 4002eb8:	df000b17 	ldw	fp,44(sp)
 4002ebc:	ddc00a17 	ldw	r23,40(sp)
 4002ec0:	dd800917 	ldw	r22,36(sp)
 4002ec4:	dd400817 	ldw	r21,32(sp)
 4002ec8:	dd000717 	ldw	r20,28(sp)
 4002ecc:	dcc00617 	ldw	r19,24(sp)
 4002ed0:	dc800517 	ldw	r18,20(sp)
 4002ed4:	dc400417 	ldw	r17,16(sp)
 4002ed8:	dc000317 	ldw	r16,12(sp)
 4002edc:	dec00d04 	addi	sp,sp,52
 4002ee0:	f800283a 	ret
 4002ee4:	91000117 	ldw	r4,4(r18)
 4002ee8:	88c00017 	ldw	r3,0(r17)
 4002eec:	213fffc4 	addi	r4,r4,-1
 4002ef0:	24001526 	beq	r4,r16,4002f48 <__call_exitprocs+0x150>
 4002ef4:	88000015 	stw	zero,0(r17)
 4002ef8:	183fe726 	beq	r3,zero,4002e98 <__call_exitprocs+0xa0>
 4002efc:	00800044 	movi	r2,1
 4002f00:	1408983a 	sll	r4,r2,r16
 4002f04:	91406217 	ldw	r5,392(r18)
 4002f08:	95000117 	ldw	r20,4(r18)
 4002f0c:	214a703a 	and	r5,r4,r5
 4002f10:	28000b26 	beq	r5,zero,4002f40 <__call_exitprocs+0x148>
 4002f14:	91406317 	ldw	r5,396(r18)
 4002f18:	2148703a 	and	r4,r4,r5
 4002f1c:	20000c1e 	bne	r4,zero,4002f50 <__call_exitprocs+0x158>
 4002f20:	99400017 	ldw	r5,0(r19)
 4002f24:	d9000117 	ldw	r4,4(sp)
 4002f28:	183ee83a 	callr	r3
 4002f2c:	90c00117 	ldw	r3,4(r18)
 4002f30:	1d3fc51e 	bne	r3,r20,4002e48 <__call_exitprocs+0x50>
 4002f34:	b8c00017 	ldw	r3,0(r23)
 4002f38:	1cbfd726 	beq	r3,r18,4002e98 <__call_exitprocs+0xa0>
 4002f3c:	003fc206 	br	4002e48 <__call_exitprocs+0x50>
 4002f40:	183ee83a 	callr	r3
 4002f44:	003ff906 	br	4002f2c <__call_exitprocs+0x134>
 4002f48:	94000115 	stw	r16,4(r18)
 4002f4c:	003fea06 	br	4002ef8 <__call_exitprocs+0x100>
 4002f50:	99000017 	ldw	r4,0(r19)
 4002f54:	183ee83a 	callr	r3
 4002f58:	003ff406 	br	4002f2c <__call_exitprocs+0x134>
 4002f5c:	90c00117 	ldw	r3,4(r18)
 4002f60:	1800071e 	bne	r3,zero,4002f80 <__call_exitprocs+0x188>
 4002f64:	90c00017 	ldw	r3,0(r18)
 4002f68:	18000926 	beq	r3,zero,4002f90 <__call_exitprocs+0x198>
 4002f6c:	9009883a 	mov	r4,r18
 4002f70:	b8c00015 	stw	r3,0(r23)
 4002f74:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4002f78:	bc800017 	ldw	r18,0(r23)
 4002f7c:	003fb506 	br	4002e54 <__call_exitprocs+0x5c>
 4002f80:	90c00017 	ldw	r3,0(r18)
 4002f84:	902f883a 	mov	r23,r18
 4002f88:	1825883a 	mov	r18,r3
 4002f8c:	003fb106 	br	4002e54 <__call_exitprocs+0x5c>
 4002f90:	0007883a 	mov	r3,zero
 4002f94:	003ffb06 	br	4002f84 <__call_exitprocs+0x18c>

04002f98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4002f98:	defffc04 	addi	sp,sp,-16
 4002f9c:	df000315 	stw	fp,12(sp)
 4002fa0:	df000304 	addi	fp,sp,12
 4002fa4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4002fa8:	0001883a 	nop
 4002fac:	e0bfff17 	ldw	r2,-4(fp)
 4002fb0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4002fb4:	e0bffd17 	ldw	r2,-12(fp)
 4002fb8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4002fbc:	e0bffe17 	ldw	r2,-8(fp)
 4002fc0:	10000226 	beq	r2,zero,4002fcc <_exit+0x34>
    ALT_SIM_FAIL();
 4002fc4:	002af070 	cmpltui	zero,zero,43969
 4002fc8:	00000106 	br	4002fd0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 4002fcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4002fd0:	003fff06 	br	4002fd0 <_exit+0x38>
